'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var definitionRuntime = require('@scale-codec/definition-runtime');
var i64Fixnum = require('@iroha2/i64-fixnum');

const PRECISION = 9;
const encoder = definitionRuntime.encodeFactory((value, walker) => {
    definitionRuntime.encodeI64(i64Fixnum.f64StrToBigint(value, PRECISION), walker);
}, 
// i64 is always fixed 8-bytes len
() => 8);
const decoder = (walker) => {
    const bi = definitionRuntime.decodeI64(walker);
    return i64Fixnum.bigintToF64Str(bi, PRECISION);
};
const FixedPointI64P9 = definitionRuntime.trackableCodec('FixedPointI64P9', encoder, decoder);

// Dynamic codecs
const __dyn_FilterOptAssetDefinitionFilter = definitionRuntime.dynCodec(() => FilterOptAssetDefinitionFilter);
const __dyn_FindAccountKeyValueByIdAndKey = definitionRuntime.dynCodec(() => FindAccountKeyValueByIdAndKey);
const __dyn_SignatureOfCommittedBlock = definitionRuntime.dynCodec(() => SignatureOfCommittedBlock);
const __dyn_IdFilterTriggerId = definitionRuntime.dynCodec(() => IdFilterTriggerId);
const __dyn_FilterOptAccountEventFilter = definitionRuntime.dynCodec(() => FilterOptAccountEventFilter);
const __dyn_TransferBox = definitionRuntime.dynCodec(() => TransferBox);
const __dyn_EvaluatesToName = definitionRuntime.dynCodec(() => EvaluatesToName);
const __dyn_RejectedTransaction = definitionRuntime.dynCodec(() => RejectedTransaction);
const __dyn_BlockRejectionReason = definitionRuntime.dynCodec(() => BlockRejectionReason);
const __dyn_SignatureOfValidBlock = definitionRuntime.dynCodec(() => SignatureOfValidBlock);
const __dyn_Container = definitionRuntime.dynCodec(() => Container);
const __dyn_Add = definitionRuntime.dynCodec(() => Add);
const __dyn_AssetValue = definitionRuntime.dynCodec(() => AssetValue);
const __dyn_SemiIntervalFixed = definitionRuntime.dynCodec(() => SemiIntervalFixed);
const __dyn_MapAssetIdAsset = definitionRuntime.dynCodec(() => MapAssetIdAsset);
const __dyn_FindAccountsByName = definitionRuntime.dynCodec(() => FindAccountsByName);
const __dyn_SemiIntervalU32 = definitionRuntime.dynCodec(() => SemiIntervalU32);
const __dyn_MapAccountIdAccount = definitionRuntime.dynCodec(() => MapAccountIdAccount);
const __dyn_FilterOptRoleEventFilter = definitionRuntime.dynCodec(() => FilterOptRoleEventFilter);
const __dyn_ContextValue = definitionRuntime.dynCodec(() => ContextValue);
const __dyn_ValidTransaction = definitionRuntime.dynCodec(() => ValidTransaction);
const __dyn_Peer = definitionRuntime.dynCodec(() => Peer);
const __dyn_AssetEventFilter = definitionRuntime.dynCodec(() => AssetEventFilter);
const __dyn_VecPublicKey = definitionRuntime.dynCodec(() => VecPublicKey);
const __dyn_SignaturesOfTransactionPayload = definitionRuntime.dynCodec(() => SignaturesOfTransactionPayload);
const __dyn_VecHash = definitionRuntime.dynCodec(() => VecHash);
const __dyn_ContainsAll = definitionRuntime.dynCodec(() => ContainsAll);
const __dyn_Mod = definitionRuntime.dynCodec(() => Mod);
const __dyn_TriggerEvent = definitionRuntime.dynCodec(() => TriggerEvent);
const __dyn_QueryBox = definitionRuntime.dynCodec(() => QueryBox);
const __dyn_AssetDefinition = definitionRuntime.dynCodec(() => AssetDefinition);
const __dyn_HashOfVersionedCommittedBlock = definitionRuntime.dynCodec(() => HashOfVersionedCommittedBlock);
const __dyn_FindAssetKeyValueByIdAndKey = definitionRuntime.dynCodec(() => FindAssetKeyValueByIdAndKey);
const __dyn_HashOfVersionedValidBlock = definitionRuntime.dynCodec(() => HashOfVersionedValidBlock);
const __dyn_UnsupportedVersion = definitionRuntime.dynCodec(() => UnsupportedVersion);
const __dyn_SignaturesOfCommittedBlock = definitionRuntime.dynCodec(() => SignaturesOfCommittedBlock);
const __dyn_NotPermittedFail = definitionRuntime.dynCodec(() => NotPermittedFail);
const __dyn_EvaluatesToHash = definitionRuntime.dynCodec(() => EvaluatesToHash);
const __dyn_Or = definitionRuntime.dynCodec(() => Or);
const __dyn_SignedQueryRequest = definitionRuntime.dynCodec(() => SignedQueryRequest);
const __dyn_NewAssetDefinition = definitionRuntime.dynCodec(() => NewAssetDefinition);
const __dyn_FindTransactionsByAccountId = definitionRuntime.dynCodec(() => FindTransactionsByAccountId);
const __dyn_OptionHash = definitionRuntime.dynCodec(() => OptionHash);
const __dyn_TimeSchedule = definitionRuntime.dynCodec(() => TimeSchedule);
const __dyn_Domain = definitionRuntime.dynCodec(() => Domain);
const __dyn_BlockValue = definitionRuntime.dynCodec(() => BlockValue);
const __dyn_Proof = definitionRuntime.dynCodec(() => Proof);
const __dyn_OptionTopology = definitionRuntime.dynCodec(() => OptionTopology);
const __dyn_Multiply = definitionRuntime.dynCodec(() => Multiply);
const __dyn_NewDomain = definitionRuntime.dynCodec(() => NewDomain);
const __dyn_Reason = definitionRuntime.dynCodec(() => Reason);
const __dyn_IdFilterRoleId = definitionRuntime.dynCodec(() => IdFilterRoleId);
const __dyn_RoleEvent = definitionRuntime.dynCodec(() => RoleEvent);
const __dyn_MapPublicKeySignatureOfTransactionPayload = definitionRuntime.dynCodec(() => MapPublicKeySignatureOfTransactionPayload);
const __dyn_VecRoleId = definitionRuntime.dynCodec(() => VecRoleId);
const __dyn_EventPublisherMessage = definitionRuntime.dynCodec(() => EventPublisherMessage);
const __dyn_RevokeBox = definitionRuntime.dynCodec(() => RevokeBox);
const __dyn_TimeEventFilter = definitionRuntime.dynCodec(() => TimeEventFilter);
const __dyn_VecVersionedValidTransaction = definitionRuntime.dynCodec(() => VecVersionedValidTransaction);
const __dyn_ExecutionTime = definitionRuntime.dynCodec(() => ExecutionTime);
const __dyn_AccountEventFilter = definitionRuntime.dynCodec(() => AccountEventFilter);
const __dyn_QueryResult = definitionRuntime.dynCodec(() => QueryResult);
const __dyn_FilterOptIdFilterTriggerId = definitionRuntime.dynCodec(() => FilterOptIdFilterTriggerId);
const __dyn_EventSubscriberMessage = definitionRuntime.dynCodec(() => EventSubscriberMessage);
const __dyn_AccountFilter = definitionRuntime.dynCodec(() => AccountFilter);
const __dyn_FindAccountById = definitionRuntime.dynCodec(() => FindAccountById);
const __dyn_MapPublicKeySignatureOfCommittedBlock = definitionRuntime.dynCodec(() => MapPublicKeySignatureOfCommittedBlock);
const __dyn_EvaluatesToRoleId = definitionRuntime.dynCodec(() => EvaluatesToRoleId);
const __dyn_VecEvent = definitionRuntime.dynCodec(() => VecEvent);
const __dyn_QueryPayload = definitionRuntime.dynCodec(() => QueryPayload);
const __dyn_Where = definitionRuntime.dynCodec(() => Where);
const __dyn_FindAllDomains = definitionRuntime.dynCodec(() => definitionRuntime.Void);
const __dyn_VersionedTransaction = definitionRuntime.dynCodec(() => VersionedTransaction);
const __dyn_RaiseTo = definitionRuntime.dynCodec(() => RaiseTo);
const __dyn_OptionTimeInterval = definitionRuntime.dynCodec(() => OptionTimeInterval);
const __dyn_RegisterBox = definitionRuntime.dynCodec(() => RegisterBox);
const __dyn_AccountId = definitionRuntime.dynCodec(() => AccountId);
const __dyn_InstructionExecutionFail = definitionRuntime.dynCodec(() => InstructionExecutionFail);
const __dyn_VersionedCommittedBlock = definitionRuntime.dynCodec(() => VersionedCommittedBlock);
const __dyn_VecPredicateBox = definitionRuntime.dynCodec(() => VecPredicateBox);
const __dyn_ExecuteTriggerBox = definitionRuntime.dynCodec(() => ExecuteTriggerBox);
const __dyn_AssetFilter = definitionRuntime.dynCodec(() => AssetFilter);
const __dyn_PipelineStatusKind = definitionRuntime.dynCodec(() => PipelineStatusKind);
const __dyn_FindAssetById = definitionRuntime.dynCodec(() => FindAssetById);
const __dyn_OptionDuration = definitionRuntime.dynCodec(() => OptionDuration);
const __dyn_MintBox = definitionRuntime.dynCodec(() => MintBox);
const __dyn_MapStringEvaluatesToValue = definitionRuntime.dynCodec(() => MapStringEvaluatesToValue);
const __dyn_FilterOptRoleFilter = definitionRuntime.dynCodec(() => FilterOptRoleFilter);
const __dyn_FindDomainKeyValueByIdAndKey = definitionRuntime.dynCodec(() => FindDomainKeyValueByIdAndKey);
const __dyn_EvaluatesToAssetDefinitionId = definitionRuntime.dynCodec(() => EvaluatesToAssetDefinitionId);
const __dyn_VersionedRejectedTransaction = definitionRuntime.dynCodec(() => VersionedRejectedTransaction);
const __dyn_FindAllPeers = definitionRuntime.dynCodec(() => definitionRuntime.Void);
const __dyn_Parameter = definitionRuntime.dynCodec(() => Parameter);
const __dyn_CommitTimeout = definitionRuntime.dynCodec(() => CommitTimeout);
const __dyn_FindTriggersByDomainId = definitionRuntime.dynCodec(() => FindTriggersByDomainId);
const __dyn_Executable = definitionRuntime.dynCodec(() => Executable);
const __dyn_EvaluatesToRegistrableBox = definitionRuntime.dynCodec(() => EvaluatesToRegistrableBox);
const __dyn_PermissionToken = definitionRuntime.dynCodec(() => PermissionToken);
const __dyn_FindTransactionByHash = definitionRuntime.dynCodec(() => FindTransactionByHash);
const __dyn_AssetEvent = definitionRuntime.dynCodec(() => AssetEvent);
const __dyn_SequenceBox = definitionRuntime.dynCodec(() => SequenceBox);
const __dyn_FilterOptAssetDefinitionEventFilter = definitionRuntime.dynCodec(() => FilterOptAssetDefinitionEventFilter);
const __dyn_VecGenesisTransaction = definitionRuntime.dynCodec(() => VecGenesisTransaction);
const __dyn_MapNameValue = definitionRuntime.dynCodec(() => MapNameValue);
const __dyn_FilterOptAccountFilter = definitionRuntime.dynCodec(() => FilterOptAccountFilter);
const __dyn_ProofPayload = definitionRuntime.dynCodec(() => ProofPayload);
const __dyn_AssetId = definitionRuntime.dynCodec(() => AssetId);
const __dyn_DenialReason = definitionRuntime.dynCodec(() => DenialReason);
const __dyn_TransactionLimitError = definitionRuntime.dynCodec(() => TransactionLimitError);
const __dyn_IdFilterAssetDefinitionId = definitionRuntime.dynCodec(() => IdFilterAssetDefinitionId);
const __dyn_FixedPointI64 = definitionRuntime.dynCodec(() => FixedPointI64P9);
const __dyn_VecSignatureOfTransactionPayload = definitionRuntime.dynCodec(() => VecSignatureOfTransactionPayload);
const __dyn_FindAssetsByAssetDefinitionId = definitionRuntime.dynCodec(() => FindAssetsByAssetDefinitionId);
const __dyn_FilterOptIdFilterPeerId = definitionRuntime.dynCodec(() => FilterOptIdFilterPeerId);
const __dyn_FindAllAssets = definitionRuntime.dynCodec(() => definitionRuntime.Void);
const __dyn_Name = definitionRuntime.dynCodec(() => Name);
const __dyn_FindTriggerKeyValueByIdAndKey = definitionRuntime.dynCodec(() => FindTriggerKeyValueByIdAndKey);
const __dyn_FindAccountsWithAsset = definitionRuntime.dynCodec(() => FindAccountsWithAsset);
const __dyn_SignatureCheckCondition = definitionRuntime.dynCodec(() => SignatureCheckCondition);
const __dyn_VecSignatureOfValidBlock = definitionRuntime.dynCodec(() => VecSignatureOfValidBlock);
const __dyn_ValidatorType = definitionRuntime.dynCodec(() => ValidatorType);
const __dyn_HashOfVersionedTransaction = definitionRuntime.dynCodec(() => HashOfVersionedTransaction);
const __dyn_AccountEvent = definitionRuntime.dynCodec(() => AccountEvent);
const __dyn_NewAccount = definitionRuntime.dynCodec(() => NewAccount);
const __dyn_FilterOptIdFilterDomainId = definitionRuntime.dynCodec(() => FilterOptIdFilterDomainId);
const __dyn_FailBox = definitionRuntime.dynCodec(() => FailBox);
const __dyn_Account = definitionRuntime.dynCodec(() => Account);
const __dyn_FindRolesByAccountId = definitionRuntime.dynCodec(() => FindRolesByAccountId);
const __dyn_ContainsAny = definitionRuntime.dynCodec(() => ContainsAny);
const __dyn_RejectionReason = definitionRuntime.dynCodec(() => RejectionReason);
const __dyn_FilterOptAssetFilter = definitionRuntime.dynCodec(() => FilterOptAssetFilter);
const __dyn_TimeEvent = definitionRuntime.dynCodec(() => TimeEvent);
const __dyn_Instruction = definitionRuntime.dynCodec(() => Instruction);
const __dyn_FindAllBlocks = definitionRuntime.dynCodec(() => definitionRuntime.Void);
const __dyn_FindAllAccounts = definitionRuntime.dynCodec(() => definitionRuntime.Void);
const __dyn_Hash = definitionRuntime.dynCodec(() => Hash);
const __dyn_OptionIpfsPath = definitionRuntime.dynCodec(() => OptionIpfsPath);
const __dyn_FindAllActiveTriggerIds = definitionRuntime.dynCodec(() => definitionRuntime.Void);
const __dyn_DomainEventFilter = definitionRuntime.dynCodec(() => DomainEventFilter);
const __dyn_RoleFilter = definitionRuntime.dynCodec(() => RoleFilter);
const __dyn_OptionPipelineEntityKind = definitionRuntime.dynCodec(() => OptionPipelineEntityKind);
const __dyn_RawVersioned = definitionRuntime.dynCodec(() => RawVersioned);
const __dyn_TransactionRejectionReason = definitionRuntime.dynCodec(() => TransactionRejectionReason);
const __dyn_FindDomainById = definitionRuntime.dynCodec(() => FindDomainById);
const __dyn_AssetDefinitionEntry = definitionRuntime.dynCodec(() => AssetDefinitionEntry);
const __dyn_ExecuteTriggerEventFilter = definitionRuntime.dynCodec(() => ExecuteTriggerEventFilter);
const __dyn_AssetDefinitionEventFilter = definitionRuntime.dynCodec(() => AssetDefinitionEventFilter);
const __dyn_Topology = definitionRuntime.dynCodec(() => Topology);
const __dyn_GrantBox = definitionRuntime.dynCodec(() => GrantBox);
const __dyn_Metadata = definitionRuntime.dynCodec(() => Metadata);
const __dyn_MapPublicKeySignatureOfProof = definitionRuntime.dynCodec(() => MapPublicKeySignatureOfProof);
const __dyn_FindError = definitionRuntime.dynCodec(() => FindError);
const __dyn_ArrayU8L32 = definitionRuntime.dynCodec(() => ArrayU8L32);
const __dyn_UnregisterBox = definitionRuntime.dynCodec(() => UnregisterBox);
const __dyn_VecHashOfVersionedValidBlock = definitionRuntime.dynCodec(() => VecHashOfVersionedValidBlock);
const __dyn_FindPermissionTokensByAccountId = definitionRuntime.dynCodec(() => FindPermissionTokensByAccountId);
const __dyn_VersionError = definitionRuntime.dynCodec(() => VersionError);
const __dyn_IdFilterPeerId = definitionRuntime.dynCodec(() => IdFilterPeerId);
const __dyn_TransactionPayload = definitionRuntime.dynCodec(() => TransactionPayload);
const __dyn_FilterOptIdFilterAssetDefinitionId = definitionRuntime.dynCodec(() => FilterOptIdFilterAssetDefinitionId);
const __dyn_DataEvent = definitionRuntime.dynCodec(() => DataEvent);
const __dyn_VecProof = definitionRuntime.dynCodec(() => VecProof);
const __dyn_IdBox = definitionRuntime.dynCodec(() => IdBox);
const __dyn_PipelineEventFilter = definitionRuntime.dynCodec(() => PipelineEventFilter);
const __dyn_Asset = definitionRuntime.dynCodec(() => Asset);
const __dyn_TriggerFilter = definitionRuntime.dynCodec(() => TriggerFilter);
const __dyn_PeerEventFilter = definitionRuntime.dynCodec(() => PeerEventFilter);
const __dyn_RoleId = definitionRuntime.dynCodec(() => RoleId);
const __dyn_Value = definitionRuntime.dynCodec(() => Value);
const __dyn_ValidBlock = definitionRuntime.dynCodec(() => ValidBlock);
const __dyn_FindTriggerById = definitionRuntime.dynCodec(() => FindTriggerById);
const __dyn_CommittedBlock = definitionRuntime.dynCodec(() => CommittedBlock);
const __dyn_VecPeerId = definitionRuntime.dynCodec(() => VecPeerId);
const __dyn_IfInstruction = definitionRuntime.dynCodec(() => IfInstruction);
const __dyn_MapAssetDefinitionIdAssetDefinitionEntry = definitionRuntime.dynCodec(() => MapAssetDefinitionIdAssetDefinitionEntry);
const __dyn_EvaluatesToVecValue = definitionRuntime.dynCodec(() => EvaluatesToVecValue);
const __dyn_BlockSubscriberMessage = definitionRuntime.dynCodec(() => BlockSubscriberMessage);
const __dyn_WasmExecutionFail = definitionRuntime.dynCodec(() => WasmExecutionFail);
const __dyn_SignaturesOfProof = definitionRuntime.dynCodec(() => SignaturesOfProof);
const __dyn_FindAssetsByDomainId = definitionRuntime.dynCodec(() => FindAssetsByDomainId);
const __dyn_IdFilterDomainId = definitionRuntime.dynCodec(() => IdFilterDomainId);
const __dyn_TimeInterval = definitionRuntime.dynCodec(() => TimeInterval);
const __dyn_FilterOptDomainEventFilter = definitionRuntime.dynCodec(() => FilterOptDomainEventFilter);
const __dyn_EvaluatesToAccountId = definitionRuntime.dynCodec(() => EvaluatesToAccountId);
const __dyn_TriggerId = definitionRuntime.dynCodec(() => TriggerId);
const __dyn_TransactionValue = definitionRuntime.dynCodec(() => TransactionValue);
const __dyn_Not = definitionRuntime.dynCodec(() => Not);
const __dyn_FilterBox = definitionRuntime.dynCodec(() => FilterBox);
const __dyn_PredicateBox = definitionRuntime.dynCodec(() => PredicateBox);
const __dyn_FindAssetQuantityById = definitionRuntime.dynCodec(() => FindAssetQuantityById);
const __dyn_PipelineStatus = definitionRuntime.dynCodec(() => PipelineStatus);
const __dyn_Duration = definitionRuntime.dynCodec(() => Duration);
const __dyn_HashOfMerkleTreeVersionedTransaction = definitionRuntime.dynCodec(() => HashOfMerkleTreeVersionedTransaction);
const __dyn_EvaluatesToDomainId = definitionRuntime.dynCodec(() => EvaluatesToDomainId);
const __dyn_Equal = definitionRuntime.dynCodec(() => Equal);
const __dyn_Subtract = definitionRuntime.dynCodec(() => Subtract);
const __dyn_Fixed = definitionRuntime.dynCodec(() => Fixed);
const __dyn_FindAccountsByDomainId = definitionRuntime.dynCodec(() => FindAccountsByDomainId);
const __dyn_IdFilterAccountId = definitionRuntime.dynCodec(() => IdFilterAccountId);
const __dyn_FindAssetsByAccountId = definitionRuntime.dynCodec(() => FindAssetsByAccountId);
const __dyn_FilterOptTriggerEventFilter = definitionRuntime.dynCodec(() => FilterOptTriggerEventFilter);
const __dyn_BlockCreationTimeout = definitionRuntime.dynCodec(() => definitionRuntime.Void);
const __dyn_FilterOptPeerFilter = definitionRuntime.dynCodec(() => FilterOptPeerFilter);
const __dyn_FindAllAssetsDefinitions = definitionRuntime.dynCodec(() => definitionRuntime.Void);
const __dyn_SignatureOfQueryPayload = definitionRuntime.dynCodec(() => SignatureOfQueryPayload);
const __dyn_SignatureOfProof = definitionRuntime.dynCodec(() => SignatureOfProof);
const __dyn_FilterOptPeerEventFilter = definitionRuntime.dynCodec(() => FilterOptPeerEventFilter);
const __dyn_FindAllRoles = definitionRuntime.dynCodec(() => definitionRuntime.Void);
const __dyn_SemiIntervalU128 = definitionRuntime.dynCodec(() => SemiIntervalU128);
const __dyn_RemoveKeyValueBox = definitionRuntime.dynCodec(() => RemoveKeyValueBox);
const __dyn_FilterOptTriggerFilter = definitionRuntime.dynCodec(() => FilterOptTriggerFilter);
const __dyn_IdentifiableBox = definitionRuntime.dynCodec(() => IdentifiableBox);
const __dyn_IfExpression = definitionRuntime.dynCodec(() => IfExpression);
const __dyn_DomainEvent = definitionRuntime.dynCodec(() => DomainEvent);
const __dyn_GenesisTransaction = definitionRuntime.dynCodec(() => GenesisTransaction);
const __dyn_Role = definitionRuntime.dynCodec(() => Role);
const __dyn_FilterOptEntityFilter = definitionRuntime.dynCodec(() => FilterOptEntityFilter);
const __dyn_NewRole = definitionRuntime.dynCodec(() => NewRole);
const __dyn_FindAssetDefinitionKeyValueByIdAndKey = definitionRuntime.dynCodec(() => FindAssetDefinitionKeyValueByIdAndKey);
const __dyn_PublicKey = definitionRuntime.dynCodec(() => PublicKey);
const __dyn_VecPermissionToken = definitionRuntime.dynCodec(() => VecPermissionToken);
const __dyn_EvaluatesToAssetId = definitionRuntime.dynCodec(() => EvaluatesToAssetId);
const __dyn_AssetDefinitionEvent = definitionRuntime.dynCodec(() => AssetDefinitionEvent);
const __dyn_BlockHeaderValue = definitionRuntime.dynCodec(() => BlockHeaderValue);
const __dyn_SetKeyValueBox = definitionRuntime.dynCodec(() => SetKeyValueBox);
const __dyn_FilterOptDomainFilter = definitionRuntime.dynCodec(() => FilterOptDomainFilter);
const __dyn_Predicate = definitionRuntime.dynCodec(() => Predicate);
const __dyn_WasmSmartContract = definitionRuntime.dynCodec(() => WasmSmartContract);
const __dyn_And = definitionRuntime.dynCodec(() => And);
const __dyn_ValueOfKey = definitionRuntime.dynCodec(() => ValueOfKey);
const __dyn_FindRoleByRoleId = definitionRuntime.dynCodec(() => FindRoleByRoleId);
const __dyn_ExecuteTriggerEvent = definitionRuntime.dynCodec(() => ExecuteTriggerEvent);
const __dyn_IdFilterAssetId = definitionRuntime.dynCodec(() => IdFilterAssetId);
const __dyn_Signature = definitionRuntime.dynCodec(() => Signature);
const __dyn_BlockPublisherMessage = definitionRuntime.dynCodec(() => BlockPublisherMessage);
const __dyn_PipelineEvent = definitionRuntime.dynCodec(() => PipelineEvent);
const __dyn_Repeats = definitionRuntime.dynCodec(() => Repeats);
const __dyn_PaginatedQueryResult = definitionRuntime.dynCodec(() => PaginatedQueryResult);
const __dyn_PeerEvent = definitionRuntime.dynCodec(() => PeerEvent);
const __dyn_Expression = definitionRuntime.dynCodec(() => Expression);
const __dyn_Divide = definitionRuntime.dynCodec(() => Divide);
const __dyn_OptionInstruction = definitionRuntime.dynCodec(() => OptionInstruction);
const __dyn_FindAssetsByDomainIdAndAssetDefinitionId = definitionRuntime.dynCodec(() => FindAssetsByDomainIdAndAssetDefinitionId);
const __dyn_Less = definitionRuntime.dynCodec(() => Less);
const __dyn_PipelineEntityKind = definitionRuntime.dynCodec(() => PipelineEntityKind);
const __dyn_IpfsPath = definitionRuntime.dynCodec(() => IpfsPath);
const __dyn_VersionedValidTransaction = definitionRuntime.dynCodec(() => VersionedValidTransaction);
const __dyn_FindAllRoleIds = definitionRuntime.dynCodec(() => definitionRuntime.Void);
const __dyn_VecInstruction = definitionRuntime.dynCodec(() => VecInstruction);
const __dyn_BlockHeader = definitionRuntime.dynCodec(() => BlockHeader);
const __dyn_TriggerEventFilter = definitionRuntime.dynCodec(() => TriggerEventFilter);
const __dyn_UnsatisfiedSignatureConditionFail = definitionRuntime.dynCodec(() => UnsatisfiedSignatureConditionFail);
const __dyn_FilterOptIdFilterAccountId = definitionRuntime.dynCodec(() => FilterOptIdFilterAccountId);
const __dyn_Event = definitionRuntime.dynCodec(() => Event);
const __dyn_Pair = definitionRuntime.dynCodec(() => Pair);
const __dyn_PeerFilter = definitionRuntime.dynCodec(() => PeerFilter);
const __dyn_Pagination = definitionRuntime.dynCodec(() => Pagination);
const __dyn_Greater = definitionRuntime.dynCodec(() => Greater);
const __dyn_TriggerFilterBox = definitionRuntime.dynCodec(() => TriggerFilterBox);
const __dyn_EvaluatesToIdBox = definitionRuntime.dynCodec(() => EvaluatesToIdBox);
const __dyn_EntityFilter = definitionRuntime.dynCodec(() => EntityFilter);
const __dyn_AssetDefinitionFilter = definitionRuntime.dynCodec(() => AssetDefinitionFilter);
const __dyn_AssetValueType = definitionRuntime.dynCodec(() => AssetValueType);
const __dyn_NoTransactionReceiptReceived = definitionRuntime.dynCodec(() => definitionRuntime.Void);
const __dyn_RoleEventFilter = definitionRuntime.dynCodec(() => RoleEventFilter);
const __dyn_FindAssetDefinitionById = definitionRuntime.dynCodec(() => FindAssetDefinitionById);
const __dyn_Mintable = definitionRuntime.dynCodec(() => Mintable);
const __dyn_BurnBox = definitionRuntime.dynCodec(() => BurnBox);
const __dyn_DomainFilter = definitionRuntime.dynCodec(() => DomainFilter);
const __dyn_EvaluatesToValue = definitionRuntime.dynCodec(() => EvaluatesToValue);
const __dyn_VecVersionedRejectedTransaction = definitionRuntime.dynCodec(() => VecVersionedRejectedTransaction);
const __dyn_OptionPipelineStatusKind = definitionRuntime.dynCodec(() => OptionPipelineStatusKind);
const __dyn_Range = definitionRuntime.dynCodec(() => Range);
const __dyn_ActionFilterBox = definitionRuntime.dynCodec(() => ActionFilterBox);
const __dyn_PeerId = definitionRuntime.dynCodec(() => PeerId);
const __dyn_VecValue = definitionRuntime.dynCodec(() => VecValue);
const __dyn_FindAllTransactions = definitionRuntime.dynCodec(() => definitionRuntime.Void);
const __dyn_FilterOptIdFilterAssetId = definitionRuntime.dynCodec(() => FilterOptIdFilterAssetId);
const __dyn_FilterOptAssetEventFilter = definitionRuntime.dynCodec(() => FilterOptAssetEventFilter);
const __dyn_ProofChain = definitionRuntime.dynCodec(() => ProofChain);
const __dyn_AssetDefinitionId = definitionRuntime.dynCodec(() => AssetDefinitionId);
const __dyn_FindAssetsByName = definitionRuntime.dynCodec(() => FindAssetsByName);
const __dyn_EvaluatesToTriggerId = definitionRuntime.dynCodec(() => EvaluatesToTriggerId);
const __dyn_MismatchValidatorType = definitionRuntime.dynCodec(() => MismatchValidatorType);
const __dyn_Transaction = definitionRuntime.dynCodec(() => Transaction);
const __dyn_AtIndex = definitionRuntime.dynCodec(() => AtIndex);
const __dyn_HashOfProof = definitionRuntime.dynCodec(() => HashOfProof);
const __dyn_OptionU32 = definitionRuntime.dynCodec(() => OptionU32);
const __dyn_DomainId = definitionRuntime.dynCodec(() => DomainId);
const __dyn_Contains = definitionRuntime.dynCodec(() => Contains);
const __dyn_EvaluatesToU32 = definitionRuntime.dynCodec(() => EvaluatesToU32);
const __dyn_FilterOptIdFilterRoleId = definitionRuntime.dynCodec(() => FilterOptIdFilterRoleId);
const __dyn_EvaluatesToBool = definitionRuntime.dynCodec(() => EvaluatesToBool);
const __dyn_SignatureOfTransactionPayload = definitionRuntime.dynCodec(() => SignatureOfTransactionPayload);
const Account = definitionRuntime.createStructCodec('Account', [
    ['id', __dyn_AccountId],
    ['assets', __dyn_MapAssetIdAsset],
    ['signatories', __dyn_VecPublicKey],
    ['permission_tokens', __dyn_VecPermissionToken],
    ['signature_check_condition', __dyn_SignatureCheckCondition],
    ['metadata', __dyn_Metadata],
    ['roles', __dyn_VecRoleId]
]);
const AccountEvent = definitionRuntime.createEnumCodec('AccountEvent', [
    [0, 'Asset', __dyn_AssetEvent],
    [1, 'Created', __dyn_AccountId],
    [2, 'Deleted', __dyn_AccountId],
    [3, 'AuthenticationAdded', __dyn_AccountId],
    [4, 'AuthenticationRemoved', __dyn_AccountId],
    [5, 'PermissionAdded', __dyn_AccountId],
    [6, 'PermissionRemoved', __dyn_AccountId],
    [7, 'RoleRevoked', __dyn_AccountId],
    [8, 'RoleGranted', __dyn_AccountId],
    [9, 'MetadataInserted', __dyn_AccountId],
    [10, 'MetadataRemoved', __dyn_AccountId]
]);
const AccountEventFilter = definitionRuntime.createEnumCodec('AccountEventFilter', [
    [0, 'ByAsset', __dyn_FilterOptAssetFilter],
    [1, 'ByCreated'],
    [2, 'ByDeleted'],
    [3, 'ByAuthenticationAdded'],
    [4, 'ByAuthenticationRemoved'],
    [5, 'ByPermissionAdded'],
    [6, 'ByPermissionRemoved'],
    [7, 'ByRoleRevoked'],
    [8, 'ByRoleGranted'],
    [9, 'ByMetadataInserted'],
    [10, 'ByMetadataRemoved']
]);
const AccountFilter = definitionRuntime.createStructCodec('AccountFilter', [
    ['id_filter', __dyn_FilterOptIdFilterAccountId],
    ['event_filter', __dyn_FilterOptAccountEventFilter]
]);
const AccountId = definitionRuntime.createStructCodec('AccountId', [
    ['name', __dyn_Name],
    ['domain_id', __dyn_DomainId]
]);
const ActionFilterBox = definitionRuntime.createStructCodec('ActionFilterBox', [
    ['executable', __dyn_Executable],
    ['repeats', __dyn_Repeats],
    ['technical_account', __dyn_AccountId],
    ['filter', __dyn_FilterBox],
    ['metadata', __dyn_Metadata]
]);
const Add = definitionRuntime.createStructCodec('Add', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const And = definitionRuntime.createStructCodec('And', [
    ['left', __dyn_EvaluatesToBool],
    ['right', __dyn_EvaluatesToBool]
]);
const ArrayU8L32 = definitionRuntime.createArrayU8Codec('ArrayU8L32', 32);
const Asset = definitionRuntime.createStructCodec('Asset', [
    ['id', __dyn_AssetId],
    ['value', __dyn_AssetValue]
]);
const AssetDefinition = definitionRuntime.createStructCodec('AssetDefinition', [
    ['id', __dyn_AssetDefinitionId],
    ['value_type', __dyn_AssetValueType],
    ['mintable', __dyn_Mintable],
    ['metadata', __dyn_Metadata]
]);
const AssetDefinitionEntry = definitionRuntime.createStructCodec('AssetDefinitionEntry', [
    ['definition', __dyn_AssetDefinition],
    ['registered_by', __dyn_AccountId]
]);
const AssetDefinitionEvent = definitionRuntime.createEnumCodec('AssetDefinitionEvent', [
    [0, 'Created', __dyn_AssetDefinitionId],
    [1, 'MintabilityChanged', __dyn_AssetDefinitionId],
    [2, 'Deleted', __dyn_AssetDefinitionId],
    [3, 'MetadataInserted', __dyn_AssetDefinitionId],
    [4, 'MetadataRemoved', __dyn_AssetDefinitionId]
]);
const AssetDefinitionEventFilter = definitionRuntime.createEnumCodec('AssetDefinitionEventFilter', [
    [0, 'ByCreated'],
    [1, 'ByDeleted'],
    [2, 'ByMintabilityChanged'],
    [3, 'ByMetadataInserted'],
    [4, 'ByMetadataRemoved']
]);
const AssetDefinitionFilter = definitionRuntime.createStructCodec('AssetDefinitionFilter', [
    ['id_filter', __dyn_FilterOptIdFilterAssetDefinitionId],
    ['event_filter', __dyn_FilterOptAssetDefinitionEventFilter]
]);
const AssetDefinitionId = definitionRuntime.createStructCodec('AssetDefinitionId', [
    ['name', __dyn_Name],
    ['domain_id', __dyn_DomainId]
]);
const AssetEvent = definitionRuntime.createEnumCodec('AssetEvent', [
    [0, 'Created', __dyn_AssetId],
    [1, 'Deleted', __dyn_AssetId],
    [2, 'Added', __dyn_AssetId],
    [3, 'Removed', __dyn_AssetId],
    [4, 'MetadataInserted', __dyn_AssetId],
    [5, 'MetadataRemoved', __dyn_AssetId]
]);
const AssetEventFilter = definitionRuntime.createEnumCodec('AssetEventFilter', [
    [0, 'ByCreated'],
    [1, 'ByDeleted'],
    [2, 'ByAdded'],
    [3, 'ByRemoved'],
    [4, 'ByMetadataInserted'],
    [5, 'ByMetadataRemoved']
]);
const AssetFilter = definitionRuntime.createStructCodec('AssetFilter', [
    ['id_filter', __dyn_FilterOptIdFilterAssetId],
    ['event_filter', __dyn_FilterOptAssetEventFilter]
]);
const AssetId = definitionRuntime.createStructCodec('AssetId', [
    ['definition_id', __dyn_AssetDefinitionId],
    ['account_id', __dyn_AccountId]
]);
const AssetValue = definitionRuntime.createEnumCodec('AssetValue', [
    [0, 'Quantity', definitionRuntime.U32],
    [1, 'BigQuantity', definitionRuntime.U128],
    [2, 'Fixed', __dyn_Fixed],
    [3, 'Store', __dyn_Metadata]
]);
const AssetValueType = definitionRuntime.createEnumCodec('AssetValueType', [
    [0, 'Quantity'],
    [1, 'BigQuantity'],
    [2, 'Fixed'],
    [3, 'Store']
]);
const AtIndex = definitionRuntime.createStructCodec('AtIndex', [
    ['index', definitionRuntime.U32],
    ['predicate', __dyn_Predicate]
]);
const BlockHeader = definitionRuntime.createStructCodec('BlockHeader', [
    ['timestamp', definitionRuntime.U128],
    ['consensus_estimation', definitionRuntime.U64],
    ['height', definitionRuntime.U64],
    ['previous_block_hash', __dyn_HashOfVersionedCommittedBlock],
    ['transactions_hash', __dyn_HashOfMerkleTreeVersionedTransaction],
    ['rejected_transactions_hash', __dyn_HashOfMerkleTreeVersionedTransaction],
    ['view_change_proofs', __dyn_ProofChain],
    ['invalidated_blocks_hashes', __dyn_VecHashOfVersionedValidBlock],
    ['genesis_topology', __dyn_OptionTopology]
]);
const BlockHeaderValue = definitionRuntime.createStructCodec('BlockHeaderValue', [
    ['timestamp', definitionRuntime.U128],
    ['height', definitionRuntime.U64],
    ['previous_block_hash', __dyn_Hash],
    ['transactions_hash', __dyn_HashOfMerkleTreeVersionedTransaction],
    ['rejected_transactions_hash', __dyn_HashOfMerkleTreeVersionedTransaction],
    ['invalidated_blocks_hashes', __dyn_VecHash],
    ['current_block_hash', __dyn_Hash]
]);
const BlockPublisherMessage = definitionRuntime.createEnumCodec('BlockPublisherMessage', [
    [0, 'SubscriptionAccepted'],
    [1, 'Block', __dyn_VersionedCommittedBlock]
]);
const BlockRejectionReason = definitionRuntime.createEnumCodec('BlockRejectionReason', [
    [0, 'ConsensusBlockRejection']
]);
const BlockSubscriberMessage = definitionRuntime.createEnumCodec('BlockSubscriberMessage', [
    [0, 'SubscriptionRequest', definitionRuntime.U64],
    [1, 'BlockReceived']
]);
const BlockValue = definitionRuntime.createStructCodec('BlockValue', [
    ['header', __dyn_BlockHeaderValue],
    ['transactions', __dyn_VecVersionedValidTransaction],
    ['rejected_transactions', __dyn_VecVersionedRejectedTransaction],
    ['event_recommendations', __dyn_VecEvent]
]);
const BurnBox = definitionRuntime.createStructCodec('BurnBox', [
    ['object', __dyn_EvaluatesToValue],
    ['destination_id', __dyn_EvaluatesToIdBox]
]);
const CommitTimeout = definitionRuntime.createStructCodec('CommitTimeout', [
    ['hash', __dyn_HashOfVersionedValidBlock]
]);
const CommittedBlock = definitionRuntime.createStructCodec('CommittedBlock', [
    ['header', __dyn_BlockHeader],
    ['rejected_transactions', __dyn_VecVersionedRejectedTransaction],
    ['transactions', __dyn_VecVersionedValidTransaction],
    ['event_recommendations', __dyn_VecEvent],
    ['signatures', __dyn_SignaturesOfCommittedBlock]
]);
const Container = definitionRuntime.createEnumCodec('Container', [
    [0, 'Any', __dyn_Predicate],
    [1, 'All', __dyn_Predicate],
    [2, 'AtIndex', __dyn_AtIndex],
    [3, 'ValueOfKey', __dyn_ValueOfKey],
    [4, 'HasKey', __dyn_Name]
]);
const Contains = definitionRuntime.createStructCodec('Contains', [
    ['collection', __dyn_EvaluatesToVecValue],
    ['element', __dyn_EvaluatesToValue]
]);
const ContainsAll = definitionRuntime.createStructCodec('ContainsAll', [
    ['collection', __dyn_EvaluatesToVecValue],
    ['elements', __dyn_EvaluatesToVecValue]
]);
const ContainsAny = definitionRuntime.createStructCodec('ContainsAny', [
    ['collection', __dyn_EvaluatesToVecValue],
    ['elements', __dyn_EvaluatesToVecValue]
]);
const ContextValue = definitionRuntime.createStructCodec('ContextValue', [
    ['value_name', definitionRuntime.Str]
]);
const DataEvent = definitionRuntime.createEnumCodec('DataEvent', [
    [0, 'Peer', __dyn_PeerEvent],
    [1, 'Domain', __dyn_DomainEvent],
    [2, 'Account', __dyn_AccountEvent],
    [3, 'AssetDefinition', __dyn_AssetDefinitionEvent],
    [4, 'Asset', __dyn_AssetEvent],
    [5, 'Trigger', __dyn_TriggerEvent],
    [6, 'Role', __dyn_RoleEvent]
]);
const DenialReason = definitionRuntime.createEnumCodec('DenialReason', [
    [0, 'ValidatorTypeMismatch', __dyn_MismatchValidatorType],
    [1, 'Custom', definitionRuntime.Str],
    [2, 'NoValidatorsProvided']
]);
const Divide = definitionRuntime.createStructCodec('Divide', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const Domain = definitionRuntime.createStructCodec('Domain', [
    ['id', __dyn_DomainId],
    ['accounts', __dyn_MapAccountIdAccount],
    ['asset_definitions', __dyn_MapAssetDefinitionIdAssetDefinitionEntry],
    ['logo', __dyn_OptionIpfsPath],
    ['metadata', __dyn_Metadata]
]);
const DomainEvent = definitionRuntime.createEnumCodec('DomainEvent', [
    [0, 'Account', __dyn_AccountEvent],
    [1, 'AssetDefinition', __dyn_AssetDefinitionEvent],
    [2, 'Created', __dyn_DomainId],
    [3, 'Deleted', __dyn_DomainId],
    [4, 'MetadataInserted', __dyn_DomainId],
    [5, 'MetadataRemoved', __dyn_DomainId]
]);
const DomainEventFilter = definitionRuntime.createEnumCodec('DomainEventFilter', [
    [0, 'ByAccount', __dyn_FilterOptAccountFilter],
    [1, 'ByAssetDefinition', __dyn_FilterOptAssetDefinitionFilter],
    [2, 'ByCreated'],
    [3, 'ByDeleted'],
    [4, 'ByMetadataInserted'],
    [5, 'ByMetadataRemoved']
]);
const DomainFilter = definitionRuntime.createStructCodec('DomainFilter', [
    ['id_filter', __dyn_FilterOptIdFilterDomainId],
    ['event_filter', __dyn_FilterOptDomainEventFilter]
]);
const DomainId = definitionRuntime.createStructCodec('DomainId', [
    ['name', __dyn_Name]
]);
const Duration = definitionRuntime.createTupleCodec('Duration', [definitionRuntime.U64, definitionRuntime.U32]);
const EntityFilter = definitionRuntime.createEnumCodec('EntityFilter', [
    [0, 'ByPeer', __dyn_FilterOptPeerFilter],
    [1, 'ByDomain', __dyn_FilterOptDomainFilter],
    [2, 'ByAccount', __dyn_FilterOptAccountFilter],
    [3, 'ByAssetDefinition', __dyn_FilterOptAssetDefinitionFilter],
    [4, 'ByAsset', __dyn_FilterOptAssetFilter],
    [5, 'ByTrigger', __dyn_FilterOptTriggerFilter],
    [6, 'ByRole', __dyn_FilterOptRoleFilter]
]);
const Equal = definitionRuntime.createStructCodec('Equal', [
    ['left', __dyn_EvaluatesToValue],
    ['right', __dyn_EvaluatesToValue]
]);
const EvaluatesToAccountId = definitionRuntime.createStructCodec('EvaluatesToAccountId', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToAssetDefinitionId = definitionRuntime.createStructCodec('EvaluatesToAssetDefinitionId', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToAssetId = definitionRuntime.createStructCodec('EvaluatesToAssetId', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToBool = definitionRuntime.createStructCodec('EvaluatesToBool', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToDomainId = definitionRuntime.createStructCodec('EvaluatesToDomainId', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToHash = definitionRuntime.createStructCodec('EvaluatesToHash', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToIdBox = definitionRuntime.createStructCodec('EvaluatesToIdBox', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToName = definitionRuntime.createStructCodec('EvaluatesToName', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToRegistrableBox = definitionRuntime.createStructCodec('EvaluatesToRegistrableBox', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToRoleId = definitionRuntime.createStructCodec('EvaluatesToRoleId', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToTriggerId = definitionRuntime.createStructCodec('EvaluatesToTriggerId', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToU32 = definitionRuntime.createStructCodec('EvaluatesToU32', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToValue = definitionRuntime.createStructCodec('EvaluatesToValue', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToVecValue = definitionRuntime.createStructCodec('EvaluatesToVecValue', [
    ['expression', __dyn_Expression]
]);
const Event = definitionRuntime.createEnumCodec('Event', [
    [0, 'Pipeline', __dyn_PipelineEvent],
    [1, 'Data', __dyn_DataEvent],
    [2, 'Time', __dyn_TimeEvent],
    [3, 'ExecuteTrigger', __dyn_ExecuteTriggerEvent]
]);
const EventPublisherMessage = definitionRuntime.createEnumCodec('EventPublisherMessage', [
    [0, 'SubscriptionAccepted'],
    [1, 'Event', __dyn_Event]
]);
const EventSubscriberMessage = definitionRuntime.createEnumCodec('EventSubscriberMessage', [
    [0, 'SubscriptionRequest', __dyn_FilterBox],
    [1, 'EventReceived']
]);
const Executable = definitionRuntime.createEnumCodec('Executable', [
    [0, 'Instructions', __dyn_VecInstruction],
    [1, 'Wasm', __dyn_WasmSmartContract]
]);
const ExecuteTriggerBox = definitionRuntime.createStructCodec('ExecuteTriggerBox', [
    ['trigger_id', __dyn_TriggerId]
]);
const ExecuteTriggerEvent = definitionRuntime.createStructCodec('ExecuteTriggerEvent', [
    ['trigger_id', __dyn_TriggerId],
    ['authority', __dyn_AccountId]
]);
const ExecuteTriggerEventFilter = definitionRuntime.createStructCodec('ExecuteTriggerEventFilter', [
    ['trigger_id', __dyn_TriggerId],
    ['authority', __dyn_AccountId]
]);
const ExecutionTime = definitionRuntime.createEnumCodec('ExecutionTime', [
    [0, 'PreCommit'],
    [1, 'Schedule', __dyn_TimeSchedule]
]);
const Expression = definitionRuntime.createEnumCodec('Expression', [
    [0, 'Add', __dyn_Add],
    [1, 'Subtract', __dyn_Subtract],
    [2, 'Multiply', __dyn_Multiply],
    [3, 'Divide', __dyn_Divide],
    [4, 'Mod', __dyn_Mod],
    [5, 'RaiseTo', __dyn_RaiseTo],
    [6, 'Greater', __dyn_Greater],
    [7, 'Less', __dyn_Less],
    [8, 'Equal', __dyn_Equal],
    [9, 'Not', __dyn_Not],
    [10, 'And', __dyn_And],
    [11, 'Or', __dyn_Or],
    [12, 'If', __dyn_IfExpression],
    [13, 'Raw', __dyn_Value],
    [14, 'Query', __dyn_QueryBox],
    [15, 'Contains', __dyn_Contains],
    [16, 'ContainsAll', __dyn_ContainsAll],
    [17, 'ContainsAny', __dyn_ContainsAny],
    [18, 'Where', __dyn_Where],
    [19, 'ContextValue', __dyn_ContextValue]
]);
const FailBox = definitionRuntime.createStructCodec('FailBox', [
    ['message', definitionRuntime.Str]
]);
const FilterBox = definitionRuntime.createEnumCodec('FilterBox', [
    [0, 'Pipeline', __dyn_PipelineEventFilter],
    [1, 'Data', __dyn_FilterOptEntityFilter],
    [2, 'Time', __dyn_TimeEventFilter],
    [3, 'ExecuteTrigger', __dyn_ExecuteTriggerEventFilter]
]);
const FilterOptAccountEventFilter = definitionRuntime.createEnumCodec('FilterOptAccountEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_AccountEventFilter]
]);
const FilterOptAccountFilter = definitionRuntime.createEnumCodec('FilterOptAccountFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_AccountFilter]
]);
const FilterOptAssetDefinitionEventFilter = definitionRuntime.createEnumCodec('FilterOptAssetDefinitionEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_AssetDefinitionEventFilter]
]);
const FilterOptAssetDefinitionFilter = definitionRuntime.createEnumCodec('FilterOptAssetDefinitionFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_AssetDefinitionFilter]
]);
const FilterOptAssetEventFilter = definitionRuntime.createEnumCodec('FilterOptAssetEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_AssetEventFilter]
]);
const FilterOptAssetFilter = definitionRuntime.createEnumCodec('FilterOptAssetFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_AssetFilter]
]);
const FilterOptDomainEventFilter = definitionRuntime.createEnumCodec('FilterOptDomainEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_DomainEventFilter]
]);
const FilterOptDomainFilter = definitionRuntime.createEnumCodec('FilterOptDomainFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_DomainFilter]
]);
const FilterOptEntityFilter = definitionRuntime.createEnumCodec('FilterOptEntityFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_EntityFilter]
]);
const FilterOptIdFilterAccountId = definitionRuntime.createEnumCodec('FilterOptIdFilterAccountId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterAccountId]
]);
const FilterOptIdFilterAssetDefinitionId = definitionRuntime.createEnumCodec('FilterOptIdFilterAssetDefinitionId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterAssetDefinitionId]
]);
const FilterOptIdFilterAssetId = definitionRuntime.createEnumCodec('FilterOptIdFilterAssetId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterAssetId]
]);
const FilterOptIdFilterDomainId = definitionRuntime.createEnumCodec('FilterOptIdFilterDomainId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterDomainId]
]);
const FilterOptIdFilterPeerId = definitionRuntime.createEnumCodec('FilterOptIdFilterPeerId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterPeerId]
]);
const FilterOptIdFilterRoleId = definitionRuntime.createEnumCodec('FilterOptIdFilterRoleId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterRoleId]
]);
const FilterOptIdFilterTriggerId = definitionRuntime.createEnumCodec('FilterOptIdFilterTriggerId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterTriggerId]
]);
const FilterOptPeerEventFilter = definitionRuntime.createEnumCodec('FilterOptPeerEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_PeerEventFilter]
]);
const FilterOptPeerFilter = definitionRuntime.createEnumCodec('FilterOptPeerFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_PeerFilter]
]);
const FilterOptRoleEventFilter = definitionRuntime.createEnumCodec('FilterOptRoleEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_RoleEventFilter]
]);
const FilterOptRoleFilter = definitionRuntime.createEnumCodec('FilterOptRoleFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_RoleFilter]
]);
const FilterOptTriggerEventFilter = definitionRuntime.createEnumCodec('FilterOptTriggerEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_TriggerEventFilter]
]);
const FilterOptTriggerFilter = definitionRuntime.createEnumCodec('FilterOptTriggerFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_TriggerFilter]
]);
const FindAccountById = definitionRuntime.createStructCodec('FindAccountById', [
    ['id', __dyn_EvaluatesToAccountId]
]);
const FindAccountKeyValueByIdAndKey = definitionRuntime.createStructCodec('FindAccountKeyValueByIdAndKey', [
    ['id', __dyn_EvaluatesToAccountId],
    ['key', __dyn_EvaluatesToName]
]);
const FindAccountsByDomainId = definitionRuntime.createStructCodec('FindAccountsByDomainId', [
    ['domain_id', __dyn_EvaluatesToDomainId]
]);
const FindAccountsByName = definitionRuntime.createStructCodec('FindAccountsByName', [
    ['name', __dyn_EvaluatesToName]
]);
const FindAccountsWithAsset = definitionRuntime.createStructCodec('FindAccountsWithAsset', [
    ['asset_definition_id', __dyn_EvaluatesToAssetDefinitionId]
]);
const FindAssetById = definitionRuntime.createStructCodec('FindAssetById', [
    ['id', __dyn_EvaluatesToAssetId]
]);
const FindAssetDefinitionById = definitionRuntime.createStructCodec('FindAssetDefinitionById', [
    ['id', __dyn_EvaluatesToAssetDefinitionId]
]);
const FindAssetDefinitionKeyValueByIdAndKey = definitionRuntime.createStructCodec('FindAssetDefinitionKeyValueByIdAndKey', [
    ['id', __dyn_EvaluatesToAssetDefinitionId],
    ['key', __dyn_EvaluatesToName]
]);
const FindAssetKeyValueByIdAndKey = definitionRuntime.createStructCodec('FindAssetKeyValueByIdAndKey', [
    ['id', __dyn_EvaluatesToAssetId],
    ['key', __dyn_EvaluatesToName]
]);
const FindAssetQuantityById = definitionRuntime.createStructCodec('FindAssetQuantityById', [
    ['id', __dyn_EvaluatesToAssetId]
]);
const FindAssetsByAccountId = definitionRuntime.createStructCodec('FindAssetsByAccountId', [
    ['account_id', __dyn_EvaluatesToAccountId]
]);
const FindAssetsByAssetDefinitionId = definitionRuntime.createStructCodec('FindAssetsByAssetDefinitionId', [
    ['asset_definition_id', __dyn_EvaluatesToAssetDefinitionId]
]);
const FindAssetsByDomainId = definitionRuntime.createStructCodec('FindAssetsByDomainId', [
    ['domain_id', __dyn_EvaluatesToDomainId]
]);
const FindAssetsByDomainIdAndAssetDefinitionId = definitionRuntime.createStructCodec('FindAssetsByDomainIdAndAssetDefinitionId', [
    ['domain_id', __dyn_EvaluatesToDomainId],
    ['asset_definition_id', __dyn_EvaluatesToAssetDefinitionId]
]);
const FindAssetsByName = definitionRuntime.createStructCodec('FindAssetsByName', [
    ['name', __dyn_EvaluatesToName]
]);
const FindDomainById = definitionRuntime.createStructCodec('FindDomainById', [
    ['id', __dyn_EvaluatesToDomainId]
]);
const FindDomainKeyValueByIdAndKey = definitionRuntime.createStructCodec('FindDomainKeyValueByIdAndKey', [
    ['id', __dyn_EvaluatesToDomainId],
    ['key', __dyn_EvaluatesToName]
]);
const FindError = definitionRuntime.createEnumCodec('FindError', [
    [0, 'Asset', __dyn_AssetId],
    [1, 'AssetDefinition', __dyn_AssetDefinitionId],
    [2, 'Account', __dyn_AccountId],
    [3, 'Domain', __dyn_DomainId],
    [4, 'MetadataKey', __dyn_Name],
    [5, 'Block', __dyn_HashOfVersionedCommittedBlock],
    [6, 'Transaction', __dyn_HashOfVersionedTransaction],
    [7, 'Context', definitionRuntime.Str],
    [8, 'Peer', __dyn_PeerId],
    [9, 'Trigger', __dyn_TriggerId],
    [10, 'Role', __dyn_RoleId]
]);
const FindPermissionTokensByAccountId = definitionRuntime.createStructCodec('FindPermissionTokensByAccountId', [
    ['id', __dyn_EvaluatesToAccountId]
]);
const FindRoleByRoleId = definitionRuntime.createStructCodec('FindRoleByRoleId', [
    ['id', __dyn_EvaluatesToRoleId]
]);
const FindRolesByAccountId = definitionRuntime.createStructCodec('FindRolesByAccountId', [
    ['id', __dyn_EvaluatesToAccountId]
]);
const FindTransactionByHash = definitionRuntime.createStructCodec('FindTransactionByHash', [
    ['hash', __dyn_EvaluatesToHash]
]);
const FindTransactionsByAccountId = definitionRuntime.createStructCodec('FindTransactionsByAccountId', [
    ['account_id', __dyn_EvaluatesToAccountId]
]);
const FindTriggerById = definitionRuntime.createStructCodec('FindTriggerById', [
    ['id', __dyn_EvaluatesToTriggerId]
]);
const FindTriggerKeyValueByIdAndKey = definitionRuntime.createStructCodec('FindTriggerKeyValueByIdAndKey', [
    ['id', __dyn_EvaluatesToTriggerId],
    ['key', __dyn_EvaluatesToName]
]);
const FindTriggersByDomainId = definitionRuntime.createStructCodec('FindTriggersByDomainId', [
    ['domain_id', __dyn_EvaluatesToDomainId]
]);
const Fixed = __dyn_FixedPointI64;
const GenesisTransaction = definitionRuntime.createStructCodec('GenesisTransaction', [
    ['isi', __dyn_VecInstruction]
]);
const GrantBox = definitionRuntime.createStructCodec('GrantBox', [
    ['object', __dyn_EvaluatesToValue],
    ['destination_id', __dyn_EvaluatesToIdBox]
]);
const Greater = definitionRuntime.createStructCodec('Greater', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const Hash = __dyn_ArrayU8L32;
const HashOfMerkleTreeVersionedTransaction = __dyn_Hash;
const HashOfProof = __dyn_Hash;
const HashOfVersionedCommittedBlock = __dyn_Hash;
const HashOfVersionedTransaction = __dyn_Hash;
const HashOfVersionedValidBlock = __dyn_Hash;
const IdBox = definitionRuntime.createEnumCodec('IdBox', [
    [0, 'DomainId', __dyn_DomainId],
    [1, 'AccountId', __dyn_AccountId],
    [2, 'AssetDefinitionId', __dyn_AssetDefinitionId],
    [3, 'AssetId', __dyn_AssetId],
    [4, 'PeerId', __dyn_PeerId],
    [5, 'TriggerId', __dyn_TriggerId],
    [6, 'RoleId', __dyn_RoleId]
]);
const IdFilterAccountId = __dyn_AccountId;
const IdFilterAssetDefinitionId = __dyn_AssetDefinitionId;
const IdFilterAssetId = __dyn_AssetId;
const IdFilterDomainId = __dyn_DomainId;
const IdFilterPeerId = __dyn_PeerId;
const IdFilterRoleId = __dyn_RoleId;
const IdFilterTriggerId = __dyn_TriggerId;
const IdentifiableBox = definitionRuntime.createEnumCodec('IdentifiableBox', [
    [0, 'NewDomain', __dyn_NewDomain],
    [1, 'NewAccount', __dyn_NewAccount],
    [2, 'NewAssetDefinition', __dyn_NewAssetDefinition],
    [3, 'NewRole', __dyn_NewRole],
    [4, 'Peer', __dyn_Peer],
    [5, 'Domain', __dyn_Domain],
    [6, 'Account', __dyn_Account],
    [7, 'AssetDefinition', __dyn_AssetDefinition],
    [8, 'Asset', __dyn_Asset],
    [9, 'Trigger', __dyn_TriggerFilterBox],
    [10, 'Role', __dyn_Role]
]);
const IfExpression = definitionRuntime.createStructCodec('IfExpression', [
    ['condition', __dyn_EvaluatesToBool],
    ['then_expression', __dyn_EvaluatesToValue],
    ['else_expression', __dyn_EvaluatesToValue]
]);
const IfInstruction = definitionRuntime.createStructCodec('IfInstruction', [
    ['condition', __dyn_EvaluatesToBool],
    ['then', __dyn_Instruction],
    ['otherwise', __dyn_OptionInstruction]
]);
const Instruction = definitionRuntime.createEnumCodec('Instruction', [
    [0, 'Register', __dyn_RegisterBox],
    [1, 'Unregister', __dyn_UnregisterBox],
    [2, 'Mint', __dyn_MintBox],
    [3, 'Burn', __dyn_BurnBox],
    [4, 'Transfer', __dyn_TransferBox],
    [5, 'If', __dyn_IfInstruction],
    [6, 'Pair', __dyn_Pair],
    [7, 'Sequence', __dyn_SequenceBox],
    [8, 'Fail', __dyn_FailBox],
    [9, 'SetKeyValue', __dyn_SetKeyValueBox],
    [10, 'RemoveKeyValue', __dyn_RemoveKeyValueBox],
    [11, 'Grant', __dyn_GrantBox],
    [12, 'Revoke', __dyn_RevokeBox],
    [13, 'ExecuteTrigger', __dyn_ExecuteTriggerBox]
]);
const InstructionExecutionFail = definitionRuntime.createStructCodec('InstructionExecutionFail', [
    ['instruction', __dyn_Instruction],
    ['reason', definitionRuntime.Str]
]);
const IpfsPath = definitionRuntime.Str;
const Less = definitionRuntime.createStructCodec('Less', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const MapAccountIdAccount = definitionRuntime.createMapCodec('MapAccountIdAccount', __dyn_AccountId, __dyn_Account);
const MapAssetDefinitionIdAssetDefinitionEntry = definitionRuntime.createMapCodec('MapAssetDefinitionIdAssetDefinitionEntry', __dyn_AssetDefinitionId, __dyn_AssetDefinitionEntry);
const MapAssetIdAsset = definitionRuntime.createMapCodec('MapAssetIdAsset', __dyn_AssetId, __dyn_Asset);
const MapNameValue = definitionRuntime.createMapCodec('MapNameValue', __dyn_Name, __dyn_Value);
const MapPublicKeySignatureOfCommittedBlock = definitionRuntime.createMapCodec('MapPublicKeySignatureOfCommittedBlock', __dyn_PublicKey, __dyn_SignatureOfCommittedBlock);
const MapPublicKeySignatureOfProof = definitionRuntime.createMapCodec('MapPublicKeySignatureOfProof', __dyn_PublicKey, __dyn_SignatureOfProof);
const MapPublicKeySignatureOfTransactionPayload = definitionRuntime.createMapCodec('MapPublicKeySignatureOfTransactionPayload', __dyn_PublicKey, __dyn_SignatureOfTransactionPayload);
const MapStringEvaluatesToValue = definitionRuntime.createMapCodec('MapStringEvaluatesToValue', definitionRuntime.Str, __dyn_EvaluatesToValue);
const MerkleTreeVersionedTransaction = definitionRuntime.createVecCodec('MerkleTreeVersionedTransaction', __dyn_HashOfVersionedTransaction);
const Metadata = definitionRuntime.createStructCodec('Metadata', [
    ['map', __dyn_MapNameValue]
]);
const MintBox = definitionRuntime.createStructCodec('MintBox', [
    ['object', __dyn_EvaluatesToValue],
    ['destination_id', __dyn_EvaluatesToIdBox]
]);
const Mintable = definitionRuntime.createEnumCodec('Mintable', [
    [0, 'Infinitely'],
    [1, 'Once'],
    [2, 'Not']
]);
const MismatchValidatorType = definitionRuntime.createStructCodec('MismatchValidatorType', [
    ['expected', __dyn_ValidatorType],
    ['actual', __dyn_ValidatorType]
]);
const Mod = definitionRuntime.createStructCodec('Mod', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const Multiply = definitionRuntime.createStructCodec('Multiply', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const Name = definitionRuntime.Str;
const NewAccount = definitionRuntime.createStructCodec('NewAccount', [
    ['id', __dyn_AccountId],
    ['signatories', __dyn_VecPublicKey],
    ['metadata', __dyn_Metadata]
]);
const NewAssetDefinition = definitionRuntime.createStructCodec('NewAssetDefinition', [
    ['id', __dyn_AssetDefinitionId],
    ['value_type', __dyn_AssetValueType],
    ['mintable', __dyn_Mintable],
    ['metadata', __dyn_Metadata]
]);
const NewDomain = definitionRuntime.createStructCodec('NewDomain', [
    ['id', __dyn_DomainId],
    ['logo', __dyn_OptionIpfsPath],
    ['metadata', __dyn_Metadata]
]);
const NewRole = definitionRuntime.createStructCodec('NewRole', [
    ['inner', __dyn_Role]
]);
const Not = definitionRuntime.createStructCodec('Not', [
    ['expression', __dyn_EvaluatesToBool]
]);
const NotPermittedFail = definitionRuntime.createStructCodec('NotPermittedFail', [
    ['reason', definitionRuntime.Str]
]);
const OptionDuration = definitionRuntime.createOptionCodec('OptionDuration', __dyn_Duration);
const OptionHash = definitionRuntime.createOptionCodec('OptionHash', __dyn_Hash);
const OptionInstruction = definitionRuntime.createOptionCodec('OptionInstruction', __dyn_Instruction);
const OptionIpfsPath = definitionRuntime.createOptionCodec('OptionIpfsPath', __dyn_IpfsPath);
const OptionPipelineEntityKind = definitionRuntime.createOptionCodec('OptionPipelineEntityKind', __dyn_PipelineEntityKind);
const OptionPipelineStatusKind = definitionRuntime.createOptionCodec('OptionPipelineStatusKind', __dyn_PipelineStatusKind);
const OptionTimeInterval = definitionRuntime.createOptionCodec('OptionTimeInterval', __dyn_TimeInterval);
const OptionTopology = definitionRuntime.createOptionCodec('OptionTopology', __dyn_Topology);
const OptionU32 = definitionRuntime.createOptionCodec('OptionU32', definitionRuntime.U32);
const Or = definitionRuntime.createStructCodec('Or', [
    ['left', __dyn_EvaluatesToBool],
    ['right', __dyn_EvaluatesToBool]
]);
const PaginatedQueryResult = definitionRuntime.createStructCodec('PaginatedQueryResult', [
    ['result', __dyn_QueryResult],
    ['filter', __dyn_PredicateBox],
    ['pagination', __dyn_Pagination],
    ['total', definitionRuntime.U64]
]);
const Pagination = definitionRuntime.createStructCodec('Pagination', [
    ['start', __dyn_OptionU32],
    ['limit', __dyn_OptionU32]
]);
const Pair = definitionRuntime.createStructCodec('Pair', [
    ['left_instruction', __dyn_Instruction],
    ['right_instruction', __dyn_Instruction]
]);
const Parameter = definitionRuntime.createEnumCodec('Parameter', [
    [0, 'MaximumFaultyPeersAmount', definitionRuntime.U32],
    [1, 'BlockTime', definitionRuntime.U128],
    [2, 'CommitTime', definitionRuntime.U128],
    [3, 'TransactionReceiptTime', definitionRuntime.U128]
]);
const Peer = definitionRuntime.createStructCodec('Peer', [
    ['id', __dyn_PeerId]
]);
const PeerEvent = definitionRuntime.createEnumCodec('PeerEvent', [
    [0, 'Added', __dyn_PeerId],
    [1, 'Removed', __dyn_PeerId]
]);
const PeerEventFilter = definitionRuntime.createEnumCodec('PeerEventFilter', [
    [0, 'ByAdded'],
    [1, 'ByRemoved']
]);
const PeerFilter = definitionRuntime.createStructCodec('PeerFilter', [
    ['id_filter', __dyn_FilterOptIdFilterPeerId],
    ['event_filter', __dyn_FilterOptPeerEventFilter]
]);
const PeerId = definitionRuntime.createStructCodec('PeerId', [
    ['address', definitionRuntime.Str],
    ['public_key', __dyn_PublicKey]
]);
const PermissionToken = definitionRuntime.createStructCodec('PermissionToken', [
    ['name', __dyn_Name],
    ['params', __dyn_MapNameValue]
]);
const PipelineEntityKind = definitionRuntime.createEnumCodec('PipelineEntityKind', [
    [0, 'Block'],
    [1, 'Transaction']
]);
const PipelineEvent = definitionRuntime.createStructCodec('PipelineEvent', [
    ['entity_kind', __dyn_PipelineEntityKind],
    ['status', __dyn_PipelineStatus],
    ['hash', __dyn_Hash]
]);
const PipelineEventFilter = definitionRuntime.createStructCodec('PipelineEventFilter', [
    ['entity_kind', __dyn_OptionPipelineEntityKind],
    ['status_kind', __dyn_OptionPipelineStatusKind],
    ['hash', __dyn_OptionHash]
]);
const PipelineStatus = definitionRuntime.createEnumCodec('PipelineStatus', [
    [0, 'Validating'],
    [1, 'Rejected', __dyn_RejectionReason],
    [2, 'Committed']
]);
const PipelineStatusKind = definitionRuntime.createEnumCodec('PipelineStatusKind', [
    [0, 'Validating'],
    [1, 'Rejected'],
    [2, 'Committed']
]);
const Predicate = definitionRuntime.createEnumCodec('Predicate', [
    [0, 'Identifiable', __dyn_Predicate],
    [1, 'Container', __dyn_Container],
    [2, 'Display', __dyn_Predicate],
    [3, 'Numerical', __dyn_Range],
    [4, 'TimeStamp', __dyn_SemiIntervalU128],
    [5, 'Pass']
]);
const PredicateBox = definitionRuntime.createEnumCodec('PredicateBox', [
    [0, 'And', __dyn_VecPredicateBox],
    [1, 'Or', __dyn_VecPredicateBox],
    [2, 'Not', __dyn_PredicateBox],
    [3, 'Raw', __dyn_Predicate]
]);
const Proof = definitionRuntime.createStructCodec('Proof', [
    ['payload', __dyn_ProofPayload],
    ['signatures', __dyn_SignaturesOfProof]
]);
const ProofChain = definitionRuntime.createStructCodec('ProofChain', [
    ['proofs', __dyn_VecProof]
]);
const ProofPayload = definitionRuntime.createStructCodec('ProofPayload', [
    ['previous_proof', __dyn_HashOfProof],
    ['latest_block', __dyn_HashOfVersionedCommittedBlock],
    ['reason', __dyn_Reason]
]);
const PublicKey = definitionRuntime.createStructCodec('PublicKey', [
    ['digest_function', definitionRuntime.Str],
    ['payload', definitionRuntime.VecU8]
]);
const QueryBox = definitionRuntime.createEnumCodec('QueryBox', [
    [0, 'FindAllAccounts', __dyn_FindAllAccounts],
    [1, 'FindAccountById', __dyn_FindAccountById],
    [2, 'FindAccountKeyValueByIdAndKey', __dyn_FindAccountKeyValueByIdAndKey],
    [3, 'FindAccountsByName', __dyn_FindAccountsByName],
    [4, 'FindAccountsByDomainId', __dyn_FindAccountsByDomainId],
    [5, 'FindAccountsWithAsset', __dyn_FindAccountsWithAsset],
    [6, 'FindAllAssets', __dyn_FindAllAssets],
    [7, 'FindAllAssetsDefinitions', __dyn_FindAllAssetsDefinitions],
    [8, 'FindAssetById', __dyn_FindAssetById],
    [9, 'FindAssetDefinitionById', __dyn_FindAssetDefinitionById],
    [10, 'FindAssetsByName', __dyn_FindAssetsByName],
    [11, 'FindAssetsByAccountId', __dyn_FindAssetsByAccountId],
    [12, 'FindAssetsByAssetDefinitionId', __dyn_FindAssetsByAssetDefinitionId],
    [13, 'FindAssetsByDomainId', __dyn_FindAssetsByDomainId],
    [14, 'FindAssetsByDomainIdAndAssetDefinitionId', __dyn_FindAssetsByDomainIdAndAssetDefinitionId],
    [15, 'FindAssetQuantityById', __dyn_FindAssetQuantityById],
    [16, 'FindAssetKeyValueByIdAndKey', __dyn_FindAssetKeyValueByIdAndKey],
    [17, 'FindAssetDefinitionKeyValueByIdAndKey', __dyn_FindAssetDefinitionKeyValueByIdAndKey],
    [18, 'FindAllDomains', __dyn_FindAllDomains],
    [19, 'FindDomainById', __dyn_FindDomainById],
    [20, 'FindDomainKeyValueByIdAndKey', __dyn_FindDomainKeyValueByIdAndKey],
    [21, 'FindAllPeers', __dyn_FindAllPeers],
    [22, 'FindAllBlocks', __dyn_FindAllBlocks],
    [23, 'FindAllTransactions', __dyn_FindAllTransactions],
    [24, 'FindTransactionsByAccountId', __dyn_FindTransactionsByAccountId],
    [25, 'FindTransactionByHash', __dyn_FindTransactionByHash],
    [26, 'FindPermissionTokensByAccountId', __dyn_FindPermissionTokensByAccountId],
    [27, 'FindAllActiveTriggerIds', __dyn_FindAllActiveTriggerIds],
    [28, 'FindTriggerById', __dyn_FindTriggerById],
    [29, 'FindTriggerKeyValueByIdAndKey', __dyn_FindTriggerKeyValueByIdAndKey],
    [30, 'FindTriggersByDomainId', __dyn_FindTriggersByDomainId],
    [31, 'FindAllRoles', __dyn_FindAllRoles],
    [32, 'FindAllRoleIds', __dyn_FindAllRoleIds],
    [33, 'FindRoleByRoleId', __dyn_FindRoleByRoleId],
    [34, 'FindRolesByAccountId', __dyn_FindRolesByAccountId]
]);
const QueryError = definitionRuntime.createEnumCodec('QueryError', [
    [0, 'Decode', __dyn_VersionError],
    [1, 'Signature', definitionRuntime.Str],
    [2, 'Permission', __dyn_DenialReason],
    [3, 'Evaluate', definitionRuntime.Str],
    [4, 'Find', __dyn_FindError],
    [5, 'Conversion', definitionRuntime.Str]
]);
const QueryPayload = definitionRuntime.createStructCodec('QueryPayload', [
    ['timestamp_ms', definitionRuntime.Compact],
    ['query', __dyn_QueryBox],
    ['account_id', __dyn_AccountId],
    ['filter', __dyn_PredicateBox]
]);
const QueryResult = __dyn_Value;
const RaiseTo = definitionRuntime.createStructCodec('RaiseTo', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const Range = definitionRuntime.createEnumCodec('Range', [
    [0, 'U32', __dyn_SemiIntervalU32],
    [1, 'U128', __dyn_SemiIntervalU128],
    [2, 'Fixed', __dyn_SemiIntervalFixed]
]);
const RawGenesisBlock = definitionRuntime.createStructCodec('RawGenesisBlock', [
    ['transactions', __dyn_VecGenesisTransaction]
]);
const RawVersioned = definitionRuntime.createEnumCodec('RawVersioned', [
    [0, 'Json', definitionRuntime.Str],
    [1, 'ScaleBytes', definitionRuntime.VecU8]
]);
const Reason = definitionRuntime.createEnumCodec('Reason', [
    [0, 'CommitTimeout', __dyn_CommitTimeout],
    [1, 'NoTransactionReceiptReceived', __dyn_NoTransactionReceiptReceived],
    [2, 'BlockCreationTimeout', __dyn_BlockCreationTimeout]
]);
const RegisterBox = definitionRuntime.createStructCodec('RegisterBox', [
    ['object', __dyn_EvaluatesToRegistrableBox]
]);
const RegistrableBox = definitionRuntime.createEnumCodec('RegistrableBox', [
    [0, 'Peer', __dyn_Peer],
    [1, 'Domain', __dyn_NewDomain],
    [2, 'Account', __dyn_NewAccount],
    [3, 'AssetDefinition', __dyn_NewAssetDefinition],
    [4, 'Asset', __dyn_Asset],
    [5, 'Trigger', __dyn_TriggerFilterBox],
    [6, 'Role', __dyn_NewRole]
]);
const RejectedTransaction = definitionRuntime.createStructCodec('RejectedTransaction', [
    ['payload', __dyn_TransactionPayload],
    ['signatures', __dyn_SignaturesOfTransactionPayload],
    ['rejection_reason', __dyn_TransactionRejectionReason]
]);
const RejectionReason = definitionRuntime.createEnumCodec('RejectionReason', [
    [0, 'Block', __dyn_BlockRejectionReason],
    [1, 'Transaction', __dyn_TransactionRejectionReason]
]);
const RemoveKeyValueBox = definitionRuntime.createStructCodec('RemoveKeyValueBox', [
    ['object_id', __dyn_EvaluatesToIdBox],
    ['key', __dyn_EvaluatesToName]
]);
const Repeats = definitionRuntime.createEnumCodec('Repeats', [
    [0, 'Indefinitely'],
    [1, 'Exactly', definitionRuntime.U32]
]);
const RevokeBox = definitionRuntime.createStructCodec('RevokeBox', [
    ['object', __dyn_EvaluatesToValue],
    ['destination_id', __dyn_EvaluatesToIdBox]
]);
const Role = definitionRuntime.createStructCodec('Role', [
    ['id', __dyn_RoleId],
    ['permissions', __dyn_VecPermissionToken]
]);
const RoleEvent = definitionRuntime.createEnumCodec('RoleEvent', [
    [0, 'Created', __dyn_RoleId],
    [1, 'Deleted', __dyn_RoleId]
]);
const RoleEventFilter = definitionRuntime.createEnumCodec('RoleEventFilter', [
    [0, 'ByCreated'],
    [1, 'ByDeleted']
]);
const RoleFilter = definitionRuntime.createStructCodec('RoleFilter', [
    ['id_filter', __dyn_FilterOptIdFilterRoleId],
    ['event_filter', __dyn_FilterOptRoleEventFilter]
]);
const RoleId = definitionRuntime.createStructCodec('RoleId', [
    ['name', __dyn_Name]
]);
const SemiIntervalFixed = definitionRuntime.createStructCodec('SemiIntervalFixed', [
    ['start', __dyn_Fixed],
    ['limit', __dyn_Fixed]
]);
const SemiIntervalU128 = definitionRuntime.createStructCodec('SemiIntervalU128', [
    ['start', definitionRuntime.U128],
    ['limit', definitionRuntime.U128]
]);
const SemiIntervalU32 = definitionRuntime.createStructCodec('SemiIntervalU32', [
    ['start', definitionRuntime.U32],
    ['limit', definitionRuntime.U32]
]);
const SequenceBox = definitionRuntime.createStructCodec('SequenceBox', [
    ['instructions', __dyn_VecInstruction]
]);
const SetKeyValueBox = definitionRuntime.createStructCodec('SetKeyValueBox', [
    ['object_id', __dyn_EvaluatesToIdBox],
    ['key', __dyn_EvaluatesToName],
    ['value', __dyn_EvaluatesToValue]
]);
const Signature = definitionRuntime.createStructCodec('Signature', [
    ['public_key', __dyn_PublicKey],
    ['payload', definitionRuntime.VecU8]
]);
const SignatureCheckCondition = __dyn_EvaluatesToBool;
const SignatureOfCommittedBlock = __dyn_Signature;
const SignatureOfProof = __dyn_Signature;
const SignatureOfQueryPayload = __dyn_Signature;
const SignatureOfTransactionPayload = __dyn_Signature;
const SignatureOfValidBlock = __dyn_Signature;
const SignaturesOfCommittedBlock = definitionRuntime.createStructCodec('SignaturesOfCommittedBlock', [
    ['signatures', __dyn_MapPublicKeySignatureOfCommittedBlock]
]);
const SignaturesOfProof = definitionRuntime.createStructCodec('SignaturesOfProof', [
    ['signatures', __dyn_MapPublicKeySignatureOfProof]
]);
const SignaturesOfTransactionPayload = definitionRuntime.createStructCodec('SignaturesOfTransactionPayload', [
    ['signatures', __dyn_MapPublicKeySignatureOfTransactionPayload]
]);
const SignedQueryRequest = definitionRuntime.createStructCodec('SignedQueryRequest', [
    ['payload', __dyn_QueryPayload],
    ['signature', __dyn_SignatureOfQueryPayload]
]);
const Subtract = definitionRuntime.createStructCodec('Subtract', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const TimeEvent = definitionRuntime.createStructCodec('TimeEvent', [
    ['prev_interval', __dyn_OptionTimeInterval],
    ['interval', __dyn_TimeInterval]
]);
const TimeEventFilter = __dyn_ExecutionTime;
const TimeInterval = definitionRuntime.createStructCodec('TimeInterval', [
    ['since', __dyn_Duration],
    ['length', __dyn_Duration]
]);
const TimeSchedule = definitionRuntime.createStructCodec('TimeSchedule', [
    ['start', __dyn_Duration],
    ['period', __dyn_OptionDuration]
]);
const Topology = definitionRuntime.createStructCodec('Topology', [
    ['sorted_peers', __dyn_VecPeerId],
    ['at_block', __dyn_HashOfVersionedCommittedBlock],
    ['view_change_proofs', __dyn_ProofChain]
]);
const Transaction = definitionRuntime.createStructCodec('Transaction', [
    ['payload', __dyn_TransactionPayload],
    ['signatures', __dyn_VecSignatureOfTransactionPayload]
]);
const TransactionLimitError = definitionRuntime.Str;
const TransactionPayload = definitionRuntime.createStructCodec('TransactionPayload', [
    ['account_id', __dyn_AccountId],
    ['instructions', __dyn_Executable],
    ['creation_time', definitionRuntime.U64],
    ['time_to_live_ms', definitionRuntime.U64],
    ['nonce', __dyn_OptionU32],
    ['metadata', __dyn_MapNameValue]
]);
const TransactionRejectionReason = definitionRuntime.createEnumCodec('TransactionRejectionReason', [
    [0, 'NotPermitted', __dyn_NotPermittedFail],
    [1, 'UnsatisfiedSignatureCondition', __dyn_UnsatisfiedSignatureConditionFail],
    [2, 'LimitCheck', __dyn_TransactionLimitError],
    [3, 'InstructionExecution', __dyn_InstructionExecutionFail],
    [4, 'WasmExecution', __dyn_WasmExecutionFail],
    [5, 'UnexpectedGenesisAccountSignature']
]);
const TransactionValue = definitionRuntime.createEnumCodec('TransactionValue', [
    [0, 'Transaction', __dyn_VersionedTransaction],
    [1, 'RejectedTransaction', __dyn_VersionedRejectedTransaction]
]);
const TransferBox = definitionRuntime.createStructCodec('TransferBox', [
    ['source_id', __dyn_EvaluatesToIdBox],
    ['object', __dyn_EvaluatesToValue],
    ['destination_id', __dyn_EvaluatesToIdBox]
]);
const TriggerEvent = definitionRuntime.createEnumCodec('TriggerEvent', [
    [0, 'Created', __dyn_TriggerId],
    [1, 'Deleted', __dyn_TriggerId],
    [2, 'Extended', __dyn_TriggerId],
    [3, 'Shortened', __dyn_TriggerId]
]);
const TriggerEventFilter = definitionRuntime.createEnumCodec('TriggerEventFilter', [
    [0, 'ByCreated'],
    [1, 'ByDeleted'],
    [2, 'ByExtended'],
    [3, 'ByShortened']
]);
const TriggerFilter = definitionRuntime.createStructCodec('TriggerFilter', [
    ['id_filter', __dyn_FilterOptIdFilterTriggerId],
    ['event_filter', __dyn_FilterOptTriggerEventFilter]
]);
const TriggerFilterBox = definitionRuntime.createStructCodec('TriggerFilterBox', [
    ['id', __dyn_TriggerId],
    ['action', __dyn_ActionFilterBox]
]);
const TriggerId = definitionRuntime.createStructCodec('TriggerId', [
    ['name', __dyn_Name]
]);
const UnregisterBox = definitionRuntime.createStructCodec('UnregisterBox', [
    ['object_id', __dyn_EvaluatesToIdBox]
]);
const UnsatisfiedSignatureConditionFail = definitionRuntime.createStructCodec('UnsatisfiedSignatureConditionFail', [
    ['reason', definitionRuntime.Str]
]);
const UnsupportedVersion = definitionRuntime.createStructCodec('UnsupportedVersion', [
    ['version', definitionRuntime.U8],
    ['raw', __dyn_RawVersioned]
]);
const ValidBlock = definitionRuntime.createStructCodec('ValidBlock', [
    ['header', __dyn_BlockHeader],
    ['rejected_transactions', __dyn_VecVersionedRejectedTransaction],
    ['transactions', __dyn_VecVersionedValidTransaction],
    ['signatures', __dyn_VecSignatureOfValidBlock],
    ['event_recommendations', __dyn_VecEvent]
]);
const ValidTransaction = definitionRuntime.createStructCodec('ValidTransaction', [
    ['payload', __dyn_TransactionPayload],
    ['signatures', __dyn_SignaturesOfTransactionPayload]
]);
const ValidatorType = definitionRuntime.createEnumCodec('ValidatorType', [
    [0, 'Instruction'],
    [1, 'Query'],
    [2, 'Expression']
]);
const Value = definitionRuntime.createEnumCodec('Value', [
    [0, 'U32', definitionRuntime.U32],
    [1, 'U128', definitionRuntime.U128],
    [2, 'Bool', definitionRuntime.Bool],
    [3, 'String', definitionRuntime.Str],
    [4, 'Name', __dyn_Name],
    [5, 'Fixed', __dyn_Fixed],
    [6, 'Vec', __dyn_VecValue],
    [7, 'LimitedMetadata', __dyn_Metadata],
    [8, 'Id', __dyn_IdBox],
    [9, 'Identifiable', __dyn_IdentifiableBox],
    [10, 'PublicKey', __dyn_PublicKey],
    [11, 'Parameter', __dyn_Parameter],
    [12, 'SignatureCheckCondition', __dyn_SignatureCheckCondition],
    [13, 'TransactionValue', __dyn_TransactionValue],
    [14, 'PermissionToken', __dyn_PermissionToken],
    [15, 'Hash', __dyn_Hash],
    [16, 'Block', __dyn_BlockValue]
]);
const ValueOfKey = definitionRuntime.createStructCodec('ValueOfKey', [
    ['key', __dyn_Name],
    ['predicate', __dyn_Predicate]
]);
const VecEvent = definitionRuntime.createVecCodec('VecEvent', __dyn_Event);
const VecGenesisTransaction = definitionRuntime.createVecCodec('VecGenesisTransaction', __dyn_GenesisTransaction);
const VecHash = definitionRuntime.createVecCodec('VecHash', __dyn_Hash);
const VecHashOfVersionedValidBlock = definitionRuntime.createVecCodec('VecHashOfVersionedValidBlock', __dyn_HashOfVersionedValidBlock);
const VecInstruction = definitionRuntime.createVecCodec('VecInstruction', __dyn_Instruction);
const VecPeerId = definitionRuntime.createVecCodec('VecPeerId', __dyn_PeerId);
const VecPermissionToken = definitionRuntime.createVecCodec('VecPermissionToken', __dyn_PermissionToken);
const VecPredicateBox = definitionRuntime.createVecCodec('VecPredicateBox', __dyn_PredicateBox);
const VecProof = definitionRuntime.createVecCodec('VecProof', __dyn_Proof);
const VecPublicKey = definitionRuntime.createVecCodec('VecPublicKey', __dyn_PublicKey);
const VecRoleId = definitionRuntime.createVecCodec('VecRoleId', __dyn_RoleId);
const VecSignatureOfTransactionPayload = definitionRuntime.createVecCodec('VecSignatureOfTransactionPayload', __dyn_SignatureOfTransactionPayload);
const VecSignatureOfValidBlock = definitionRuntime.createVecCodec('VecSignatureOfValidBlock', __dyn_SignatureOfValidBlock);
const VecValue = definitionRuntime.createVecCodec('VecValue', __dyn_Value);
const VecVersionedRejectedTransaction = definitionRuntime.createVecCodec('VecVersionedRejectedTransaction', __dyn_VersionedRejectedTransaction);
const VecVersionedValidTransaction = definitionRuntime.createVecCodec('VecVersionedValidTransaction', __dyn_VersionedValidTransaction);
const VersionError = definitionRuntime.createEnumCodec('VersionError', [
    [0, 'NotVersioned'],
    [1, 'UnsupportedJsonEncode'],
    [2, 'ExpectedJson'],
    [3, 'UnsupportedScaleEncode'],
    [4, 'Serde'],
    [5, 'ParityScale'],
    [6, 'ParseInt'],
    [7, 'UnsupportedVersion', __dyn_UnsupportedVersion],
    [8, 'ExtraBytesLeft', definitionRuntime.U64]
]);
const VersionedBlockPublisherMessage = definitionRuntime.createEnumCodec('VersionedBlockPublisherMessage', [
    [1, 'V1', __dyn_BlockPublisherMessage]
]);
const VersionedBlockSubscriberMessage = definitionRuntime.createEnumCodec('VersionedBlockSubscriberMessage', [
    [1, 'V1', __dyn_BlockSubscriberMessage]
]);
const VersionedCommittedBlock = definitionRuntime.createEnumCodec('VersionedCommittedBlock', [
    [1, 'V1', __dyn_CommittedBlock]
]);
const VersionedEventPublisherMessage = definitionRuntime.createEnumCodec('VersionedEventPublisherMessage', [
    [1, 'V1', __dyn_EventPublisherMessage]
]);
const VersionedEventSubscriberMessage = definitionRuntime.createEnumCodec('VersionedEventSubscriberMessage', [
    [1, 'V1', __dyn_EventSubscriberMessage]
]);
const VersionedPaginatedQueryResult = definitionRuntime.createEnumCodec('VersionedPaginatedQueryResult', [
    [1, 'V1', __dyn_PaginatedQueryResult]
]);
const VersionedRejectedTransaction = definitionRuntime.createEnumCodec('VersionedRejectedTransaction', [
    [1, 'V1', __dyn_RejectedTransaction]
]);
const VersionedSignedQueryRequest = definitionRuntime.createEnumCodec('VersionedSignedQueryRequest', [
    [1, 'V1', __dyn_SignedQueryRequest]
]);
const VersionedTransaction = definitionRuntime.createEnumCodec('VersionedTransaction', [
    [1, 'V1', __dyn_Transaction]
]);
const VersionedValidBlock = definitionRuntime.createEnumCodec('VersionedValidBlock', [
    [1, 'V1', __dyn_ValidBlock]
]);
const VersionedValidTransaction = definitionRuntime.createEnumCodec('VersionedValidTransaction', [
    [1, 'V1', __dyn_ValidTransaction]
]);
const WasmExecutionFail = definitionRuntime.createStructCodec('WasmExecutionFail', [
    ['reason', definitionRuntime.Str]
]);
const WasmSmartContract = definitionRuntime.createStructCodec('WasmSmartContract', [
    ['raw_data', definitionRuntime.VecU8]
]);
const Where = definitionRuntime.createStructCodec('Where', [
    ['expression', __dyn_EvaluatesToValue],
    ['values', __dyn_MapStringEvaluatesToValue]
]);

Object.defineProperty(exports, 'BlockCreationTimeout', {
    enumerable: true,
    get: function () { return definitionRuntime.Void; }
});
Object.defineProperty(exports, 'FindAllAccounts', {
    enumerable: true,
    get: function () { return definitionRuntime.Void; }
});
Object.defineProperty(exports, 'FindAllActiveTriggerIds', {
    enumerable: true,
    get: function () { return definitionRuntime.Void; }
});
Object.defineProperty(exports, 'FindAllAssets', {
    enumerable: true,
    get: function () { return definitionRuntime.Void; }
});
Object.defineProperty(exports, 'FindAllAssetsDefinitions', {
    enumerable: true,
    get: function () { return definitionRuntime.Void; }
});
Object.defineProperty(exports, 'FindAllBlocks', {
    enumerable: true,
    get: function () { return definitionRuntime.Void; }
});
Object.defineProperty(exports, 'FindAllDomains', {
    enumerable: true,
    get: function () { return definitionRuntime.Void; }
});
Object.defineProperty(exports, 'FindAllPeers', {
    enumerable: true,
    get: function () { return definitionRuntime.Void; }
});
Object.defineProperty(exports, 'FindAllRoleIds', {
    enumerable: true,
    get: function () { return definitionRuntime.Void; }
});
Object.defineProperty(exports, 'FindAllRoles', {
    enumerable: true,
    get: function () { return definitionRuntime.Void; }
});
Object.defineProperty(exports, 'FindAllTransactions', {
    enumerable: true,
    get: function () { return definitionRuntime.Void; }
});
Object.defineProperty(exports, 'NoTransactionReceiptReceived', {
    enumerable: true,
    get: function () { return definitionRuntime.Void; }
});
exports.Account = Account;
exports.AccountEvent = AccountEvent;
exports.AccountEventFilter = AccountEventFilter;
exports.AccountFilter = AccountFilter;
exports.AccountId = AccountId;
exports.ActionFilterBox = ActionFilterBox;
exports.Add = Add;
exports.And = And;
exports.ArrayU8L32 = ArrayU8L32;
exports.Asset = Asset;
exports.AssetDefinition = AssetDefinition;
exports.AssetDefinitionEntry = AssetDefinitionEntry;
exports.AssetDefinitionEvent = AssetDefinitionEvent;
exports.AssetDefinitionEventFilter = AssetDefinitionEventFilter;
exports.AssetDefinitionFilter = AssetDefinitionFilter;
exports.AssetDefinitionId = AssetDefinitionId;
exports.AssetEvent = AssetEvent;
exports.AssetEventFilter = AssetEventFilter;
exports.AssetFilter = AssetFilter;
exports.AssetId = AssetId;
exports.AssetValue = AssetValue;
exports.AssetValueType = AssetValueType;
exports.AtIndex = AtIndex;
exports.BlockHeader = BlockHeader;
exports.BlockHeaderValue = BlockHeaderValue;
exports.BlockPublisherMessage = BlockPublisherMessage;
exports.BlockRejectionReason = BlockRejectionReason;
exports.BlockSubscriberMessage = BlockSubscriberMessage;
exports.BlockValue = BlockValue;
exports.BurnBox = BurnBox;
exports.CommitTimeout = CommitTimeout;
exports.CommittedBlock = CommittedBlock;
exports.Container = Container;
exports.Contains = Contains;
exports.ContainsAll = ContainsAll;
exports.ContainsAny = ContainsAny;
exports.ContextValue = ContextValue;
exports.DataEvent = DataEvent;
exports.DenialReason = DenialReason;
exports.Divide = Divide;
exports.Domain = Domain;
exports.DomainEvent = DomainEvent;
exports.DomainEventFilter = DomainEventFilter;
exports.DomainFilter = DomainFilter;
exports.DomainId = DomainId;
exports.Duration = Duration;
exports.EntityFilter = EntityFilter;
exports.Equal = Equal;
exports.EvaluatesToAccountId = EvaluatesToAccountId;
exports.EvaluatesToAssetDefinitionId = EvaluatesToAssetDefinitionId;
exports.EvaluatesToAssetId = EvaluatesToAssetId;
exports.EvaluatesToBool = EvaluatesToBool;
exports.EvaluatesToDomainId = EvaluatesToDomainId;
exports.EvaluatesToHash = EvaluatesToHash;
exports.EvaluatesToIdBox = EvaluatesToIdBox;
exports.EvaluatesToName = EvaluatesToName;
exports.EvaluatesToRegistrableBox = EvaluatesToRegistrableBox;
exports.EvaluatesToRoleId = EvaluatesToRoleId;
exports.EvaluatesToTriggerId = EvaluatesToTriggerId;
exports.EvaluatesToU32 = EvaluatesToU32;
exports.EvaluatesToValue = EvaluatesToValue;
exports.EvaluatesToVecValue = EvaluatesToVecValue;
exports.Event = Event;
exports.EventPublisherMessage = EventPublisherMessage;
exports.EventSubscriberMessage = EventSubscriberMessage;
exports.Executable = Executable;
exports.ExecuteTriggerBox = ExecuteTriggerBox;
exports.ExecuteTriggerEvent = ExecuteTriggerEvent;
exports.ExecuteTriggerEventFilter = ExecuteTriggerEventFilter;
exports.ExecutionTime = ExecutionTime;
exports.Expression = Expression;
exports.FailBox = FailBox;
exports.FilterBox = FilterBox;
exports.FilterOptAccountEventFilter = FilterOptAccountEventFilter;
exports.FilterOptAccountFilter = FilterOptAccountFilter;
exports.FilterOptAssetDefinitionEventFilter = FilterOptAssetDefinitionEventFilter;
exports.FilterOptAssetDefinitionFilter = FilterOptAssetDefinitionFilter;
exports.FilterOptAssetEventFilter = FilterOptAssetEventFilter;
exports.FilterOptAssetFilter = FilterOptAssetFilter;
exports.FilterOptDomainEventFilter = FilterOptDomainEventFilter;
exports.FilterOptDomainFilter = FilterOptDomainFilter;
exports.FilterOptEntityFilter = FilterOptEntityFilter;
exports.FilterOptIdFilterAccountId = FilterOptIdFilterAccountId;
exports.FilterOptIdFilterAssetDefinitionId = FilterOptIdFilterAssetDefinitionId;
exports.FilterOptIdFilterAssetId = FilterOptIdFilterAssetId;
exports.FilterOptIdFilterDomainId = FilterOptIdFilterDomainId;
exports.FilterOptIdFilterPeerId = FilterOptIdFilterPeerId;
exports.FilterOptIdFilterRoleId = FilterOptIdFilterRoleId;
exports.FilterOptIdFilterTriggerId = FilterOptIdFilterTriggerId;
exports.FilterOptPeerEventFilter = FilterOptPeerEventFilter;
exports.FilterOptPeerFilter = FilterOptPeerFilter;
exports.FilterOptRoleEventFilter = FilterOptRoleEventFilter;
exports.FilterOptRoleFilter = FilterOptRoleFilter;
exports.FilterOptTriggerEventFilter = FilterOptTriggerEventFilter;
exports.FilterOptTriggerFilter = FilterOptTriggerFilter;
exports.FindAccountById = FindAccountById;
exports.FindAccountKeyValueByIdAndKey = FindAccountKeyValueByIdAndKey;
exports.FindAccountsByDomainId = FindAccountsByDomainId;
exports.FindAccountsByName = FindAccountsByName;
exports.FindAccountsWithAsset = FindAccountsWithAsset;
exports.FindAssetById = FindAssetById;
exports.FindAssetDefinitionById = FindAssetDefinitionById;
exports.FindAssetDefinitionKeyValueByIdAndKey = FindAssetDefinitionKeyValueByIdAndKey;
exports.FindAssetKeyValueByIdAndKey = FindAssetKeyValueByIdAndKey;
exports.FindAssetQuantityById = FindAssetQuantityById;
exports.FindAssetsByAccountId = FindAssetsByAccountId;
exports.FindAssetsByAssetDefinitionId = FindAssetsByAssetDefinitionId;
exports.FindAssetsByDomainId = FindAssetsByDomainId;
exports.FindAssetsByDomainIdAndAssetDefinitionId = FindAssetsByDomainIdAndAssetDefinitionId;
exports.FindAssetsByName = FindAssetsByName;
exports.FindDomainById = FindDomainById;
exports.FindDomainKeyValueByIdAndKey = FindDomainKeyValueByIdAndKey;
exports.FindError = FindError;
exports.FindPermissionTokensByAccountId = FindPermissionTokensByAccountId;
exports.FindRoleByRoleId = FindRoleByRoleId;
exports.FindRolesByAccountId = FindRolesByAccountId;
exports.FindTransactionByHash = FindTransactionByHash;
exports.FindTransactionsByAccountId = FindTransactionsByAccountId;
exports.FindTriggerById = FindTriggerById;
exports.FindTriggerKeyValueByIdAndKey = FindTriggerKeyValueByIdAndKey;
exports.FindTriggersByDomainId = FindTriggersByDomainId;
exports.Fixed = Fixed;
exports.FixedPointI64 = FixedPointI64P9;
exports.GenesisTransaction = GenesisTransaction;
exports.GrantBox = GrantBox;
exports.Greater = Greater;
exports.Hash = Hash;
exports.HashOfMerkleTreeVersionedTransaction = HashOfMerkleTreeVersionedTransaction;
exports.HashOfProof = HashOfProof;
exports.HashOfVersionedCommittedBlock = HashOfVersionedCommittedBlock;
exports.HashOfVersionedTransaction = HashOfVersionedTransaction;
exports.HashOfVersionedValidBlock = HashOfVersionedValidBlock;
exports.IdBox = IdBox;
exports.IdFilterAccountId = IdFilterAccountId;
exports.IdFilterAssetDefinitionId = IdFilterAssetDefinitionId;
exports.IdFilterAssetId = IdFilterAssetId;
exports.IdFilterDomainId = IdFilterDomainId;
exports.IdFilterPeerId = IdFilterPeerId;
exports.IdFilterRoleId = IdFilterRoleId;
exports.IdFilterTriggerId = IdFilterTriggerId;
exports.IdentifiableBox = IdentifiableBox;
exports.IfExpression = IfExpression;
exports.IfInstruction = IfInstruction;
exports.Instruction = Instruction;
exports.InstructionExecutionFail = InstructionExecutionFail;
exports.IpfsPath = IpfsPath;
exports.Less = Less;
exports.MapAccountIdAccount = MapAccountIdAccount;
exports.MapAssetDefinitionIdAssetDefinitionEntry = MapAssetDefinitionIdAssetDefinitionEntry;
exports.MapAssetIdAsset = MapAssetIdAsset;
exports.MapNameValue = MapNameValue;
exports.MapPublicKeySignatureOfCommittedBlock = MapPublicKeySignatureOfCommittedBlock;
exports.MapPublicKeySignatureOfProof = MapPublicKeySignatureOfProof;
exports.MapPublicKeySignatureOfTransactionPayload = MapPublicKeySignatureOfTransactionPayload;
exports.MapStringEvaluatesToValue = MapStringEvaluatesToValue;
exports.MerkleTreeVersionedTransaction = MerkleTreeVersionedTransaction;
exports.Metadata = Metadata;
exports.MintBox = MintBox;
exports.Mintable = Mintable;
exports.MismatchValidatorType = MismatchValidatorType;
exports.Mod = Mod;
exports.Multiply = Multiply;
exports.Name = Name;
exports.NewAccount = NewAccount;
exports.NewAssetDefinition = NewAssetDefinition;
exports.NewDomain = NewDomain;
exports.NewRole = NewRole;
exports.Not = Not;
exports.NotPermittedFail = NotPermittedFail;
exports.OptionDuration = OptionDuration;
exports.OptionHash = OptionHash;
exports.OptionInstruction = OptionInstruction;
exports.OptionIpfsPath = OptionIpfsPath;
exports.OptionPipelineEntityKind = OptionPipelineEntityKind;
exports.OptionPipelineStatusKind = OptionPipelineStatusKind;
exports.OptionTimeInterval = OptionTimeInterval;
exports.OptionTopology = OptionTopology;
exports.OptionU32 = OptionU32;
exports.Or = Or;
exports.PaginatedQueryResult = PaginatedQueryResult;
exports.Pagination = Pagination;
exports.Pair = Pair;
exports.Parameter = Parameter;
exports.Peer = Peer;
exports.PeerEvent = PeerEvent;
exports.PeerEventFilter = PeerEventFilter;
exports.PeerFilter = PeerFilter;
exports.PeerId = PeerId;
exports.PermissionToken = PermissionToken;
exports.PipelineEntityKind = PipelineEntityKind;
exports.PipelineEvent = PipelineEvent;
exports.PipelineEventFilter = PipelineEventFilter;
exports.PipelineStatus = PipelineStatus;
exports.PipelineStatusKind = PipelineStatusKind;
exports.Predicate = Predicate;
exports.PredicateBox = PredicateBox;
exports.Proof = Proof;
exports.ProofChain = ProofChain;
exports.ProofPayload = ProofPayload;
exports.PublicKey = PublicKey;
exports.QueryBox = QueryBox;
exports.QueryError = QueryError;
exports.QueryPayload = QueryPayload;
exports.QueryResult = QueryResult;
exports.RaiseTo = RaiseTo;
exports.Range = Range;
exports.RawGenesisBlock = RawGenesisBlock;
exports.RawVersioned = RawVersioned;
exports.Reason = Reason;
exports.RegisterBox = RegisterBox;
exports.RegistrableBox = RegistrableBox;
exports.RejectedTransaction = RejectedTransaction;
exports.RejectionReason = RejectionReason;
exports.RemoveKeyValueBox = RemoveKeyValueBox;
exports.Repeats = Repeats;
exports.RevokeBox = RevokeBox;
exports.Role = Role;
exports.RoleEvent = RoleEvent;
exports.RoleEventFilter = RoleEventFilter;
exports.RoleFilter = RoleFilter;
exports.RoleId = RoleId;
exports.SemiIntervalFixed = SemiIntervalFixed;
exports.SemiIntervalU128 = SemiIntervalU128;
exports.SemiIntervalU32 = SemiIntervalU32;
exports.SequenceBox = SequenceBox;
exports.SetKeyValueBox = SetKeyValueBox;
exports.Signature = Signature;
exports.SignatureCheckCondition = SignatureCheckCondition;
exports.SignatureOfCommittedBlock = SignatureOfCommittedBlock;
exports.SignatureOfProof = SignatureOfProof;
exports.SignatureOfQueryPayload = SignatureOfQueryPayload;
exports.SignatureOfTransactionPayload = SignatureOfTransactionPayload;
exports.SignatureOfValidBlock = SignatureOfValidBlock;
exports.SignaturesOfCommittedBlock = SignaturesOfCommittedBlock;
exports.SignaturesOfProof = SignaturesOfProof;
exports.SignaturesOfTransactionPayload = SignaturesOfTransactionPayload;
exports.SignedQueryRequest = SignedQueryRequest;
exports.Subtract = Subtract;
exports.TimeEvent = TimeEvent;
exports.TimeEventFilter = TimeEventFilter;
exports.TimeInterval = TimeInterval;
exports.TimeSchedule = TimeSchedule;
exports.Topology = Topology;
exports.Transaction = Transaction;
exports.TransactionLimitError = TransactionLimitError;
exports.TransactionPayload = TransactionPayload;
exports.TransactionRejectionReason = TransactionRejectionReason;
exports.TransactionValue = TransactionValue;
exports.TransferBox = TransferBox;
exports.TriggerEvent = TriggerEvent;
exports.TriggerEventFilter = TriggerEventFilter;
exports.TriggerFilter = TriggerFilter;
exports.TriggerFilterBox = TriggerFilterBox;
exports.TriggerId = TriggerId;
exports.UnregisterBox = UnregisterBox;
exports.UnsatisfiedSignatureConditionFail = UnsatisfiedSignatureConditionFail;
exports.UnsupportedVersion = UnsupportedVersion;
exports.ValidBlock = ValidBlock;
exports.ValidTransaction = ValidTransaction;
exports.ValidatorType = ValidatorType;
exports.Value = Value;
exports.ValueOfKey = ValueOfKey;
exports.VecEvent = VecEvent;
exports.VecGenesisTransaction = VecGenesisTransaction;
exports.VecHash = VecHash;
exports.VecHashOfVersionedValidBlock = VecHashOfVersionedValidBlock;
exports.VecInstruction = VecInstruction;
exports.VecPeerId = VecPeerId;
exports.VecPermissionToken = VecPermissionToken;
exports.VecPredicateBox = VecPredicateBox;
exports.VecProof = VecProof;
exports.VecPublicKey = VecPublicKey;
exports.VecRoleId = VecRoleId;
exports.VecSignatureOfTransactionPayload = VecSignatureOfTransactionPayload;
exports.VecSignatureOfValidBlock = VecSignatureOfValidBlock;
exports.VecValue = VecValue;
exports.VecVersionedRejectedTransaction = VecVersionedRejectedTransaction;
exports.VecVersionedValidTransaction = VecVersionedValidTransaction;
exports.VersionError = VersionError;
exports.VersionedBlockPublisherMessage = VersionedBlockPublisherMessage;
exports.VersionedBlockSubscriberMessage = VersionedBlockSubscriberMessage;
exports.VersionedCommittedBlock = VersionedCommittedBlock;
exports.VersionedEventPublisherMessage = VersionedEventPublisherMessage;
exports.VersionedEventSubscriberMessage = VersionedEventSubscriberMessage;
exports.VersionedPaginatedQueryResult = VersionedPaginatedQueryResult;
exports.VersionedRejectedTransaction = VersionedRejectedTransaction;
exports.VersionedSignedQueryRequest = VersionedSignedQueryRequest;
exports.VersionedTransaction = VersionedTransaction;
exports.VersionedValidBlock = VersionedValidBlock;
exports.VersionedValidTransaction = VersionedValidTransaction;
exports.WasmExecutionFail = WasmExecutionFail;
exports.WasmSmartContract = WasmSmartContract;
exports.Where = Where;
Object.keys(definitionRuntime).forEach(function (k) {
    if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
        enumerable: true,
        get: function () { return definitionRuntime[k]; }
    });
});
