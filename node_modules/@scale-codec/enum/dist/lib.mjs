// packages/enum/src/lib.ts
var ENUM_EMPTY_VALUE = Symbol("empty");
var Enum = class {
  static variant(tag, value = ENUM_EMPTY_VALUE) {
    return new Enum(tag, value);
  }
  tag;
  value;
  constructor(tag, value = ENUM_EMPTY_VALUE) {
    this.tag = tag;
    this.value = value;
  }
  get isEmpty() {
    return this.value === ENUM_EMPTY_VALUE;
  }
  is(tag) {
    return this.tag === tag;
  }
  as(tag) {
    if (this.is(tag)) {
      if (this.isEmpty) {
        throw new Error(`Enum cast failed - enum "${tag}" is empty`);
      }
      return this.value;
    }
    throw new Error(`Enum cast failed - enum is "${this.tag}", not "${tag}"`);
  }
  match(matchMap) {
    const fn = matchMap[this.tag];
    return this.isEmpty ? fn() : fn(this.value);
  }
  toJSON() {
    const { tag, value, isEmpty } = this;
    return isEmpty ? { tag } : { tag, value };
  }
};
export {
  ENUM_EMPTY_VALUE,
  Enum
};
