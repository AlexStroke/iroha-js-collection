var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// packages/util/src/lib.ts
var lib_exports = {};
__export(lib_exports, {
  assert: () => assert,
  concatBytes: () => concatBytes,
  fromHex: () => fromHex,
  mapGetUnwrap: () => mapGetUnwrap,
  toHex: () => toHex
});
module.exports = __toCommonJS(lib_exports);
function assert(condition, message) {
  if (!condition) {
    throw new Error(typeof message === "function" ? message() : message);
  }
}
function concatBytes(iterable) {
  let array;
  let bytesLength = 0;
  if (Array.isArray(iterable)) {
    array = iterable;
    for (let i = 0, arrLen = array.length; i < arrLen; i++) {
      bytesLength += array[i].byteLength;
    }
  } else {
    array = [];
    for (const part of iterable) {
      array.push(part);
      bytesLength += part.byteLength;
    }
  }
  const target = new Uint8Array(bytesLength);
  for (let i = 0, offset = 0, arrLen = array.length; i < arrLen; i++) {
    target.set(array[i], offset);
    offset += array[i].length;
  }
  return target;
}
function mapGetUnwrap(map, key) {
  if (!map.has(key))
    throw new Error(`failed to unwrap - key "${key}" not found`);
  return map.get(key);
}
function toHex(v) {
  return [...v].map((x) => x.toString(16).padStart(2, "0")).join(" ");
}
function fromHex(hex) {
  return Uint8Array.from(hex.split(" ").map((x) => parseInt(x, 16)));
}
