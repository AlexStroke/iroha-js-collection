import { encodeFactory, encodeI64, trackableCodec, decodeI64, dynCodec, Void, createStructCodec, createEnumCodec, createArrayU8Codec, U32, U128, U64, Str, createTupleCodec, createMapCodec, createVecCodec, createOptionCodec, VecU8, Compact, U8, Bool } from '@scale-codec/definition-runtime';
export * from '@scale-codec/definition-runtime';
export { Void as BlockCreationTimeout, Void as FindAllAccounts, Void as FindAllActiveTriggerIds, Void as FindAllAssets, Void as FindAllAssetsDefinitions, Void as FindAllBlocks, Void as FindAllDomains, Void as FindAllPeers, Void as FindAllRoleIds, Void as FindAllRoles, Void as FindAllTransactions, Void as NoTransactionReceiptReceived } from '@scale-codec/definition-runtime';
import { f64StrToBigint, bigintToF64Str } from '@iroha2/i64-fixnum';

const PRECISION = 9;
const encoder = encodeFactory((value, walker) => {
    encodeI64(f64StrToBigint(value, PRECISION), walker);
}, 
// i64 is always fixed 8-bytes len
() => 8);
const decoder = (walker) => {
    const bi = decodeI64(walker);
    return bigintToF64Str(bi, PRECISION);
};
const FixedPointI64P9 = trackableCodec('FixedPointI64P9', encoder, decoder);

// Dynamic codecs
const __dyn_FilterOptAssetDefinitionFilter = dynCodec(() => FilterOptAssetDefinitionFilter);
const __dyn_FindAccountKeyValueByIdAndKey = dynCodec(() => FindAccountKeyValueByIdAndKey);
const __dyn_SignatureOfCommittedBlock = dynCodec(() => SignatureOfCommittedBlock);
const __dyn_IdFilterTriggerId = dynCodec(() => IdFilterTriggerId);
const __dyn_FilterOptAccountEventFilter = dynCodec(() => FilterOptAccountEventFilter);
const __dyn_TransferBox = dynCodec(() => TransferBox);
const __dyn_EvaluatesToName = dynCodec(() => EvaluatesToName);
const __dyn_RejectedTransaction = dynCodec(() => RejectedTransaction);
const __dyn_BlockRejectionReason = dynCodec(() => BlockRejectionReason);
const __dyn_SignatureOfValidBlock = dynCodec(() => SignatureOfValidBlock);
const __dyn_Container = dynCodec(() => Container);
const __dyn_Add = dynCodec(() => Add);
const __dyn_AssetValue = dynCodec(() => AssetValue);
const __dyn_SemiIntervalFixed = dynCodec(() => SemiIntervalFixed);
const __dyn_MapAssetIdAsset = dynCodec(() => MapAssetIdAsset);
const __dyn_FindAccountsByName = dynCodec(() => FindAccountsByName);
const __dyn_SemiIntervalU32 = dynCodec(() => SemiIntervalU32);
const __dyn_MapAccountIdAccount = dynCodec(() => MapAccountIdAccount);
const __dyn_FilterOptRoleEventFilter = dynCodec(() => FilterOptRoleEventFilter);
const __dyn_ContextValue = dynCodec(() => ContextValue);
const __dyn_ValidTransaction = dynCodec(() => ValidTransaction);
const __dyn_Peer = dynCodec(() => Peer);
const __dyn_AssetEventFilter = dynCodec(() => AssetEventFilter);
const __dyn_VecPublicKey = dynCodec(() => VecPublicKey);
const __dyn_SignaturesOfTransactionPayload = dynCodec(() => SignaturesOfTransactionPayload);
const __dyn_VecHash = dynCodec(() => VecHash);
const __dyn_ContainsAll = dynCodec(() => ContainsAll);
const __dyn_Mod = dynCodec(() => Mod);
const __dyn_TriggerEvent = dynCodec(() => TriggerEvent);
const __dyn_QueryBox = dynCodec(() => QueryBox);
const __dyn_AssetDefinition = dynCodec(() => AssetDefinition);
const __dyn_HashOfVersionedCommittedBlock = dynCodec(() => HashOfVersionedCommittedBlock);
const __dyn_FindAssetKeyValueByIdAndKey = dynCodec(() => FindAssetKeyValueByIdAndKey);
const __dyn_HashOfVersionedValidBlock = dynCodec(() => HashOfVersionedValidBlock);
const __dyn_UnsupportedVersion = dynCodec(() => UnsupportedVersion);
const __dyn_SignaturesOfCommittedBlock = dynCodec(() => SignaturesOfCommittedBlock);
const __dyn_NotPermittedFail = dynCodec(() => NotPermittedFail);
const __dyn_EvaluatesToHash = dynCodec(() => EvaluatesToHash);
const __dyn_Or = dynCodec(() => Or);
const __dyn_SignedQueryRequest = dynCodec(() => SignedQueryRequest);
const __dyn_NewAssetDefinition = dynCodec(() => NewAssetDefinition);
const __dyn_FindTransactionsByAccountId = dynCodec(() => FindTransactionsByAccountId);
const __dyn_OptionHash = dynCodec(() => OptionHash);
const __dyn_TimeSchedule = dynCodec(() => TimeSchedule);
const __dyn_Domain = dynCodec(() => Domain);
const __dyn_BlockValue = dynCodec(() => BlockValue);
const __dyn_Proof = dynCodec(() => Proof);
const __dyn_OptionTopology = dynCodec(() => OptionTopology);
const __dyn_Multiply = dynCodec(() => Multiply);
const __dyn_NewDomain = dynCodec(() => NewDomain);
const __dyn_Reason = dynCodec(() => Reason);
const __dyn_IdFilterRoleId = dynCodec(() => IdFilterRoleId);
const __dyn_RoleEvent = dynCodec(() => RoleEvent);
const __dyn_MapPublicKeySignatureOfTransactionPayload = dynCodec(() => MapPublicKeySignatureOfTransactionPayload);
const __dyn_VecRoleId = dynCodec(() => VecRoleId);
const __dyn_EventPublisherMessage = dynCodec(() => EventPublisherMessage);
const __dyn_RevokeBox = dynCodec(() => RevokeBox);
const __dyn_TimeEventFilter = dynCodec(() => TimeEventFilter);
const __dyn_VecVersionedValidTransaction = dynCodec(() => VecVersionedValidTransaction);
const __dyn_ExecutionTime = dynCodec(() => ExecutionTime);
const __dyn_AccountEventFilter = dynCodec(() => AccountEventFilter);
const __dyn_QueryResult = dynCodec(() => QueryResult);
const __dyn_FilterOptIdFilterTriggerId = dynCodec(() => FilterOptIdFilterTriggerId);
const __dyn_EventSubscriberMessage = dynCodec(() => EventSubscriberMessage);
const __dyn_AccountFilter = dynCodec(() => AccountFilter);
const __dyn_FindAccountById = dynCodec(() => FindAccountById);
const __dyn_MapPublicKeySignatureOfCommittedBlock = dynCodec(() => MapPublicKeySignatureOfCommittedBlock);
const __dyn_EvaluatesToRoleId = dynCodec(() => EvaluatesToRoleId);
const __dyn_VecEvent = dynCodec(() => VecEvent);
const __dyn_QueryPayload = dynCodec(() => QueryPayload);
const __dyn_Where = dynCodec(() => Where);
const __dyn_FindAllDomains = dynCodec(() => Void);
const __dyn_VersionedTransaction = dynCodec(() => VersionedTransaction);
const __dyn_RaiseTo = dynCodec(() => RaiseTo);
const __dyn_OptionTimeInterval = dynCodec(() => OptionTimeInterval);
const __dyn_RegisterBox = dynCodec(() => RegisterBox);
const __dyn_AccountId = dynCodec(() => AccountId);
const __dyn_InstructionExecutionFail = dynCodec(() => InstructionExecutionFail);
const __dyn_VersionedCommittedBlock = dynCodec(() => VersionedCommittedBlock);
const __dyn_VecPredicateBox = dynCodec(() => VecPredicateBox);
const __dyn_ExecuteTriggerBox = dynCodec(() => ExecuteTriggerBox);
const __dyn_AssetFilter = dynCodec(() => AssetFilter);
const __dyn_PipelineStatusKind = dynCodec(() => PipelineStatusKind);
const __dyn_FindAssetById = dynCodec(() => FindAssetById);
const __dyn_OptionDuration = dynCodec(() => OptionDuration);
const __dyn_MintBox = dynCodec(() => MintBox);
const __dyn_MapStringEvaluatesToValue = dynCodec(() => MapStringEvaluatesToValue);
const __dyn_FilterOptRoleFilter = dynCodec(() => FilterOptRoleFilter);
const __dyn_FindDomainKeyValueByIdAndKey = dynCodec(() => FindDomainKeyValueByIdAndKey);
const __dyn_EvaluatesToAssetDefinitionId = dynCodec(() => EvaluatesToAssetDefinitionId);
const __dyn_VersionedRejectedTransaction = dynCodec(() => VersionedRejectedTransaction);
const __dyn_FindAllPeers = dynCodec(() => Void);
const __dyn_Parameter = dynCodec(() => Parameter);
const __dyn_CommitTimeout = dynCodec(() => CommitTimeout);
const __dyn_FindTriggersByDomainId = dynCodec(() => FindTriggersByDomainId);
const __dyn_Executable = dynCodec(() => Executable);
const __dyn_EvaluatesToRegistrableBox = dynCodec(() => EvaluatesToRegistrableBox);
const __dyn_PermissionToken = dynCodec(() => PermissionToken);
const __dyn_FindTransactionByHash = dynCodec(() => FindTransactionByHash);
const __dyn_AssetEvent = dynCodec(() => AssetEvent);
const __dyn_SequenceBox = dynCodec(() => SequenceBox);
const __dyn_FilterOptAssetDefinitionEventFilter = dynCodec(() => FilterOptAssetDefinitionEventFilter);
const __dyn_VecGenesisTransaction = dynCodec(() => VecGenesisTransaction);
const __dyn_MapNameValue = dynCodec(() => MapNameValue);
const __dyn_FilterOptAccountFilter = dynCodec(() => FilterOptAccountFilter);
const __dyn_ProofPayload = dynCodec(() => ProofPayload);
const __dyn_AssetId = dynCodec(() => AssetId);
const __dyn_DenialReason = dynCodec(() => DenialReason);
const __dyn_TransactionLimitError = dynCodec(() => TransactionLimitError);
const __dyn_IdFilterAssetDefinitionId = dynCodec(() => IdFilterAssetDefinitionId);
const __dyn_FixedPointI64 = dynCodec(() => FixedPointI64P9);
const __dyn_VecSignatureOfTransactionPayload = dynCodec(() => VecSignatureOfTransactionPayload);
const __dyn_FindAssetsByAssetDefinitionId = dynCodec(() => FindAssetsByAssetDefinitionId);
const __dyn_FilterOptIdFilterPeerId = dynCodec(() => FilterOptIdFilterPeerId);
const __dyn_FindAllAssets = dynCodec(() => Void);
const __dyn_Name = dynCodec(() => Name);
const __dyn_FindTriggerKeyValueByIdAndKey = dynCodec(() => FindTriggerKeyValueByIdAndKey);
const __dyn_FindAccountsWithAsset = dynCodec(() => FindAccountsWithAsset);
const __dyn_SignatureCheckCondition = dynCodec(() => SignatureCheckCondition);
const __dyn_VecSignatureOfValidBlock = dynCodec(() => VecSignatureOfValidBlock);
const __dyn_ValidatorType = dynCodec(() => ValidatorType);
const __dyn_HashOfVersionedTransaction = dynCodec(() => HashOfVersionedTransaction);
const __dyn_AccountEvent = dynCodec(() => AccountEvent);
const __dyn_NewAccount = dynCodec(() => NewAccount);
const __dyn_FilterOptIdFilterDomainId = dynCodec(() => FilterOptIdFilterDomainId);
const __dyn_FailBox = dynCodec(() => FailBox);
const __dyn_Account = dynCodec(() => Account);
const __dyn_FindRolesByAccountId = dynCodec(() => FindRolesByAccountId);
const __dyn_ContainsAny = dynCodec(() => ContainsAny);
const __dyn_RejectionReason = dynCodec(() => RejectionReason);
const __dyn_FilterOptAssetFilter = dynCodec(() => FilterOptAssetFilter);
const __dyn_TimeEvent = dynCodec(() => TimeEvent);
const __dyn_Instruction = dynCodec(() => Instruction);
const __dyn_FindAllBlocks = dynCodec(() => Void);
const __dyn_FindAllAccounts = dynCodec(() => Void);
const __dyn_Hash = dynCodec(() => Hash);
const __dyn_OptionIpfsPath = dynCodec(() => OptionIpfsPath);
const __dyn_FindAllActiveTriggerIds = dynCodec(() => Void);
const __dyn_DomainEventFilter = dynCodec(() => DomainEventFilter);
const __dyn_RoleFilter = dynCodec(() => RoleFilter);
const __dyn_OptionPipelineEntityKind = dynCodec(() => OptionPipelineEntityKind);
const __dyn_RawVersioned = dynCodec(() => RawVersioned);
const __dyn_TransactionRejectionReason = dynCodec(() => TransactionRejectionReason);
const __dyn_FindDomainById = dynCodec(() => FindDomainById);
const __dyn_AssetDefinitionEntry = dynCodec(() => AssetDefinitionEntry);
const __dyn_ExecuteTriggerEventFilter = dynCodec(() => ExecuteTriggerEventFilter);
const __dyn_AssetDefinitionEventFilter = dynCodec(() => AssetDefinitionEventFilter);
const __dyn_Topology = dynCodec(() => Topology);
const __dyn_GrantBox = dynCodec(() => GrantBox);
const __dyn_Metadata = dynCodec(() => Metadata);
const __dyn_MapPublicKeySignatureOfProof = dynCodec(() => MapPublicKeySignatureOfProof);
const __dyn_FindError = dynCodec(() => FindError);
const __dyn_ArrayU8L32 = dynCodec(() => ArrayU8L32);
const __dyn_UnregisterBox = dynCodec(() => UnregisterBox);
const __dyn_VecHashOfVersionedValidBlock = dynCodec(() => VecHashOfVersionedValidBlock);
const __dyn_FindPermissionTokensByAccountId = dynCodec(() => FindPermissionTokensByAccountId);
const __dyn_VersionError = dynCodec(() => VersionError);
const __dyn_IdFilterPeerId = dynCodec(() => IdFilterPeerId);
const __dyn_TransactionPayload = dynCodec(() => TransactionPayload);
const __dyn_FilterOptIdFilterAssetDefinitionId = dynCodec(() => FilterOptIdFilterAssetDefinitionId);
const __dyn_DataEvent = dynCodec(() => DataEvent);
const __dyn_VecProof = dynCodec(() => VecProof);
const __dyn_IdBox = dynCodec(() => IdBox);
const __dyn_PipelineEventFilter = dynCodec(() => PipelineEventFilter);
const __dyn_Asset = dynCodec(() => Asset);
const __dyn_TriggerFilter = dynCodec(() => TriggerFilter);
const __dyn_PeerEventFilter = dynCodec(() => PeerEventFilter);
const __dyn_RoleId = dynCodec(() => RoleId);
const __dyn_Value = dynCodec(() => Value);
const __dyn_ValidBlock = dynCodec(() => ValidBlock);
const __dyn_FindTriggerById = dynCodec(() => FindTriggerById);
const __dyn_CommittedBlock = dynCodec(() => CommittedBlock);
const __dyn_VecPeerId = dynCodec(() => VecPeerId);
const __dyn_IfInstruction = dynCodec(() => IfInstruction);
const __dyn_MapAssetDefinitionIdAssetDefinitionEntry = dynCodec(() => MapAssetDefinitionIdAssetDefinitionEntry);
const __dyn_EvaluatesToVecValue = dynCodec(() => EvaluatesToVecValue);
const __dyn_BlockSubscriberMessage = dynCodec(() => BlockSubscriberMessage);
const __dyn_WasmExecutionFail = dynCodec(() => WasmExecutionFail);
const __dyn_SignaturesOfProof = dynCodec(() => SignaturesOfProof);
const __dyn_FindAssetsByDomainId = dynCodec(() => FindAssetsByDomainId);
const __dyn_IdFilterDomainId = dynCodec(() => IdFilterDomainId);
const __dyn_TimeInterval = dynCodec(() => TimeInterval);
const __dyn_FilterOptDomainEventFilter = dynCodec(() => FilterOptDomainEventFilter);
const __dyn_EvaluatesToAccountId = dynCodec(() => EvaluatesToAccountId);
const __dyn_TriggerId = dynCodec(() => TriggerId);
const __dyn_TransactionValue = dynCodec(() => TransactionValue);
const __dyn_Not = dynCodec(() => Not);
const __dyn_FilterBox = dynCodec(() => FilterBox);
const __dyn_PredicateBox = dynCodec(() => PredicateBox);
const __dyn_FindAssetQuantityById = dynCodec(() => FindAssetQuantityById);
const __dyn_PipelineStatus = dynCodec(() => PipelineStatus);
const __dyn_Duration = dynCodec(() => Duration);
const __dyn_HashOfMerkleTreeVersionedTransaction = dynCodec(() => HashOfMerkleTreeVersionedTransaction);
const __dyn_EvaluatesToDomainId = dynCodec(() => EvaluatesToDomainId);
const __dyn_Equal = dynCodec(() => Equal);
const __dyn_Subtract = dynCodec(() => Subtract);
const __dyn_Fixed = dynCodec(() => Fixed);
const __dyn_FindAccountsByDomainId = dynCodec(() => FindAccountsByDomainId);
const __dyn_IdFilterAccountId = dynCodec(() => IdFilterAccountId);
const __dyn_FindAssetsByAccountId = dynCodec(() => FindAssetsByAccountId);
const __dyn_FilterOptTriggerEventFilter = dynCodec(() => FilterOptTriggerEventFilter);
const __dyn_BlockCreationTimeout = dynCodec(() => Void);
const __dyn_FilterOptPeerFilter = dynCodec(() => FilterOptPeerFilter);
const __dyn_FindAllAssetsDefinitions = dynCodec(() => Void);
const __dyn_SignatureOfQueryPayload = dynCodec(() => SignatureOfQueryPayload);
const __dyn_SignatureOfProof = dynCodec(() => SignatureOfProof);
const __dyn_FilterOptPeerEventFilter = dynCodec(() => FilterOptPeerEventFilter);
const __dyn_FindAllRoles = dynCodec(() => Void);
const __dyn_SemiIntervalU128 = dynCodec(() => SemiIntervalU128);
const __dyn_RemoveKeyValueBox = dynCodec(() => RemoveKeyValueBox);
const __dyn_FilterOptTriggerFilter = dynCodec(() => FilterOptTriggerFilter);
const __dyn_IdentifiableBox = dynCodec(() => IdentifiableBox);
const __dyn_IfExpression = dynCodec(() => IfExpression);
const __dyn_DomainEvent = dynCodec(() => DomainEvent);
const __dyn_GenesisTransaction = dynCodec(() => GenesisTransaction);
const __dyn_Role = dynCodec(() => Role);
const __dyn_FilterOptEntityFilter = dynCodec(() => FilterOptEntityFilter);
const __dyn_NewRole = dynCodec(() => NewRole);
const __dyn_FindAssetDefinitionKeyValueByIdAndKey = dynCodec(() => FindAssetDefinitionKeyValueByIdAndKey);
const __dyn_PublicKey = dynCodec(() => PublicKey);
const __dyn_VecPermissionToken = dynCodec(() => VecPermissionToken);
const __dyn_EvaluatesToAssetId = dynCodec(() => EvaluatesToAssetId);
const __dyn_AssetDefinitionEvent = dynCodec(() => AssetDefinitionEvent);
const __dyn_BlockHeaderValue = dynCodec(() => BlockHeaderValue);
const __dyn_SetKeyValueBox = dynCodec(() => SetKeyValueBox);
const __dyn_FilterOptDomainFilter = dynCodec(() => FilterOptDomainFilter);
const __dyn_Predicate = dynCodec(() => Predicate);
const __dyn_WasmSmartContract = dynCodec(() => WasmSmartContract);
const __dyn_And = dynCodec(() => And);
const __dyn_ValueOfKey = dynCodec(() => ValueOfKey);
const __dyn_FindRoleByRoleId = dynCodec(() => FindRoleByRoleId);
const __dyn_ExecuteTriggerEvent = dynCodec(() => ExecuteTriggerEvent);
const __dyn_IdFilterAssetId = dynCodec(() => IdFilterAssetId);
const __dyn_Signature = dynCodec(() => Signature);
const __dyn_BlockPublisherMessage = dynCodec(() => BlockPublisherMessage);
const __dyn_PipelineEvent = dynCodec(() => PipelineEvent);
const __dyn_Repeats = dynCodec(() => Repeats);
const __dyn_PaginatedQueryResult = dynCodec(() => PaginatedQueryResult);
const __dyn_PeerEvent = dynCodec(() => PeerEvent);
const __dyn_Expression = dynCodec(() => Expression);
const __dyn_Divide = dynCodec(() => Divide);
const __dyn_OptionInstruction = dynCodec(() => OptionInstruction);
const __dyn_FindAssetsByDomainIdAndAssetDefinitionId = dynCodec(() => FindAssetsByDomainIdAndAssetDefinitionId);
const __dyn_Less = dynCodec(() => Less);
const __dyn_PipelineEntityKind = dynCodec(() => PipelineEntityKind);
const __dyn_IpfsPath = dynCodec(() => IpfsPath);
const __dyn_VersionedValidTransaction = dynCodec(() => VersionedValidTransaction);
const __dyn_FindAllRoleIds = dynCodec(() => Void);
const __dyn_VecInstruction = dynCodec(() => VecInstruction);
const __dyn_BlockHeader = dynCodec(() => BlockHeader);
const __dyn_TriggerEventFilter = dynCodec(() => TriggerEventFilter);
const __dyn_UnsatisfiedSignatureConditionFail = dynCodec(() => UnsatisfiedSignatureConditionFail);
const __dyn_FilterOptIdFilterAccountId = dynCodec(() => FilterOptIdFilterAccountId);
const __dyn_Event = dynCodec(() => Event);
const __dyn_Pair = dynCodec(() => Pair);
const __dyn_PeerFilter = dynCodec(() => PeerFilter);
const __dyn_Pagination = dynCodec(() => Pagination);
const __dyn_Greater = dynCodec(() => Greater);
const __dyn_TriggerFilterBox = dynCodec(() => TriggerFilterBox);
const __dyn_EvaluatesToIdBox = dynCodec(() => EvaluatesToIdBox);
const __dyn_EntityFilter = dynCodec(() => EntityFilter);
const __dyn_AssetDefinitionFilter = dynCodec(() => AssetDefinitionFilter);
const __dyn_AssetValueType = dynCodec(() => AssetValueType);
const __dyn_NoTransactionReceiptReceived = dynCodec(() => Void);
const __dyn_RoleEventFilter = dynCodec(() => RoleEventFilter);
const __dyn_FindAssetDefinitionById = dynCodec(() => FindAssetDefinitionById);
const __dyn_Mintable = dynCodec(() => Mintable);
const __dyn_BurnBox = dynCodec(() => BurnBox);
const __dyn_DomainFilter = dynCodec(() => DomainFilter);
const __dyn_EvaluatesToValue = dynCodec(() => EvaluatesToValue);
const __dyn_VecVersionedRejectedTransaction = dynCodec(() => VecVersionedRejectedTransaction);
const __dyn_OptionPipelineStatusKind = dynCodec(() => OptionPipelineStatusKind);
const __dyn_Range = dynCodec(() => Range);
const __dyn_ActionFilterBox = dynCodec(() => ActionFilterBox);
const __dyn_PeerId = dynCodec(() => PeerId);
const __dyn_VecValue = dynCodec(() => VecValue);
const __dyn_FindAllTransactions = dynCodec(() => Void);
const __dyn_FilterOptIdFilterAssetId = dynCodec(() => FilterOptIdFilterAssetId);
const __dyn_FilterOptAssetEventFilter = dynCodec(() => FilterOptAssetEventFilter);
const __dyn_ProofChain = dynCodec(() => ProofChain);
const __dyn_AssetDefinitionId = dynCodec(() => AssetDefinitionId);
const __dyn_FindAssetsByName = dynCodec(() => FindAssetsByName);
const __dyn_EvaluatesToTriggerId = dynCodec(() => EvaluatesToTriggerId);
const __dyn_MismatchValidatorType = dynCodec(() => MismatchValidatorType);
const __dyn_Transaction = dynCodec(() => Transaction);
const __dyn_AtIndex = dynCodec(() => AtIndex);
const __dyn_HashOfProof = dynCodec(() => HashOfProof);
const __dyn_OptionU32 = dynCodec(() => OptionU32);
const __dyn_DomainId = dynCodec(() => DomainId);
const __dyn_Contains = dynCodec(() => Contains);
const __dyn_EvaluatesToU32 = dynCodec(() => EvaluatesToU32);
const __dyn_FilterOptIdFilterRoleId = dynCodec(() => FilterOptIdFilterRoleId);
const __dyn_EvaluatesToBool = dynCodec(() => EvaluatesToBool);
const __dyn_SignatureOfTransactionPayload = dynCodec(() => SignatureOfTransactionPayload);
const Account = createStructCodec('Account', [
    ['id', __dyn_AccountId],
    ['assets', __dyn_MapAssetIdAsset],
    ['signatories', __dyn_VecPublicKey],
    ['permission_tokens', __dyn_VecPermissionToken],
    ['signature_check_condition', __dyn_SignatureCheckCondition],
    ['metadata', __dyn_Metadata],
    ['roles', __dyn_VecRoleId]
]);
const AccountEvent = createEnumCodec('AccountEvent', [
    [0, 'Asset', __dyn_AssetEvent],
    [1, 'Created', __dyn_AccountId],
    [2, 'Deleted', __dyn_AccountId],
    [3, 'AuthenticationAdded', __dyn_AccountId],
    [4, 'AuthenticationRemoved', __dyn_AccountId],
    [5, 'PermissionAdded', __dyn_AccountId],
    [6, 'PermissionRemoved', __dyn_AccountId],
    [7, 'RoleRevoked', __dyn_AccountId],
    [8, 'RoleGranted', __dyn_AccountId],
    [9, 'MetadataInserted', __dyn_AccountId],
    [10, 'MetadataRemoved', __dyn_AccountId]
]);
const AccountEventFilter = createEnumCodec('AccountEventFilter', [
    [0, 'ByAsset', __dyn_FilterOptAssetFilter],
    [1, 'ByCreated'],
    [2, 'ByDeleted'],
    [3, 'ByAuthenticationAdded'],
    [4, 'ByAuthenticationRemoved'],
    [5, 'ByPermissionAdded'],
    [6, 'ByPermissionRemoved'],
    [7, 'ByRoleRevoked'],
    [8, 'ByRoleGranted'],
    [9, 'ByMetadataInserted'],
    [10, 'ByMetadataRemoved']
]);
const AccountFilter = createStructCodec('AccountFilter', [
    ['id_filter', __dyn_FilterOptIdFilterAccountId],
    ['event_filter', __dyn_FilterOptAccountEventFilter]
]);
const AccountId = createStructCodec('AccountId', [
    ['name', __dyn_Name],
    ['domain_id', __dyn_DomainId]
]);
const ActionFilterBox = createStructCodec('ActionFilterBox', [
    ['executable', __dyn_Executable],
    ['repeats', __dyn_Repeats],
    ['technical_account', __dyn_AccountId],
    ['filter', __dyn_FilterBox],
    ['metadata', __dyn_Metadata]
]);
const Add = createStructCodec('Add', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const And = createStructCodec('And', [
    ['left', __dyn_EvaluatesToBool],
    ['right', __dyn_EvaluatesToBool]
]);
const ArrayU8L32 = createArrayU8Codec('ArrayU8L32', 32);
const Asset = createStructCodec('Asset', [
    ['id', __dyn_AssetId],
    ['value', __dyn_AssetValue]
]);
const AssetDefinition = createStructCodec('AssetDefinition', [
    ['id', __dyn_AssetDefinitionId],
    ['value_type', __dyn_AssetValueType],
    ['mintable', __dyn_Mintable],
    ['metadata', __dyn_Metadata]
]);
const AssetDefinitionEntry = createStructCodec('AssetDefinitionEntry', [
    ['definition', __dyn_AssetDefinition],
    ['registered_by', __dyn_AccountId]
]);
const AssetDefinitionEvent = createEnumCodec('AssetDefinitionEvent', [
    [0, 'Created', __dyn_AssetDefinitionId],
    [1, 'MintabilityChanged', __dyn_AssetDefinitionId],
    [2, 'Deleted', __dyn_AssetDefinitionId],
    [3, 'MetadataInserted', __dyn_AssetDefinitionId],
    [4, 'MetadataRemoved', __dyn_AssetDefinitionId]
]);
const AssetDefinitionEventFilter = createEnumCodec('AssetDefinitionEventFilter', [
    [0, 'ByCreated'],
    [1, 'ByDeleted'],
    [2, 'ByMintabilityChanged'],
    [3, 'ByMetadataInserted'],
    [4, 'ByMetadataRemoved']
]);
const AssetDefinitionFilter = createStructCodec('AssetDefinitionFilter', [
    ['id_filter', __dyn_FilterOptIdFilterAssetDefinitionId],
    ['event_filter', __dyn_FilterOptAssetDefinitionEventFilter]
]);
const AssetDefinitionId = createStructCodec('AssetDefinitionId', [
    ['name', __dyn_Name],
    ['domain_id', __dyn_DomainId]
]);
const AssetEvent = createEnumCodec('AssetEvent', [
    [0, 'Created', __dyn_AssetId],
    [1, 'Deleted', __dyn_AssetId],
    [2, 'Added', __dyn_AssetId],
    [3, 'Removed', __dyn_AssetId],
    [4, 'MetadataInserted', __dyn_AssetId],
    [5, 'MetadataRemoved', __dyn_AssetId]
]);
const AssetEventFilter = createEnumCodec('AssetEventFilter', [
    [0, 'ByCreated'],
    [1, 'ByDeleted'],
    [2, 'ByAdded'],
    [3, 'ByRemoved'],
    [4, 'ByMetadataInserted'],
    [5, 'ByMetadataRemoved']
]);
const AssetFilter = createStructCodec('AssetFilter', [
    ['id_filter', __dyn_FilterOptIdFilterAssetId],
    ['event_filter', __dyn_FilterOptAssetEventFilter]
]);
const AssetId = createStructCodec('AssetId', [
    ['definition_id', __dyn_AssetDefinitionId],
    ['account_id', __dyn_AccountId]
]);
const AssetValue = createEnumCodec('AssetValue', [
    [0, 'Quantity', U32],
    [1, 'BigQuantity', U128],
    [2, 'Fixed', __dyn_Fixed],
    [3, 'Store', __dyn_Metadata]
]);
const AssetValueType = createEnumCodec('AssetValueType', [
    [0, 'Quantity'],
    [1, 'BigQuantity'],
    [2, 'Fixed'],
    [3, 'Store']
]);
const AtIndex = createStructCodec('AtIndex', [
    ['index', U32],
    ['predicate', __dyn_Predicate]
]);
const BlockHeader = createStructCodec('BlockHeader', [
    ['timestamp', U128],
    ['consensus_estimation', U64],
    ['height', U64],
    ['previous_block_hash', __dyn_HashOfVersionedCommittedBlock],
    ['transactions_hash', __dyn_HashOfMerkleTreeVersionedTransaction],
    ['rejected_transactions_hash', __dyn_HashOfMerkleTreeVersionedTransaction],
    ['view_change_proofs', __dyn_ProofChain],
    ['invalidated_blocks_hashes', __dyn_VecHashOfVersionedValidBlock],
    ['genesis_topology', __dyn_OptionTopology]
]);
const BlockHeaderValue = createStructCodec('BlockHeaderValue', [
    ['timestamp', U128],
    ['height', U64],
    ['previous_block_hash', __dyn_Hash],
    ['transactions_hash', __dyn_HashOfMerkleTreeVersionedTransaction],
    ['rejected_transactions_hash', __dyn_HashOfMerkleTreeVersionedTransaction],
    ['invalidated_blocks_hashes', __dyn_VecHash],
    ['current_block_hash', __dyn_Hash]
]);
const BlockPublisherMessage = createEnumCodec('BlockPublisherMessage', [
    [0, 'SubscriptionAccepted'],
    [1, 'Block', __dyn_VersionedCommittedBlock]
]);
const BlockRejectionReason = createEnumCodec('BlockRejectionReason', [
    [0, 'ConsensusBlockRejection']
]);
const BlockSubscriberMessage = createEnumCodec('BlockSubscriberMessage', [
    [0, 'SubscriptionRequest', U64],
    [1, 'BlockReceived']
]);
const BlockValue = createStructCodec('BlockValue', [
    ['header', __dyn_BlockHeaderValue],
    ['transactions', __dyn_VecVersionedValidTransaction],
    ['rejected_transactions', __dyn_VecVersionedRejectedTransaction],
    ['event_recommendations', __dyn_VecEvent]
]);
const BurnBox = createStructCodec('BurnBox', [
    ['object', __dyn_EvaluatesToValue],
    ['destination_id', __dyn_EvaluatesToIdBox]
]);
const CommitTimeout = createStructCodec('CommitTimeout', [
    ['hash', __dyn_HashOfVersionedValidBlock]
]);
const CommittedBlock = createStructCodec('CommittedBlock', [
    ['header', __dyn_BlockHeader],
    ['rejected_transactions', __dyn_VecVersionedRejectedTransaction],
    ['transactions', __dyn_VecVersionedValidTransaction],
    ['event_recommendations', __dyn_VecEvent],
    ['signatures', __dyn_SignaturesOfCommittedBlock]
]);
const Container = createEnumCodec('Container', [
    [0, 'Any', __dyn_Predicate],
    [1, 'All', __dyn_Predicate],
    [2, 'AtIndex', __dyn_AtIndex],
    [3, 'ValueOfKey', __dyn_ValueOfKey],
    [4, 'HasKey', __dyn_Name]
]);
const Contains = createStructCodec('Contains', [
    ['collection', __dyn_EvaluatesToVecValue],
    ['element', __dyn_EvaluatesToValue]
]);
const ContainsAll = createStructCodec('ContainsAll', [
    ['collection', __dyn_EvaluatesToVecValue],
    ['elements', __dyn_EvaluatesToVecValue]
]);
const ContainsAny = createStructCodec('ContainsAny', [
    ['collection', __dyn_EvaluatesToVecValue],
    ['elements', __dyn_EvaluatesToVecValue]
]);
const ContextValue = createStructCodec('ContextValue', [
    ['value_name', Str]
]);
const DataEvent = createEnumCodec('DataEvent', [
    [0, 'Peer', __dyn_PeerEvent],
    [1, 'Domain', __dyn_DomainEvent],
    [2, 'Account', __dyn_AccountEvent],
    [3, 'AssetDefinition', __dyn_AssetDefinitionEvent],
    [4, 'Asset', __dyn_AssetEvent],
    [5, 'Trigger', __dyn_TriggerEvent],
    [6, 'Role', __dyn_RoleEvent]
]);
const DenialReason = createEnumCodec('DenialReason', [
    [0, 'ValidatorTypeMismatch', __dyn_MismatchValidatorType],
    [1, 'Custom', Str],
    [2, 'NoValidatorsProvided']
]);
const Divide = createStructCodec('Divide', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const Domain = createStructCodec('Domain', [
    ['id', __dyn_DomainId],
    ['accounts', __dyn_MapAccountIdAccount],
    ['asset_definitions', __dyn_MapAssetDefinitionIdAssetDefinitionEntry],
    ['logo', __dyn_OptionIpfsPath],
    ['metadata', __dyn_Metadata]
]);
const DomainEvent = createEnumCodec('DomainEvent', [
    [0, 'Account', __dyn_AccountEvent],
    [1, 'AssetDefinition', __dyn_AssetDefinitionEvent],
    [2, 'Created', __dyn_DomainId],
    [3, 'Deleted', __dyn_DomainId],
    [4, 'MetadataInserted', __dyn_DomainId],
    [5, 'MetadataRemoved', __dyn_DomainId]
]);
const DomainEventFilter = createEnumCodec('DomainEventFilter', [
    [0, 'ByAccount', __dyn_FilterOptAccountFilter],
    [1, 'ByAssetDefinition', __dyn_FilterOptAssetDefinitionFilter],
    [2, 'ByCreated'],
    [3, 'ByDeleted'],
    [4, 'ByMetadataInserted'],
    [5, 'ByMetadataRemoved']
]);
const DomainFilter = createStructCodec('DomainFilter', [
    ['id_filter', __dyn_FilterOptIdFilterDomainId],
    ['event_filter', __dyn_FilterOptDomainEventFilter]
]);
const DomainId = createStructCodec('DomainId', [
    ['name', __dyn_Name]
]);
const Duration = createTupleCodec('Duration', [U64, U32]);
const EntityFilter = createEnumCodec('EntityFilter', [
    [0, 'ByPeer', __dyn_FilterOptPeerFilter],
    [1, 'ByDomain', __dyn_FilterOptDomainFilter],
    [2, 'ByAccount', __dyn_FilterOptAccountFilter],
    [3, 'ByAssetDefinition', __dyn_FilterOptAssetDefinitionFilter],
    [4, 'ByAsset', __dyn_FilterOptAssetFilter],
    [5, 'ByTrigger', __dyn_FilterOptTriggerFilter],
    [6, 'ByRole', __dyn_FilterOptRoleFilter]
]);
const Equal = createStructCodec('Equal', [
    ['left', __dyn_EvaluatesToValue],
    ['right', __dyn_EvaluatesToValue]
]);
const EvaluatesToAccountId = createStructCodec('EvaluatesToAccountId', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToAssetDefinitionId = createStructCodec('EvaluatesToAssetDefinitionId', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToAssetId = createStructCodec('EvaluatesToAssetId', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToBool = createStructCodec('EvaluatesToBool', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToDomainId = createStructCodec('EvaluatesToDomainId', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToHash = createStructCodec('EvaluatesToHash', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToIdBox = createStructCodec('EvaluatesToIdBox', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToName = createStructCodec('EvaluatesToName', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToRegistrableBox = createStructCodec('EvaluatesToRegistrableBox', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToRoleId = createStructCodec('EvaluatesToRoleId', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToTriggerId = createStructCodec('EvaluatesToTriggerId', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToU32 = createStructCodec('EvaluatesToU32', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToValue = createStructCodec('EvaluatesToValue', [
    ['expression', __dyn_Expression]
]);
const EvaluatesToVecValue = createStructCodec('EvaluatesToVecValue', [
    ['expression', __dyn_Expression]
]);
const Event = createEnumCodec('Event', [
    [0, 'Pipeline', __dyn_PipelineEvent],
    [1, 'Data', __dyn_DataEvent],
    [2, 'Time', __dyn_TimeEvent],
    [3, 'ExecuteTrigger', __dyn_ExecuteTriggerEvent]
]);
const EventPublisherMessage = createEnumCodec('EventPublisherMessage', [
    [0, 'SubscriptionAccepted'],
    [1, 'Event', __dyn_Event]
]);
const EventSubscriberMessage = createEnumCodec('EventSubscriberMessage', [
    [0, 'SubscriptionRequest', __dyn_FilterBox],
    [1, 'EventReceived']
]);
const Executable = createEnumCodec('Executable', [
    [0, 'Instructions', __dyn_VecInstruction],
    [1, 'Wasm', __dyn_WasmSmartContract]
]);
const ExecuteTriggerBox = createStructCodec('ExecuteTriggerBox', [
    ['trigger_id', __dyn_TriggerId]
]);
const ExecuteTriggerEvent = createStructCodec('ExecuteTriggerEvent', [
    ['trigger_id', __dyn_TriggerId],
    ['authority', __dyn_AccountId]
]);
const ExecuteTriggerEventFilter = createStructCodec('ExecuteTriggerEventFilter', [
    ['trigger_id', __dyn_TriggerId],
    ['authority', __dyn_AccountId]
]);
const ExecutionTime = createEnumCodec('ExecutionTime', [
    [0, 'PreCommit'],
    [1, 'Schedule', __dyn_TimeSchedule]
]);
const Expression = createEnumCodec('Expression', [
    [0, 'Add', __dyn_Add],
    [1, 'Subtract', __dyn_Subtract],
    [2, 'Multiply', __dyn_Multiply],
    [3, 'Divide', __dyn_Divide],
    [4, 'Mod', __dyn_Mod],
    [5, 'RaiseTo', __dyn_RaiseTo],
    [6, 'Greater', __dyn_Greater],
    [7, 'Less', __dyn_Less],
    [8, 'Equal', __dyn_Equal],
    [9, 'Not', __dyn_Not],
    [10, 'And', __dyn_And],
    [11, 'Or', __dyn_Or],
    [12, 'If', __dyn_IfExpression],
    [13, 'Raw', __dyn_Value],
    [14, 'Query', __dyn_QueryBox],
    [15, 'Contains', __dyn_Contains],
    [16, 'ContainsAll', __dyn_ContainsAll],
    [17, 'ContainsAny', __dyn_ContainsAny],
    [18, 'Where', __dyn_Where],
    [19, 'ContextValue', __dyn_ContextValue]
]);
const FailBox = createStructCodec('FailBox', [
    ['message', Str]
]);
const FilterBox = createEnumCodec('FilterBox', [
    [0, 'Pipeline', __dyn_PipelineEventFilter],
    [1, 'Data', __dyn_FilterOptEntityFilter],
    [2, 'Time', __dyn_TimeEventFilter],
    [3, 'ExecuteTrigger', __dyn_ExecuteTriggerEventFilter]
]);
const FilterOptAccountEventFilter = createEnumCodec('FilterOptAccountEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_AccountEventFilter]
]);
const FilterOptAccountFilter = createEnumCodec('FilterOptAccountFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_AccountFilter]
]);
const FilterOptAssetDefinitionEventFilter = createEnumCodec('FilterOptAssetDefinitionEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_AssetDefinitionEventFilter]
]);
const FilterOptAssetDefinitionFilter = createEnumCodec('FilterOptAssetDefinitionFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_AssetDefinitionFilter]
]);
const FilterOptAssetEventFilter = createEnumCodec('FilterOptAssetEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_AssetEventFilter]
]);
const FilterOptAssetFilter = createEnumCodec('FilterOptAssetFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_AssetFilter]
]);
const FilterOptDomainEventFilter = createEnumCodec('FilterOptDomainEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_DomainEventFilter]
]);
const FilterOptDomainFilter = createEnumCodec('FilterOptDomainFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_DomainFilter]
]);
const FilterOptEntityFilter = createEnumCodec('FilterOptEntityFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_EntityFilter]
]);
const FilterOptIdFilterAccountId = createEnumCodec('FilterOptIdFilterAccountId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterAccountId]
]);
const FilterOptIdFilterAssetDefinitionId = createEnumCodec('FilterOptIdFilterAssetDefinitionId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterAssetDefinitionId]
]);
const FilterOptIdFilterAssetId = createEnumCodec('FilterOptIdFilterAssetId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterAssetId]
]);
const FilterOptIdFilterDomainId = createEnumCodec('FilterOptIdFilterDomainId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterDomainId]
]);
const FilterOptIdFilterPeerId = createEnumCodec('FilterOptIdFilterPeerId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterPeerId]
]);
const FilterOptIdFilterRoleId = createEnumCodec('FilterOptIdFilterRoleId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterRoleId]
]);
const FilterOptIdFilterTriggerId = createEnumCodec('FilterOptIdFilterTriggerId', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_IdFilterTriggerId]
]);
const FilterOptPeerEventFilter = createEnumCodec('FilterOptPeerEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_PeerEventFilter]
]);
const FilterOptPeerFilter = createEnumCodec('FilterOptPeerFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_PeerFilter]
]);
const FilterOptRoleEventFilter = createEnumCodec('FilterOptRoleEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_RoleEventFilter]
]);
const FilterOptRoleFilter = createEnumCodec('FilterOptRoleFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_RoleFilter]
]);
const FilterOptTriggerEventFilter = createEnumCodec('FilterOptTriggerEventFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_TriggerEventFilter]
]);
const FilterOptTriggerFilter = createEnumCodec('FilterOptTriggerFilter', [
    [0, 'AcceptAll'],
    [1, 'BySome', __dyn_TriggerFilter]
]);
const FindAccountById = createStructCodec('FindAccountById', [
    ['id', __dyn_EvaluatesToAccountId]
]);
const FindAccountKeyValueByIdAndKey = createStructCodec('FindAccountKeyValueByIdAndKey', [
    ['id', __dyn_EvaluatesToAccountId],
    ['key', __dyn_EvaluatesToName]
]);
const FindAccountsByDomainId = createStructCodec('FindAccountsByDomainId', [
    ['domain_id', __dyn_EvaluatesToDomainId]
]);
const FindAccountsByName = createStructCodec('FindAccountsByName', [
    ['name', __dyn_EvaluatesToName]
]);
const FindAccountsWithAsset = createStructCodec('FindAccountsWithAsset', [
    ['asset_definition_id', __dyn_EvaluatesToAssetDefinitionId]
]);
const FindAssetById = createStructCodec('FindAssetById', [
    ['id', __dyn_EvaluatesToAssetId]
]);
const FindAssetDefinitionById = createStructCodec('FindAssetDefinitionById', [
    ['id', __dyn_EvaluatesToAssetDefinitionId]
]);
const FindAssetDefinitionKeyValueByIdAndKey = createStructCodec('FindAssetDefinitionKeyValueByIdAndKey', [
    ['id', __dyn_EvaluatesToAssetDefinitionId],
    ['key', __dyn_EvaluatesToName]
]);
const FindAssetKeyValueByIdAndKey = createStructCodec('FindAssetKeyValueByIdAndKey', [
    ['id', __dyn_EvaluatesToAssetId],
    ['key', __dyn_EvaluatesToName]
]);
const FindAssetQuantityById = createStructCodec('FindAssetQuantityById', [
    ['id', __dyn_EvaluatesToAssetId]
]);
const FindAssetsByAccountId = createStructCodec('FindAssetsByAccountId', [
    ['account_id', __dyn_EvaluatesToAccountId]
]);
const FindAssetsByAssetDefinitionId = createStructCodec('FindAssetsByAssetDefinitionId', [
    ['asset_definition_id', __dyn_EvaluatesToAssetDefinitionId]
]);
const FindAssetsByDomainId = createStructCodec('FindAssetsByDomainId', [
    ['domain_id', __dyn_EvaluatesToDomainId]
]);
const FindAssetsByDomainIdAndAssetDefinitionId = createStructCodec('FindAssetsByDomainIdAndAssetDefinitionId', [
    ['domain_id', __dyn_EvaluatesToDomainId],
    ['asset_definition_id', __dyn_EvaluatesToAssetDefinitionId]
]);
const FindAssetsByName = createStructCodec('FindAssetsByName', [
    ['name', __dyn_EvaluatesToName]
]);
const FindDomainById = createStructCodec('FindDomainById', [
    ['id', __dyn_EvaluatesToDomainId]
]);
const FindDomainKeyValueByIdAndKey = createStructCodec('FindDomainKeyValueByIdAndKey', [
    ['id', __dyn_EvaluatesToDomainId],
    ['key', __dyn_EvaluatesToName]
]);
const FindError = createEnumCodec('FindError', [
    [0, 'Asset', __dyn_AssetId],
    [1, 'AssetDefinition', __dyn_AssetDefinitionId],
    [2, 'Account', __dyn_AccountId],
    [3, 'Domain', __dyn_DomainId],
    [4, 'MetadataKey', __dyn_Name],
    [5, 'Block', __dyn_HashOfVersionedCommittedBlock],
    [6, 'Transaction', __dyn_HashOfVersionedTransaction],
    [7, 'Context', Str],
    [8, 'Peer', __dyn_PeerId],
    [9, 'Trigger', __dyn_TriggerId],
    [10, 'Role', __dyn_RoleId]
]);
const FindPermissionTokensByAccountId = createStructCodec('FindPermissionTokensByAccountId', [
    ['id', __dyn_EvaluatesToAccountId]
]);
const FindRoleByRoleId = createStructCodec('FindRoleByRoleId', [
    ['id', __dyn_EvaluatesToRoleId]
]);
const FindRolesByAccountId = createStructCodec('FindRolesByAccountId', [
    ['id', __dyn_EvaluatesToAccountId]
]);
const FindTransactionByHash = createStructCodec('FindTransactionByHash', [
    ['hash', __dyn_EvaluatesToHash]
]);
const FindTransactionsByAccountId = createStructCodec('FindTransactionsByAccountId', [
    ['account_id', __dyn_EvaluatesToAccountId]
]);
const FindTriggerById = createStructCodec('FindTriggerById', [
    ['id', __dyn_EvaluatesToTriggerId]
]);
const FindTriggerKeyValueByIdAndKey = createStructCodec('FindTriggerKeyValueByIdAndKey', [
    ['id', __dyn_EvaluatesToTriggerId],
    ['key', __dyn_EvaluatesToName]
]);
const FindTriggersByDomainId = createStructCodec('FindTriggersByDomainId', [
    ['domain_id', __dyn_EvaluatesToDomainId]
]);
const Fixed = __dyn_FixedPointI64;
const GenesisTransaction = createStructCodec('GenesisTransaction', [
    ['isi', __dyn_VecInstruction]
]);
const GrantBox = createStructCodec('GrantBox', [
    ['object', __dyn_EvaluatesToValue],
    ['destination_id', __dyn_EvaluatesToIdBox]
]);
const Greater = createStructCodec('Greater', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const Hash = __dyn_ArrayU8L32;
const HashOfMerkleTreeVersionedTransaction = __dyn_Hash;
const HashOfProof = __dyn_Hash;
const HashOfVersionedCommittedBlock = __dyn_Hash;
const HashOfVersionedTransaction = __dyn_Hash;
const HashOfVersionedValidBlock = __dyn_Hash;
const IdBox = createEnumCodec('IdBox', [
    [0, 'DomainId', __dyn_DomainId],
    [1, 'AccountId', __dyn_AccountId],
    [2, 'AssetDefinitionId', __dyn_AssetDefinitionId],
    [3, 'AssetId', __dyn_AssetId],
    [4, 'PeerId', __dyn_PeerId],
    [5, 'TriggerId', __dyn_TriggerId],
    [6, 'RoleId', __dyn_RoleId]
]);
const IdFilterAccountId = __dyn_AccountId;
const IdFilterAssetDefinitionId = __dyn_AssetDefinitionId;
const IdFilterAssetId = __dyn_AssetId;
const IdFilterDomainId = __dyn_DomainId;
const IdFilterPeerId = __dyn_PeerId;
const IdFilterRoleId = __dyn_RoleId;
const IdFilterTriggerId = __dyn_TriggerId;
const IdentifiableBox = createEnumCodec('IdentifiableBox', [
    [0, 'NewDomain', __dyn_NewDomain],
    [1, 'NewAccount', __dyn_NewAccount],
    [2, 'NewAssetDefinition', __dyn_NewAssetDefinition],
    [3, 'NewRole', __dyn_NewRole],
    [4, 'Peer', __dyn_Peer],
    [5, 'Domain', __dyn_Domain],
    [6, 'Account', __dyn_Account],
    [7, 'AssetDefinition', __dyn_AssetDefinition],
    [8, 'Asset', __dyn_Asset],
    [9, 'Trigger', __dyn_TriggerFilterBox],
    [10, 'Role', __dyn_Role]
]);
const IfExpression = createStructCodec('IfExpression', [
    ['condition', __dyn_EvaluatesToBool],
    ['then_expression', __dyn_EvaluatesToValue],
    ['else_expression', __dyn_EvaluatesToValue]
]);
const IfInstruction = createStructCodec('IfInstruction', [
    ['condition', __dyn_EvaluatesToBool],
    ['then', __dyn_Instruction],
    ['otherwise', __dyn_OptionInstruction]
]);
const Instruction = createEnumCodec('Instruction', [
    [0, 'Register', __dyn_RegisterBox],
    [1, 'Unregister', __dyn_UnregisterBox],
    [2, 'Mint', __dyn_MintBox],
    [3, 'Burn', __dyn_BurnBox],
    [4, 'Transfer', __dyn_TransferBox],
    [5, 'If', __dyn_IfInstruction],
    [6, 'Pair', __dyn_Pair],
    [7, 'Sequence', __dyn_SequenceBox],
    [8, 'Fail', __dyn_FailBox],
    [9, 'SetKeyValue', __dyn_SetKeyValueBox],
    [10, 'RemoveKeyValue', __dyn_RemoveKeyValueBox],
    [11, 'Grant', __dyn_GrantBox],
    [12, 'Revoke', __dyn_RevokeBox],
    [13, 'ExecuteTrigger', __dyn_ExecuteTriggerBox]
]);
const InstructionExecutionFail = createStructCodec('InstructionExecutionFail', [
    ['instruction', __dyn_Instruction],
    ['reason', Str]
]);
const IpfsPath = Str;
const Less = createStructCodec('Less', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const MapAccountIdAccount = createMapCodec('MapAccountIdAccount', __dyn_AccountId, __dyn_Account);
const MapAssetDefinitionIdAssetDefinitionEntry = createMapCodec('MapAssetDefinitionIdAssetDefinitionEntry', __dyn_AssetDefinitionId, __dyn_AssetDefinitionEntry);
const MapAssetIdAsset = createMapCodec('MapAssetIdAsset', __dyn_AssetId, __dyn_Asset);
const MapNameValue = createMapCodec('MapNameValue', __dyn_Name, __dyn_Value);
const MapPublicKeySignatureOfCommittedBlock = createMapCodec('MapPublicKeySignatureOfCommittedBlock', __dyn_PublicKey, __dyn_SignatureOfCommittedBlock);
const MapPublicKeySignatureOfProof = createMapCodec('MapPublicKeySignatureOfProof', __dyn_PublicKey, __dyn_SignatureOfProof);
const MapPublicKeySignatureOfTransactionPayload = createMapCodec('MapPublicKeySignatureOfTransactionPayload', __dyn_PublicKey, __dyn_SignatureOfTransactionPayload);
const MapStringEvaluatesToValue = createMapCodec('MapStringEvaluatesToValue', Str, __dyn_EvaluatesToValue);
const MerkleTreeVersionedTransaction = createVecCodec('MerkleTreeVersionedTransaction', __dyn_HashOfVersionedTransaction);
const Metadata = createStructCodec('Metadata', [
    ['map', __dyn_MapNameValue]
]);
const MintBox = createStructCodec('MintBox', [
    ['object', __dyn_EvaluatesToValue],
    ['destination_id', __dyn_EvaluatesToIdBox]
]);
const Mintable = createEnumCodec('Mintable', [
    [0, 'Infinitely'],
    [1, 'Once'],
    [2, 'Not']
]);
const MismatchValidatorType = createStructCodec('MismatchValidatorType', [
    ['expected', __dyn_ValidatorType],
    ['actual', __dyn_ValidatorType]
]);
const Mod = createStructCodec('Mod', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const Multiply = createStructCodec('Multiply', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const Name = Str;
const NewAccount = createStructCodec('NewAccount', [
    ['id', __dyn_AccountId],
    ['signatories', __dyn_VecPublicKey],
    ['metadata', __dyn_Metadata]
]);
const NewAssetDefinition = createStructCodec('NewAssetDefinition', [
    ['id', __dyn_AssetDefinitionId],
    ['value_type', __dyn_AssetValueType],
    ['mintable', __dyn_Mintable],
    ['metadata', __dyn_Metadata]
]);
const NewDomain = createStructCodec('NewDomain', [
    ['id', __dyn_DomainId],
    ['logo', __dyn_OptionIpfsPath],
    ['metadata', __dyn_Metadata]
]);
const NewRole = createStructCodec('NewRole', [
    ['inner', __dyn_Role]
]);
const Not = createStructCodec('Not', [
    ['expression', __dyn_EvaluatesToBool]
]);
const NotPermittedFail = createStructCodec('NotPermittedFail', [
    ['reason', Str]
]);
const OptionDuration = createOptionCodec('OptionDuration', __dyn_Duration);
const OptionHash = createOptionCodec('OptionHash', __dyn_Hash);
const OptionInstruction = createOptionCodec('OptionInstruction', __dyn_Instruction);
const OptionIpfsPath = createOptionCodec('OptionIpfsPath', __dyn_IpfsPath);
const OptionPipelineEntityKind = createOptionCodec('OptionPipelineEntityKind', __dyn_PipelineEntityKind);
const OptionPipelineStatusKind = createOptionCodec('OptionPipelineStatusKind', __dyn_PipelineStatusKind);
const OptionTimeInterval = createOptionCodec('OptionTimeInterval', __dyn_TimeInterval);
const OptionTopology = createOptionCodec('OptionTopology', __dyn_Topology);
const OptionU32 = createOptionCodec('OptionU32', U32);
const Or = createStructCodec('Or', [
    ['left', __dyn_EvaluatesToBool],
    ['right', __dyn_EvaluatesToBool]
]);
const PaginatedQueryResult = createStructCodec('PaginatedQueryResult', [
    ['result', __dyn_QueryResult],
    ['filter', __dyn_PredicateBox],
    ['pagination', __dyn_Pagination],
    ['total', U64]
]);
const Pagination = createStructCodec('Pagination', [
    ['start', __dyn_OptionU32],
    ['limit', __dyn_OptionU32]
]);
const Pair = createStructCodec('Pair', [
    ['left_instruction', __dyn_Instruction],
    ['right_instruction', __dyn_Instruction]
]);
const Parameter = createEnumCodec('Parameter', [
    [0, 'MaximumFaultyPeersAmount', U32],
    [1, 'BlockTime', U128],
    [2, 'CommitTime', U128],
    [3, 'TransactionReceiptTime', U128]
]);
const Peer = createStructCodec('Peer', [
    ['id', __dyn_PeerId]
]);
const PeerEvent = createEnumCodec('PeerEvent', [
    [0, 'Added', __dyn_PeerId],
    [1, 'Removed', __dyn_PeerId]
]);
const PeerEventFilter = createEnumCodec('PeerEventFilter', [
    [0, 'ByAdded'],
    [1, 'ByRemoved']
]);
const PeerFilter = createStructCodec('PeerFilter', [
    ['id_filter', __dyn_FilterOptIdFilterPeerId],
    ['event_filter', __dyn_FilterOptPeerEventFilter]
]);
const PeerId = createStructCodec('PeerId', [
    ['address', Str],
    ['public_key', __dyn_PublicKey]
]);
const PermissionToken = createStructCodec('PermissionToken', [
    ['name', __dyn_Name],
    ['params', __dyn_MapNameValue]
]);
const PipelineEntityKind = createEnumCodec('PipelineEntityKind', [
    [0, 'Block'],
    [1, 'Transaction']
]);
const PipelineEvent = createStructCodec('PipelineEvent', [
    ['entity_kind', __dyn_PipelineEntityKind],
    ['status', __dyn_PipelineStatus],
    ['hash', __dyn_Hash]
]);
const PipelineEventFilter = createStructCodec('PipelineEventFilter', [
    ['entity_kind', __dyn_OptionPipelineEntityKind],
    ['status_kind', __dyn_OptionPipelineStatusKind],
    ['hash', __dyn_OptionHash]
]);
const PipelineStatus = createEnumCodec('PipelineStatus', [
    [0, 'Validating'],
    [1, 'Rejected', __dyn_RejectionReason],
    [2, 'Committed']
]);
const PipelineStatusKind = createEnumCodec('PipelineStatusKind', [
    [0, 'Validating'],
    [1, 'Rejected'],
    [2, 'Committed']
]);
const Predicate = createEnumCodec('Predicate', [
    [0, 'Identifiable', __dyn_Predicate],
    [1, 'Container', __dyn_Container],
    [2, 'Display', __dyn_Predicate],
    [3, 'Numerical', __dyn_Range],
    [4, 'TimeStamp', __dyn_SemiIntervalU128],
    [5, 'Pass']
]);
const PredicateBox = createEnumCodec('PredicateBox', [
    [0, 'And', __dyn_VecPredicateBox],
    [1, 'Or', __dyn_VecPredicateBox],
    [2, 'Not', __dyn_PredicateBox],
    [3, 'Raw', __dyn_Predicate]
]);
const Proof = createStructCodec('Proof', [
    ['payload', __dyn_ProofPayload],
    ['signatures', __dyn_SignaturesOfProof]
]);
const ProofChain = createStructCodec('ProofChain', [
    ['proofs', __dyn_VecProof]
]);
const ProofPayload = createStructCodec('ProofPayload', [
    ['previous_proof', __dyn_HashOfProof],
    ['latest_block', __dyn_HashOfVersionedCommittedBlock],
    ['reason', __dyn_Reason]
]);
const PublicKey = createStructCodec('PublicKey', [
    ['digest_function', Str],
    ['payload', VecU8]
]);
const QueryBox = createEnumCodec('QueryBox', [
    [0, 'FindAllAccounts', __dyn_FindAllAccounts],
    [1, 'FindAccountById', __dyn_FindAccountById],
    [2, 'FindAccountKeyValueByIdAndKey', __dyn_FindAccountKeyValueByIdAndKey],
    [3, 'FindAccountsByName', __dyn_FindAccountsByName],
    [4, 'FindAccountsByDomainId', __dyn_FindAccountsByDomainId],
    [5, 'FindAccountsWithAsset', __dyn_FindAccountsWithAsset],
    [6, 'FindAllAssets', __dyn_FindAllAssets],
    [7, 'FindAllAssetsDefinitions', __dyn_FindAllAssetsDefinitions],
    [8, 'FindAssetById', __dyn_FindAssetById],
    [9, 'FindAssetDefinitionById', __dyn_FindAssetDefinitionById],
    [10, 'FindAssetsByName', __dyn_FindAssetsByName],
    [11, 'FindAssetsByAccountId', __dyn_FindAssetsByAccountId],
    [12, 'FindAssetsByAssetDefinitionId', __dyn_FindAssetsByAssetDefinitionId],
    [13, 'FindAssetsByDomainId', __dyn_FindAssetsByDomainId],
    [14, 'FindAssetsByDomainIdAndAssetDefinitionId', __dyn_FindAssetsByDomainIdAndAssetDefinitionId],
    [15, 'FindAssetQuantityById', __dyn_FindAssetQuantityById],
    [16, 'FindAssetKeyValueByIdAndKey', __dyn_FindAssetKeyValueByIdAndKey],
    [17, 'FindAssetDefinitionKeyValueByIdAndKey', __dyn_FindAssetDefinitionKeyValueByIdAndKey],
    [18, 'FindAllDomains', __dyn_FindAllDomains],
    [19, 'FindDomainById', __dyn_FindDomainById],
    [20, 'FindDomainKeyValueByIdAndKey', __dyn_FindDomainKeyValueByIdAndKey],
    [21, 'FindAllPeers', __dyn_FindAllPeers],
    [22, 'FindAllBlocks', __dyn_FindAllBlocks],
    [23, 'FindAllTransactions', __dyn_FindAllTransactions],
    [24, 'FindTransactionsByAccountId', __dyn_FindTransactionsByAccountId],
    [25, 'FindTransactionByHash', __dyn_FindTransactionByHash],
    [26, 'FindPermissionTokensByAccountId', __dyn_FindPermissionTokensByAccountId],
    [27, 'FindAllActiveTriggerIds', __dyn_FindAllActiveTriggerIds],
    [28, 'FindTriggerById', __dyn_FindTriggerById],
    [29, 'FindTriggerKeyValueByIdAndKey', __dyn_FindTriggerKeyValueByIdAndKey],
    [30, 'FindTriggersByDomainId', __dyn_FindTriggersByDomainId],
    [31, 'FindAllRoles', __dyn_FindAllRoles],
    [32, 'FindAllRoleIds', __dyn_FindAllRoleIds],
    [33, 'FindRoleByRoleId', __dyn_FindRoleByRoleId],
    [34, 'FindRolesByAccountId', __dyn_FindRolesByAccountId]
]);
const QueryError = createEnumCodec('QueryError', [
    [0, 'Decode', __dyn_VersionError],
    [1, 'Signature', Str],
    [2, 'Permission', __dyn_DenialReason],
    [3, 'Evaluate', Str],
    [4, 'Find', __dyn_FindError],
    [5, 'Conversion', Str]
]);
const QueryPayload = createStructCodec('QueryPayload', [
    ['timestamp_ms', Compact],
    ['query', __dyn_QueryBox],
    ['account_id', __dyn_AccountId],
    ['filter', __dyn_PredicateBox]
]);
const QueryResult = __dyn_Value;
const RaiseTo = createStructCodec('RaiseTo', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const Range = createEnumCodec('Range', [
    [0, 'U32', __dyn_SemiIntervalU32],
    [1, 'U128', __dyn_SemiIntervalU128],
    [2, 'Fixed', __dyn_SemiIntervalFixed]
]);
const RawGenesisBlock = createStructCodec('RawGenesisBlock', [
    ['transactions', __dyn_VecGenesisTransaction]
]);
const RawVersioned = createEnumCodec('RawVersioned', [
    [0, 'Json', Str],
    [1, 'ScaleBytes', VecU8]
]);
const Reason = createEnumCodec('Reason', [
    [0, 'CommitTimeout', __dyn_CommitTimeout],
    [1, 'NoTransactionReceiptReceived', __dyn_NoTransactionReceiptReceived],
    [2, 'BlockCreationTimeout', __dyn_BlockCreationTimeout]
]);
const RegisterBox = createStructCodec('RegisterBox', [
    ['object', __dyn_EvaluatesToRegistrableBox]
]);
const RegistrableBox = createEnumCodec('RegistrableBox', [
    [0, 'Peer', __dyn_Peer],
    [1, 'Domain', __dyn_NewDomain],
    [2, 'Account', __dyn_NewAccount],
    [3, 'AssetDefinition', __dyn_NewAssetDefinition],
    [4, 'Asset', __dyn_Asset],
    [5, 'Trigger', __dyn_TriggerFilterBox],
    [6, 'Role', __dyn_NewRole]
]);
const RejectedTransaction = createStructCodec('RejectedTransaction', [
    ['payload', __dyn_TransactionPayload],
    ['signatures', __dyn_SignaturesOfTransactionPayload],
    ['rejection_reason', __dyn_TransactionRejectionReason]
]);
const RejectionReason = createEnumCodec('RejectionReason', [
    [0, 'Block', __dyn_BlockRejectionReason],
    [1, 'Transaction', __dyn_TransactionRejectionReason]
]);
const RemoveKeyValueBox = createStructCodec('RemoveKeyValueBox', [
    ['object_id', __dyn_EvaluatesToIdBox],
    ['key', __dyn_EvaluatesToName]
]);
const Repeats = createEnumCodec('Repeats', [
    [0, 'Indefinitely'],
    [1, 'Exactly', U32]
]);
const RevokeBox = createStructCodec('RevokeBox', [
    ['object', __dyn_EvaluatesToValue],
    ['destination_id', __dyn_EvaluatesToIdBox]
]);
const Role = createStructCodec('Role', [
    ['id', __dyn_RoleId],
    ['permissions', __dyn_VecPermissionToken]
]);
const RoleEvent = createEnumCodec('RoleEvent', [
    [0, 'Created', __dyn_RoleId],
    [1, 'Deleted', __dyn_RoleId]
]);
const RoleEventFilter = createEnumCodec('RoleEventFilter', [
    [0, 'ByCreated'],
    [1, 'ByDeleted']
]);
const RoleFilter = createStructCodec('RoleFilter', [
    ['id_filter', __dyn_FilterOptIdFilterRoleId],
    ['event_filter', __dyn_FilterOptRoleEventFilter]
]);
const RoleId = createStructCodec('RoleId', [
    ['name', __dyn_Name]
]);
const SemiIntervalFixed = createStructCodec('SemiIntervalFixed', [
    ['start', __dyn_Fixed],
    ['limit', __dyn_Fixed]
]);
const SemiIntervalU128 = createStructCodec('SemiIntervalU128', [
    ['start', U128],
    ['limit', U128]
]);
const SemiIntervalU32 = createStructCodec('SemiIntervalU32', [
    ['start', U32],
    ['limit', U32]
]);
const SequenceBox = createStructCodec('SequenceBox', [
    ['instructions', __dyn_VecInstruction]
]);
const SetKeyValueBox = createStructCodec('SetKeyValueBox', [
    ['object_id', __dyn_EvaluatesToIdBox],
    ['key', __dyn_EvaluatesToName],
    ['value', __dyn_EvaluatesToValue]
]);
const Signature = createStructCodec('Signature', [
    ['public_key', __dyn_PublicKey],
    ['payload', VecU8]
]);
const SignatureCheckCondition = __dyn_EvaluatesToBool;
const SignatureOfCommittedBlock = __dyn_Signature;
const SignatureOfProof = __dyn_Signature;
const SignatureOfQueryPayload = __dyn_Signature;
const SignatureOfTransactionPayload = __dyn_Signature;
const SignatureOfValidBlock = __dyn_Signature;
const SignaturesOfCommittedBlock = createStructCodec('SignaturesOfCommittedBlock', [
    ['signatures', __dyn_MapPublicKeySignatureOfCommittedBlock]
]);
const SignaturesOfProof = createStructCodec('SignaturesOfProof', [
    ['signatures', __dyn_MapPublicKeySignatureOfProof]
]);
const SignaturesOfTransactionPayload = createStructCodec('SignaturesOfTransactionPayload', [
    ['signatures', __dyn_MapPublicKeySignatureOfTransactionPayload]
]);
const SignedQueryRequest = createStructCodec('SignedQueryRequest', [
    ['payload', __dyn_QueryPayload],
    ['signature', __dyn_SignatureOfQueryPayload]
]);
const Subtract = createStructCodec('Subtract', [
    ['left', __dyn_EvaluatesToU32],
    ['right', __dyn_EvaluatesToU32]
]);
const TimeEvent = createStructCodec('TimeEvent', [
    ['prev_interval', __dyn_OptionTimeInterval],
    ['interval', __dyn_TimeInterval]
]);
const TimeEventFilter = __dyn_ExecutionTime;
const TimeInterval = createStructCodec('TimeInterval', [
    ['since', __dyn_Duration],
    ['length', __dyn_Duration]
]);
const TimeSchedule = createStructCodec('TimeSchedule', [
    ['start', __dyn_Duration],
    ['period', __dyn_OptionDuration]
]);
const Topology = createStructCodec('Topology', [
    ['sorted_peers', __dyn_VecPeerId],
    ['at_block', __dyn_HashOfVersionedCommittedBlock],
    ['view_change_proofs', __dyn_ProofChain]
]);
const Transaction = createStructCodec('Transaction', [
    ['payload', __dyn_TransactionPayload],
    ['signatures', __dyn_VecSignatureOfTransactionPayload]
]);
const TransactionLimitError = Str;
const TransactionPayload = createStructCodec('TransactionPayload', [
    ['account_id', __dyn_AccountId],
    ['instructions', __dyn_Executable],
    ['creation_time', U64],
    ['time_to_live_ms', U64],
    ['nonce', __dyn_OptionU32],
    ['metadata', __dyn_MapNameValue]
]);
const TransactionRejectionReason = createEnumCodec('TransactionRejectionReason', [
    [0, 'NotPermitted', __dyn_NotPermittedFail],
    [1, 'UnsatisfiedSignatureCondition', __dyn_UnsatisfiedSignatureConditionFail],
    [2, 'LimitCheck', __dyn_TransactionLimitError],
    [3, 'InstructionExecution', __dyn_InstructionExecutionFail],
    [4, 'WasmExecution', __dyn_WasmExecutionFail],
    [5, 'UnexpectedGenesisAccountSignature']
]);
const TransactionValue = createEnumCodec('TransactionValue', [
    [0, 'Transaction', __dyn_VersionedTransaction],
    [1, 'RejectedTransaction', __dyn_VersionedRejectedTransaction]
]);
const TransferBox = createStructCodec('TransferBox', [
    ['source_id', __dyn_EvaluatesToIdBox],
    ['object', __dyn_EvaluatesToValue],
    ['destination_id', __dyn_EvaluatesToIdBox]
]);
const TriggerEvent = createEnumCodec('TriggerEvent', [
    [0, 'Created', __dyn_TriggerId],
    [1, 'Deleted', __dyn_TriggerId],
    [2, 'Extended', __dyn_TriggerId],
    [3, 'Shortened', __dyn_TriggerId]
]);
const TriggerEventFilter = createEnumCodec('TriggerEventFilter', [
    [0, 'ByCreated'],
    [1, 'ByDeleted'],
    [2, 'ByExtended'],
    [3, 'ByShortened']
]);
const TriggerFilter = createStructCodec('TriggerFilter', [
    ['id_filter', __dyn_FilterOptIdFilterTriggerId],
    ['event_filter', __dyn_FilterOptTriggerEventFilter]
]);
const TriggerFilterBox = createStructCodec('TriggerFilterBox', [
    ['id', __dyn_TriggerId],
    ['action', __dyn_ActionFilterBox]
]);
const TriggerId = createStructCodec('TriggerId', [
    ['name', __dyn_Name]
]);
const UnregisterBox = createStructCodec('UnregisterBox', [
    ['object_id', __dyn_EvaluatesToIdBox]
]);
const UnsatisfiedSignatureConditionFail = createStructCodec('UnsatisfiedSignatureConditionFail', [
    ['reason', Str]
]);
const UnsupportedVersion = createStructCodec('UnsupportedVersion', [
    ['version', U8],
    ['raw', __dyn_RawVersioned]
]);
const ValidBlock = createStructCodec('ValidBlock', [
    ['header', __dyn_BlockHeader],
    ['rejected_transactions', __dyn_VecVersionedRejectedTransaction],
    ['transactions', __dyn_VecVersionedValidTransaction],
    ['signatures', __dyn_VecSignatureOfValidBlock],
    ['event_recommendations', __dyn_VecEvent]
]);
const ValidTransaction = createStructCodec('ValidTransaction', [
    ['payload', __dyn_TransactionPayload],
    ['signatures', __dyn_SignaturesOfTransactionPayload]
]);
const ValidatorType = createEnumCodec('ValidatorType', [
    [0, 'Instruction'],
    [1, 'Query'],
    [2, 'Expression']
]);
const Value = createEnumCodec('Value', [
    [0, 'U32', U32],
    [1, 'U128', U128],
    [2, 'Bool', Bool],
    [3, 'String', Str],
    [4, 'Name', __dyn_Name],
    [5, 'Fixed', __dyn_Fixed],
    [6, 'Vec', __dyn_VecValue],
    [7, 'LimitedMetadata', __dyn_Metadata],
    [8, 'Id', __dyn_IdBox],
    [9, 'Identifiable', __dyn_IdentifiableBox],
    [10, 'PublicKey', __dyn_PublicKey],
    [11, 'Parameter', __dyn_Parameter],
    [12, 'SignatureCheckCondition', __dyn_SignatureCheckCondition],
    [13, 'TransactionValue', __dyn_TransactionValue],
    [14, 'PermissionToken', __dyn_PermissionToken],
    [15, 'Hash', __dyn_Hash],
    [16, 'Block', __dyn_BlockValue]
]);
const ValueOfKey = createStructCodec('ValueOfKey', [
    ['key', __dyn_Name],
    ['predicate', __dyn_Predicate]
]);
const VecEvent = createVecCodec('VecEvent', __dyn_Event);
const VecGenesisTransaction = createVecCodec('VecGenesisTransaction', __dyn_GenesisTransaction);
const VecHash = createVecCodec('VecHash', __dyn_Hash);
const VecHashOfVersionedValidBlock = createVecCodec('VecHashOfVersionedValidBlock', __dyn_HashOfVersionedValidBlock);
const VecInstruction = createVecCodec('VecInstruction', __dyn_Instruction);
const VecPeerId = createVecCodec('VecPeerId', __dyn_PeerId);
const VecPermissionToken = createVecCodec('VecPermissionToken', __dyn_PermissionToken);
const VecPredicateBox = createVecCodec('VecPredicateBox', __dyn_PredicateBox);
const VecProof = createVecCodec('VecProof', __dyn_Proof);
const VecPublicKey = createVecCodec('VecPublicKey', __dyn_PublicKey);
const VecRoleId = createVecCodec('VecRoleId', __dyn_RoleId);
const VecSignatureOfTransactionPayload = createVecCodec('VecSignatureOfTransactionPayload', __dyn_SignatureOfTransactionPayload);
const VecSignatureOfValidBlock = createVecCodec('VecSignatureOfValidBlock', __dyn_SignatureOfValidBlock);
const VecValue = createVecCodec('VecValue', __dyn_Value);
const VecVersionedRejectedTransaction = createVecCodec('VecVersionedRejectedTransaction', __dyn_VersionedRejectedTransaction);
const VecVersionedValidTransaction = createVecCodec('VecVersionedValidTransaction', __dyn_VersionedValidTransaction);
const VersionError = createEnumCodec('VersionError', [
    [0, 'NotVersioned'],
    [1, 'UnsupportedJsonEncode'],
    [2, 'ExpectedJson'],
    [3, 'UnsupportedScaleEncode'],
    [4, 'Serde'],
    [5, 'ParityScale'],
    [6, 'ParseInt'],
    [7, 'UnsupportedVersion', __dyn_UnsupportedVersion],
    [8, 'ExtraBytesLeft', U64]
]);
const VersionedBlockPublisherMessage = createEnumCodec('VersionedBlockPublisherMessage', [
    [1, 'V1', __dyn_BlockPublisherMessage]
]);
const VersionedBlockSubscriberMessage = createEnumCodec('VersionedBlockSubscriberMessage', [
    [1, 'V1', __dyn_BlockSubscriberMessage]
]);
const VersionedCommittedBlock = createEnumCodec('VersionedCommittedBlock', [
    [1, 'V1', __dyn_CommittedBlock]
]);
const VersionedEventPublisherMessage = createEnumCodec('VersionedEventPublisherMessage', [
    [1, 'V1', __dyn_EventPublisherMessage]
]);
const VersionedEventSubscriberMessage = createEnumCodec('VersionedEventSubscriberMessage', [
    [1, 'V1', __dyn_EventSubscriberMessage]
]);
const VersionedPaginatedQueryResult = createEnumCodec('VersionedPaginatedQueryResult', [
    [1, 'V1', __dyn_PaginatedQueryResult]
]);
const VersionedRejectedTransaction = createEnumCodec('VersionedRejectedTransaction', [
    [1, 'V1', __dyn_RejectedTransaction]
]);
const VersionedSignedQueryRequest = createEnumCodec('VersionedSignedQueryRequest', [
    [1, 'V1', __dyn_SignedQueryRequest]
]);
const VersionedTransaction = createEnumCodec('VersionedTransaction', [
    [1, 'V1', __dyn_Transaction]
]);
const VersionedValidBlock = createEnumCodec('VersionedValidBlock', [
    [1, 'V1', __dyn_ValidBlock]
]);
const VersionedValidTransaction = createEnumCodec('VersionedValidTransaction', [
    [1, 'V1', __dyn_ValidTransaction]
]);
const WasmExecutionFail = createStructCodec('WasmExecutionFail', [
    ['reason', Str]
]);
const WasmSmartContract = createStructCodec('WasmSmartContract', [
    ['raw_data', VecU8]
]);
const Where = createStructCodec('Where', [
    ['expression', __dyn_EvaluatesToValue],
    ['values', __dyn_MapStringEvaluatesToValue]
]);

export { Account, AccountEvent, AccountEventFilter, AccountFilter, AccountId, ActionFilterBox, Add, And, ArrayU8L32, Asset, AssetDefinition, AssetDefinitionEntry, AssetDefinitionEvent, AssetDefinitionEventFilter, AssetDefinitionFilter, AssetDefinitionId, AssetEvent, AssetEventFilter, AssetFilter, AssetId, AssetValue, AssetValueType, AtIndex, BlockHeader, BlockHeaderValue, BlockPublisherMessage, BlockRejectionReason, BlockSubscriberMessage, BlockValue, BurnBox, CommitTimeout, CommittedBlock, Container, Contains, ContainsAll, ContainsAny, ContextValue, DataEvent, DenialReason, Divide, Domain, DomainEvent, DomainEventFilter, DomainFilter, DomainId, Duration, EntityFilter, Equal, EvaluatesToAccountId, EvaluatesToAssetDefinitionId, EvaluatesToAssetId, EvaluatesToBool, EvaluatesToDomainId, EvaluatesToHash, EvaluatesToIdBox, EvaluatesToName, EvaluatesToRegistrableBox, EvaluatesToRoleId, EvaluatesToTriggerId, EvaluatesToU32, EvaluatesToValue, EvaluatesToVecValue, Event, EventPublisherMessage, EventSubscriberMessage, Executable, ExecuteTriggerBox, ExecuteTriggerEvent, ExecuteTriggerEventFilter, ExecutionTime, Expression, FailBox, FilterBox, FilterOptAccountEventFilter, FilterOptAccountFilter, FilterOptAssetDefinitionEventFilter, FilterOptAssetDefinitionFilter, FilterOptAssetEventFilter, FilterOptAssetFilter, FilterOptDomainEventFilter, FilterOptDomainFilter, FilterOptEntityFilter, FilterOptIdFilterAccountId, FilterOptIdFilterAssetDefinitionId, FilterOptIdFilterAssetId, FilterOptIdFilterDomainId, FilterOptIdFilterPeerId, FilterOptIdFilterRoleId, FilterOptIdFilterTriggerId, FilterOptPeerEventFilter, FilterOptPeerFilter, FilterOptRoleEventFilter, FilterOptRoleFilter, FilterOptTriggerEventFilter, FilterOptTriggerFilter, FindAccountById, FindAccountKeyValueByIdAndKey, FindAccountsByDomainId, FindAccountsByName, FindAccountsWithAsset, FindAssetById, FindAssetDefinitionById, FindAssetDefinitionKeyValueByIdAndKey, FindAssetKeyValueByIdAndKey, FindAssetQuantityById, FindAssetsByAccountId, FindAssetsByAssetDefinitionId, FindAssetsByDomainId, FindAssetsByDomainIdAndAssetDefinitionId, FindAssetsByName, FindDomainById, FindDomainKeyValueByIdAndKey, FindError, FindPermissionTokensByAccountId, FindRoleByRoleId, FindRolesByAccountId, FindTransactionByHash, FindTransactionsByAccountId, FindTriggerById, FindTriggerKeyValueByIdAndKey, FindTriggersByDomainId, Fixed, FixedPointI64P9 as FixedPointI64, GenesisTransaction, GrantBox, Greater, Hash, HashOfMerkleTreeVersionedTransaction, HashOfProof, HashOfVersionedCommittedBlock, HashOfVersionedTransaction, HashOfVersionedValidBlock, IdBox, IdFilterAccountId, IdFilterAssetDefinitionId, IdFilterAssetId, IdFilterDomainId, IdFilterPeerId, IdFilterRoleId, IdFilterTriggerId, IdentifiableBox, IfExpression, IfInstruction, Instruction, InstructionExecutionFail, IpfsPath, Less, MapAccountIdAccount, MapAssetDefinitionIdAssetDefinitionEntry, MapAssetIdAsset, MapNameValue, MapPublicKeySignatureOfCommittedBlock, MapPublicKeySignatureOfProof, MapPublicKeySignatureOfTransactionPayload, MapStringEvaluatesToValue, MerkleTreeVersionedTransaction, Metadata, MintBox, Mintable, MismatchValidatorType, Mod, Multiply, Name, NewAccount, NewAssetDefinition, NewDomain, NewRole, Not, NotPermittedFail, OptionDuration, OptionHash, OptionInstruction, OptionIpfsPath, OptionPipelineEntityKind, OptionPipelineStatusKind, OptionTimeInterval, OptionTopology, OptionU32, Or, PaginatedQueryResult, Pagination, Pair, Parameter, Peer, PeerEvent, PeerEventFilter, PeerFilter, PeerId, PermissionToken, PipelineEntityKind, PipelineEvent, PipelineEventFilter, PipelineStatus, PipelineStatusKind, Predicate, PredicateBox, Proof, ProofChain, ProofPayload, PublicKey, QueryBox, QueryError, QueryPayload, QueryResult, RaiseTo, Range, RawGenesisBlock, RawVersioned, Reason, RegisterBox, RegistrableBox, RejectedTransaction, RejectionReason, RemoveKeyValueBox, Repeats, RevokeBox, Role, RoleEvent, RoleEventFilter, RoleFilter, RoleId, SemiIntervalFixed, SemiIntervalU128, SemiIntervalU32, SequenceBox, SetKeyValueBox, Signature, SignatureCheckCondition, SignatureOfCommittedBlock, SignatureOfProof, SignatureOfQueryPayload, SignatureOfTransactionPayload, SignatureOfValidBlock, SignaturesOfCommittedBlock, SignaturesOfProof, SignaturesOfTransactionPayload, SignedQueryRequest, Subtract, TimeEvent, TimeEventFilter, TimeInterval, TimeSchedule, Topology, Transaction, TransactionLimitError, TransactionPayload, TransactionRejectionReason, TransactionValue, TransferBox, TriggerEvent, TriggerEventFilter, TriggerFilter, TriggerFilterBox, TriggerId, UnregisterBox, UnsatisfiedSignatureConditionFail, UnsupportedVersion, ValidBlock, ValidTransaction, ValidatorType, Value, ValueOfKey, VecEvent, VecGenesisTransaction, VecHash, VecHashOfVersionedValidBlock, VecInstruction, VecPeerId, VecPermissionToken, VecPredicateBox, VecProof, VecPublicKey, VecRoleId, VecSignatureOfTransactionPayload, VecSignatureOfValidBlock, VecValue, VecVersionedRejectedTransaction, VecVersionedValidTransaction, VersionError, VersionedBlockPublisherMessage, VersionedBlockSubscriberMessage, VersionedCommittedBlock, VersionedEventPublisherMessage, VersionedEventSubscriberMessage, VersionedPaginatedQueryResult, VersionedRejectedTransaction, VersionedSignedQueryRequest, VersionedTransaction, VersionedValidBlock, VersionedValidTransaction, WasmExecutionFail, WasmSmartContract, Where };
