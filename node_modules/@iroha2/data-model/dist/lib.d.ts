import * as _scale_codec_definition_runtime from '@scale-codec/definition-runtime';
import { Opaque, StructCodecAndFactory, EnumCodecAndFactory, Codec, ArrayCodecAndFactory, Str, MapCodecAndFactory, Enum, U32, U128, U64, Option, VecU8, Void, Compact, U8, Bool } from '@scale-codec/definition-runtime';
export * from '@scale-codec/definition-runtime';
export { Void as BlockCreationTimeout, Void as FindAllAccounts, Void as FindAllActiveTriggerIds, Void as FindAllAssets, Void as FindAllAssetsDefinitions, Void as FindAllBlocks, Void as FindAllDomains, Void as FindAllPeers, Void as FindAllRoleIds, Void as FindAllRoles, Void as FindAllTransactions, Void as NoTransactionReceiptReceived } from '@scale-codec/definition-runtime';

declare type FixedPointI64P9 = string;
declare const FixedPointI64P9: _scale_codec_definition_runtime.Codec<string, string>;

interface Account__actual {
    id: AccountId;
    assets: MapAssetIdAsset;
    signatories: VecPublicKey;
    permission_tokens: VecPermissionToken;
    signature_check_condition: SignatureCheckCondition;
    metadata: Metadata;
    roles: VecRoleId;
}
interface Account extends Opaque<Account__actual, Account> {
}
declare const Account: StructCodecAndFactory<Account__actual, Account>;
declare type AccountEvent__actual = Enum<['Asset', AssetEvent] | ['Created', AccountId] | ['Deleted', AccountId] | ['AuthenticationAdded', AccountId] | ['AuthenticationRemoved', AccountId] | ['PermissionAdded', AccountId] | ['PermissionRemoved', AccountId] | ['RoleRevoked', AccountId] | ['RoleGranted', AccountId] | ['MetadataInserted', AccountId] | ['MetadataRemoved', AccountId]>;
interface AccountEvent extends Opaque<AccountEvent__actual, AccountEvent> {
}
declare const AccountEvent: EnumCodecAndFactory<AccountEvent>;
declare type AccountEventFilter__actual = Enum<['ByAsset', FilterOptAssetFilter] | 'ByCreated' | 'ByDeleted' | 'ByAuthenticationAdded' | 'ByAuthenticationRemoved' | 'ByPermissionAdded' | 'ByPermissionRemoved' | 'ByRoleRevoked' | 'ByRoleGranted' | 'ByMetadataInserted' | 'ByMetadataRemoved'>;
interface AccountEventFilter extends Opaque<AccountEventFilter__actual, AccountEventFilter> {
}
declare const AccountEventFilter: EnumCodecAndFactory<AccountEventFilter>;
interface AccountFilter__actual {
    id_filter: FilterOptIdFilterAccountId;
    event_filter: FilterOptAccountEventFilter;
}
interface AccountFilter extends Opaque<AccountFilter__actual, AccountFilter> {
}
declare const AccountFilter: StructCodecAndFactory<AccountFilter__actual, AccountFilter>;
interface AccountId__actual {
    name: Name;
    domain_id: DomainId;
}
interface AccountId extends Opaque<AccountId__actual, AccountId> {
}
declare const AccountId: StructCodecAndFactory<AccountId__actual, AccountId>;
interface ActionFilterBox__actual {
    executable: Executable;
    repeats: Repeats;
    technical_account: AccountId;
    filter: FilterBox;
    metadata: Metadata;
}
interface ActionFilterBox extends Opaque<ActionFilterBox__actual, ActionFilterBox> {
}
declare const ActionFilterBox: StructCodecAndFactory<ActionFilterBox__actual, ActionFilterBox>;
interface Add__actual {
    left: EvaluatesToU32;
    right: EvaluatesToU32;
}
interface Add extends Opaque<Add__actual, Add> {
}
declare const Add: StructCodecAndFactory<Add__actual, Add>;
interface And__actual {
    left: EvaluatesToBool;
    right: EvaluatesToBool;
}
interface And extends Opaque<And__actual, And> {
}
declare const And: StructCodecAndFactory<And__actual, And>;
declare type ArrayU8L32 = Uint8Array;
declare const ArrayU8L32: Codec<ArrayU8L32>;
interface Asset__actual {
    id: AssetId;
    value: AssetValue;
}
interface Asset extends Opaque<Asset__actual, Asset> {
}
declare const Asset: StructCodecAndFactory<Asset__actual, Asset>;
interface AssetDefinition__actual {
    id: AssetDefinitionId;
    value_type: AssetValueType;
    mintable: Mintable;
    metadata: Metadata;
}
interface AssetDefinition extends Opaque<AssetDefinition__actual, AssetDefinition> {
}
declare const AssetDefinition: StructCodecAndFactory<AssetDefinition__actual, AssetDefinition>;
interface AssetDefinitionEntry__actual {
    definition: AssetDefinition;
    registered_by: AccountId;
}
interface AssetDefinitionEntry extends Opaque<AssetDefinitionEntry__actual, AssetDefinitionEntry> {
}
declare const AssetDefinitionEntry: StructCodecAndFactory<AssetDefinitionEntry__actual, AssetDefinitionEntry>;
declare type AssetDefinitionEvent__actual = Enum<['Created', AssetDefinitionId] | ['MintabilityChanged', AssetDefinitionId] | ['Deleted', AssetDefinitionId] | ['MetadataInserted', AssetDefinitionId] | ['MetadataRemoved', AssetDefinitionId]>;
interface AssetDefinitionEvent extends Opaque<AssetDefinitionEvent__actual, AssetDefinitionEvent> {
}
declare const AssetDefinitionEvent: EnumCodecAndFactory<AssetDefinitionEvent>;
declare type AssetDefinitionEventFilter__actual = Enum<'ByCreated' | 'ByDeleted' | 'ByMintabilityChanged' | 'ByMetadataInserted' | 'ByMetadataRemoved'>;
interface AssetDefinitionEventFilter extends Opaque<AssetDefinitionEventFilter__actual, AssetDefinitionEventFilter> {
}
declare const AssetDefinitionEventFilter: EnumCodecAndFactory<AssetDefinitionEventFilter>;
interface AssetDefinitionFilter__actual {
    id_filter: FilterOptIdFilterAssetDefinitionId;
    event_filter: FilterOptAssetDefinitionEventFilter;
}
interface AssetDefinitionFilter extends Opaque<AssetDefinitionFilter__actual, AssetDefinitionFilter> {
}
declare const AssetDefinitionFilter: StructCodecAndFactory<AssetDefinitionFilter__actual, AssetDefinitionFilter>;
interface AssetDefinitionId__actual {
    name: Name;
    domain_id: DomainId;
}
interface AssetDefinitionId extends Opaque<AssetDefinitionId__actual, AssetDefinitionId> {
}
declare const AssetDefinitionId: StructCodecAndFactory<AssetDefinitionId__actual, AssetDefinitionId>;
declare type AssetEvent__actual = Enum<['Created', AssetId] | ['Deleted', AssetId] | ['Added', AssetId] | ['Removed', AssetId] | ['MetadataInserted', AssetId] | ['MetadataRemoved', AssetId]>;
interface AssetEvent extends Opaque<AssetEvent__actual, AssetEvent> {
}
declare const AssetEvent: EnumCodecAndFactory<AssetEvent>;
declare type AssetEventFilter__actual = Enum<'ByCreated' | 'ByDeleted' | 'ByAdded' | 'ByRemoved' | 'ByMetadataInserted' | 'ByMetadataRemoved'>;
interface AssetEventFilter extends Opaque<AssetEventFilter__actual, AssetEventFilter> {
}
declare const AssetEventFilter: EnumCodecAndFactory<AssetEventFilter>;
interface AssetFilter__actual {
    id_filter: FilterOptIdFilterAssetId;
    event_filter: FilterOptAssetEventFilter;
}
interface AssetFilter extends Opaque<AssetFilter__actual, AssetFilter> {
}
declare const AssetFilter: StructCodecAndFactory<AssetFilter__actual, AssetFilter>;
interface AssetId__actual {
    definition_id: AssetDefinitionId;
    account_id: AccountId;
}
interface AssetId extends Opaque<AssetId__actual, AssetId> {
}
declare const AssetId: StructCodecAndFactory<AssetId__actual, AssetId>;
declare type AssetValue__actual = Enum<['Quantity', U32] | ['BigQuantity', U128] | ['Fixed', Fixed] | ['Store', Metadata]>;
interface AssetValue extends Opaque<AssetValue__actual, AssetValue> {
}
declare const AssetValue: EnumCodecAndFactory<AssetValue>;
declare type AssetValueType__actual = Enum<'Quantity' | 'BigQuantity' | 'Fixed' | 'Store'>;
interface AssetValueType extends Opaque<AssetValueType__actual, AssetValueType> {
}
declare const AssetValueType: EnumCodecAndFactory<AssetValueType>;
interface AtIndex__actual {
    index: U32;
    predicate: Predicate;
}
interface AtIndex extends Opaque<AtIndex__actual, AtIndex> {
}
declare const AtIndex: StructCodecAndFactory<AtIndex__actual, AtIndex>;

interface BlockHeader__actual {
    timestamp: U128;
    consensus_estimation: U64;
    height: U64;
    previous_block_hash: HashOfVersionedCommittedBlock;
    transactions_hash: HashOfMerkleTreeVersionedTransaction;
    rejected_transactions_hash: HashOfMerkleTreeVersionedTransaction;
    view_change_proofs: ProofChain;
    invalidated_blocks_hashes: VecHashOfVersionedValidBlock;
    genesis_topology: OptionTopology;
}
interface BlockHeader extends Opaque<BlockHeader__actual, BlockHeader> {
}
declare const BlockHeader: StructCodecAndFactory<BlockHeader__actual, BlockHeader>;
interface BlockHeaderValue__actual {
    timestamp: U128;
    height: U64;
    previous_block_hash: Hash;
    transactions_hash: HashOfMerkleTreeVersionedTransaction;
    rejected_transactions_hash: HashOfMerkleTreeVersionedTransaction;
    invalidated_blocks_hashes: VecHash;
    current_block_hash: Hash;
}
interface BlockHeaderValue extends Opaque<BlockHeaderValue__actual, BlockHeaderValue> {
}
declare const BlockHeaderValue: StructCodecAndFactory<BlockHeaderValue__actual, BlockHeaderValue>;
declare type BlockPublisherMessage__actual = Enum<'SubscriptionAccepted' | ['Block', VersionedCommittedBlock]>;
interface BlockPublisherMessage extends Opaque<BlockPublisherMessage__actual, BlockPublisherMessage> {
}
declare const BlockPublisherMessage: EnumCodecAndFactory<BlockPublisherMessage>;
declare type BlockRejectionReason__actual = Enum<'ConsensusBlockRejection'>;
interface BlockRejectionReason extends Opaque<BlockRejectionReason__actual, BlockRejectionReason> {
}
declare const BlockRejectionReason: EnumCodecAndFactory<BlockRejectionReason>;
declare type BlockSubscriberMessage__actual = Enum<['SubscriptionRequest', U64] | 'BlockReceived'>;
interface BlockSubscriberMessage extends Opaque<BlockSubscriberMessage__actual, BlockSubscriberMessage> {
}
declare const BlockSubscriberMessage: EnumCodecAndFactory<BlockSubscriberMessage>;
interface BlockValue__actual {
    header: BlockHeaderValue;
    transactions: VecVersionedValidTransaction;
    rejected_transactions: VecVersionedRejectedTransaction;
    event_recommendations: VecEvent;
}
interface BlockValue extends Opaque<BlockValue__actual, BlockValue> {
}
declare const BlockValue: StructCodecAndFactory<BlockValue__actual, BlockValue>;
interface BurnBox__actual {
    object: EvaluatesToValue;
    destination_id: EvaluatesToIdBox;
}
interface BurnBox extends Opaque<BurnBox__actual, BurnBox> {
}
declare const BurnBox: StructCodecAndFactory<BurnBox__actual, BurnBox>;
interface CommitTimeout__actual {
    hash: HashOfVersionedValidBlock;
}
interface CommitTimeout extends Opaque<CommitTimeout__actual, CommitTimeout> {
}
declare const CommitTimeout: StructCodecAndFactory<CommitTimeout__actual, CommitTimeout>;
interface CommittedBlock__actual {
    header: BlockHeader;
    rejected_transactions: VecVersionedRejectedTransaction;
    transactions: VecVersionedValidTransaction;
    event_recommendations: VecEvent;
    signatures: SignaturesOfCommittedBlock;
}
interface CommittedBlock extends Opaque<CommittedBlock__actual, CommittedBlock> {
}
declare const CommittedBlock: StructCodecAndFactory<CommittedBlock__actual, CommittedBlock>;
declare type Container__actual = Enum<['Any', Predicate] | ['All', Predicate] | ['AtIndex', AtIndex] | ['ValueOfKey', ValueOfKey] | ['HasKey', Name]>;
interface Container extends Opaque<Container__actual, Container> {
}
declare const Container: EnumCodecAndFactory<Container>;
interface Contains__actual {
    collection: EvaluatesToVecValue;
    element: EvaluatesToValue;
}
interface Contains extends Opaque<Contains__actual, Contains> {
}
declare const Contains: StructCodecAndFactory<Contains__actual, Contains>;
interface ContainsAll__actual {
    collection: EvaluatesToVecValue;
    elements: EvaluatesToVecValue;
}
interface ContainsAll extends Opaque<ContainsAll__actual, ContainsAll> {
}
declare const ContainsAll: StructCodecAndFactory<ContainsAll__actual, ContainsAll>;
interface ContainsAny__actual {
    collection: EvaluatesToVecValue;
    elements: EvaluatesToVecValue;
}
interface ContainsAny extends Opaque<ContainsAny__actual, ContainsAny> {
}
declare const ContainsAny: StructCodecAndFactory<ContainsAny__actual, ContainsAny>;
interface ContextValue__actual {
    value_name: Str;
}
interface ContextValue extends Opaque<ContextValue__actual, ContextValue> {
}
declare const ContextValue: StructCodecAndFactory<ContextValue__actual, ContextValue>;
declare type DataEvent__actual = Enum<['Peer', PeerEvent] | ['Domain', DomainEvent] | ['Account', AccountEvent] | ['AssetDefinition', AssetDefinitionEvent] | ['Asset', AssetEvent] | ['Trigger', TriggerEvent] | ['Role', RoleEvent]>;
interface DataEvent extends Opaque<DataEvent__actual, DataEvent> {
}
declare const DataEvent: EnumCodecAndFactory<DataEvent>;
declare type DenialReason__actual = Enum<['ValidatorTypeMismatch', MismatchValidatorType] | ['Custom', Str] | 'NoValidatorsProvided'>;
interface DenialReason extends Opaque<DenialReason__actual, DenialReason> {
}
declare const DenialReason: EnumCodecAndFactory<DenialReason>;
interface Divide__actual {
    left: EvaluatesToU32;
    right: EvaluatesToU32;
}
interface Divide extends Opaque<Divide__actual, Divide> {
}
declare const Divide: StructCodecAndFactory<Divide__actual, Divide>;
interface Domain__actual {
    id: DomainId;
    accounts: MapAccountIdAccount;
    asset_definitions: MapAssetDefinitionIdAssetDefinitionEntry;
    logo: OptionIpfsPath;
    metadata: Metadata;
}
interface Domain extends Opaque<Domain__actual, Domain> {
}
declare const Domain: StructCodecAndFactory<Domain__actual, Domain>;
declare type DomainEvent__actual = Enum<['Account', AccountEvent] | ['AssetDefinition', AssetDefinitionEvent] | ['Created', DomainId] | ['Deleted', DomainId] | ['MetadataInserted', DomainId] | ['MetadataRemoved', DomainId]>;
interface DomainEvent extends Opaque<DomainEvent__actual, DomainEvent> {
}
declare const DomainEvent: EnumCodecAndFactory<DomainEvent>;
declare type DomainEventFilter__actual = Enum<['ByAccount', FilterOptAccountFilter] | ['ByAssetDefinition', FilterOptAssetDefinitionFilter] | 'ByCreated' | 'ByDeleted' | 'ByMetadataInserted' | 'ByMetadataRemoved'>;
interface DomainEventFilter extends Opaque<DomainEventFilter__actual, DomainEventFilter> {
}
declare const DomainEventFilter: EnumCodecAndFactory<DomainEventFilter>;
interface DomainFilter__actual {
    id_filter: FilterOptIdFilterDomainId;
    event_filter: FilterOptDomainEventFilter;
}
interface DomainFilter extends Opaque<DomainFilter__actual, DomainFilter> {
}
declare const DomainFilter: StructCodecAndFactory<DomainFilter__actual, DomainFilter>;
interface DomainId__actual {
    name: Name;
}
interface DomainId extends Opaque<DomainId__actual, DomainId> {
}
declare const DomainId: StructCodecAndFactory<DomainId__actual, DomainId>;
declare type Duration__actual = [U64, U32];
interface Duration extends Opaque<Duration__actual, Duration> {
}
declare const Duration: ArrayCodecAndFactory<Duration__actual, Duration>;
declare type EntityFilter__actual = Enum<['ByPeer', FilterOptPeerFilter] | ['ByDomain', FilterOptDomainFilter] | ['ByAccount', FilterOptAccountFilter] | ['ByAssetDefinition', FilterOptAssetDefinitionFilter] | ['ByAsset', FilterOptAssetFilter] | ['ByTrigger', FilterOptTriggerFilter] | ['ByRole', FilterOptRoleFilter]>;
interface EntityFilter extends Opaque<EntityFilter__actual, EntityFilter> {
}
declare const EntityFilter: EnumCodecAndFactory<EntityFilter>;
interface Equal__actual {
    left: EvaluatesToValue;
    right: EvaluatesToValue;
}
interface Equal extends Opaque<Equal__actual, Equal> {
}
declare const Equal: StructCodecAndFactory<Equal__actual, Equal>;
interface EvaluatesToAccountId__actual {
    expression: Expression;
}
interface EvaluatesToAccountId extends Opaque<EvaluatesToAccountId__actual, EvaluatesToAccountId> {
}
declare const EvaluatesToAccountId: StructCodecAndFactory<EvaluatesToAccountId__actual, EvaluatesToAccountId>;
interface EvaluatesToAssetDefinitionId__actual {
    expression: Expression;
}
interface EvaluatesToAssetDefinitionId extends Opaque<EvaluatesToAssetDefinitionId__actual, EvaluatesToAssetDefinitionId> {
}
declare const EvaluatesToAssetDefinitionId: StructCodecAndFactory<EvaluatesToAssetDefinitionId__actual, EvaluatesToAssetDefinitionId>;
interface EvaluatesToAssetId__actual {
    expression: Expression;
}
interface EvaluatesToAssetId extends Opaque<EvaluatesToAssetId__actual, EvaluatesToAssetId> {
}
declare const EvaluatesToAssetId: StructCodecAndFactory<EvaluatesToAssetId__actual, EvaluatesToAssetId>;
interface EvaluatesToBool__actual {
    expression: Expression;
}
interface EvaluatesToBool extends Opaque<EvaluatesToBool__actual, EvaluatesToBool> {
}
declare const EvaluatesToBool: StructCodecAndFactory<EvaluatesToBool__actual, EvaluatesToBool>;
interface EvaluatesToDomainId__actual {
    expression: Expression;
}
interface EvaluatesToDomainId extends Opaque<EvaluatesToDomainId__actual, EvaluatesToDomainId> {
}
declare const EvaluatesToDomainId: StructCodecAndFactory<EvaluatesToDomainId__actual, EvaluatesToDomainId>;
interface EvaluatesToHash__actual {
    expression: Expression;
}
interface EvaluatesToHash extends Opaque<EvaluatesToHash__actual, EvaluatesToHash> {
}
declare const EvaluatesToHash: StructCodecAndFactory<EvaluatesToHash__actual, EvaluatesToHash>;
interface EvaluatesToIdBox__actual {
    expression: Expression;
}
interface EvaluatesToIdBox extends Opaque<EvaluatesToIdBox__actual, EvaluatesToIdBox> {
}
declare const EvaluatesToIdBox: StructCodecAndFactory<EvaluatesToIdBox__actual, EvaluatesToIdBox>;
interface EvaluatesToName__actual {
    expression: Expression;
}
interface EvaluatesToName extends Opaque<EvaluatesToName__actual, EvaluatesToName> {
}
declare const EvaluatesToName: StructCodecAndFactory<EvaluatesToName__actual, EvaluatesToName>;
interface EvaluatesToRegistrableBox__actual {
    expression: Expression;
}
interface EvaluatesToRegistrableBox extends Opaque<EvaluatesToRegistrableBox__actual, EvaluatesToRegistrableBox> {
}
declare const EvaluatesToRegistrableBox: StructCodecAndFactory<EvaluatesToRegistrableBox__actual, EvaluatesToRegistrableBox>;
interface EvaluatesToRoleId__actual {
    expression: Expression;
}
interface EvaluatesToRoleId extends Opaque<EvaluatesToRoleId__actual, EvaluatesToRoleId> {
}
declare const EvaluatesToRoleId: StructCodecAndFactory<EvaluatesToRoleId__actual, EvaluatesToRoleId>;
interface EvaluatesToTriggerId__actual {
    expression: Expression;
}
interface EvaluatesToTriggerId extends Opaque<EvaluatesToTriggerId__actual, EvaluatesToTriggerId> {
}
declare const EvaluatesToTriggerId: StructCodecAndFactory<EvaluatesToTriggerId__actual, EvaluatesToTriggerId>;
interface EvaluatesToU32__actual {
    expression: Expression;
}
interface EvaluatesToU32 extends Opaque<EvaluatesToU32__actual, EvaluatesToU32> {
}
declare const EvaluatesToU32: StructCodecAndFactory<EvaluatesToU32__actual, EvaluatesToU32>;
interface EvaluatesToValue__actual {
    expression: Expression;
}
interface EvaluatesToValue extends Opaque<EvaluatesToValue__actual, EvaluatesToValue> {
}
declare const EvaluatesToValue: StructCodecAndFactory<EvaluatesToValue__actual, EvaluatesToValue>;
interface EvaluatesToVecValue__actual {
    expression: Expression;
}
interface EvaluatesToVecValue extends Opaque<EvaluatesToVecValue__actual, EvaluatesToVecValue> {
}
declare const EvaluatesToVecValue: StructCodecAndFactory<EvaluatesToVecValue__actual, EvaluatesToVecValue>;
declare type Event__actual = Enum<['Pipeline', PipelineEvent] | ['Data', DataEvent] | ['Time', TimeEvent] | ['ExecuteTrigger', ExecuteTriggerEvent]>;
interface Event extends Opaque<Event__actual, Event> {
}
declare const Event: EnumCodecAndFactory<Event>;
declare type EventPublisherMessage__actual = Enum<'SubscriptionAccepted' | ['Event', Event]>;
interface EventPublisherMessage extends Opaque<EventPublisherMessage__actual, EventPublisherMessage> {
}
declare const EventPublisherMessage: EnumCodecAndFactory<EventPublisherMessage>;
declare type EventSubscriberMessage__actual = Enum<['SubscriptionRequest', FilterBox] | 'EventReceived'>;
interface EventSubscriberMessage extends Opaque<EventSubscriberMessage__actual, EventSubscriberMessage> {
}
declare const EventSubscriberMessage: EnumCodecAndFactory<EventSubscriberMessage>;
declare type Executable__actual = Enum<['Instructions', VecInstruction] | ['Wasm', WasmSmartContract]>;
interface Executable extends Opaque<Executable__actual, Executable> {
}
declare const Executable: EnumCodecAndFactory<Executable>;
interface ExecuteTriggerBox__actual {
    trigger_id: TriggerId;
}
interface ExecuteTriggerBox extends Opaque<ExecuteTriggerBox__actual, ExecuteTriggerBox> {
}
declare const ExecuteTriggerBox: StructCodecAndFactory<ExecuteTriggerBox__actual, ExecuteTriggerBox>;
interface ExecuteTriggerEvent__actual {
    trigger_id: TriggerId;
    authority: AccountId;
}
interface ExecuteTriggerEvent extends Opaque<ExecuteTriggerEvent__actual, ExecuteTriggerEvent> {
}
declare const ExecuteTriggerEvent: StructCodecAndFactory<ExecuteTriggerEvent__actual, ExecuteTriggerEvent>;
interface ExecuteTriggerEventFilter__actual {
    trigger_id: TriggerId;
    authority: AccountId;
}
interface ExecuteTriggerEventFilter extends Opaque<ExecuteTriggerEventFilter__actual, ExecuteTriggerEventFilter> {
}
declare const ExecuteTriggerEventFilter: StructCodecAndFactory<ExecuteTriggerEventFilter__actual, ExecuteTriggerEventFilter>;
declare type ExecutionTime__actual = Enum<'PreCommit' | ['Schedule', TimeSchedule]>;
interface ExecutionTime extends Opaque<ExecutionTime__actual, ExecutionTime> {
}
declare const ExecutionTime: EnumCodecAndFactory<ExecutionTime>;
declare type Expression__actual = Enum<['Add', Add] | ['Subtract', Subtract] | ['Multiply', Multiply] | ['Divide', Divide] | ['Mod', Mod] | ['RaiseTo', RaiseTo] | ['Greater', Greater] | ['Less', Less] | ['Equal', Equal] | ['Not', Not] | ['And', And] | ['Or', Or] | ['If', IfExpression] | ['Raw', Value] | ['Query', QueryBox] | ['Contains', Contains] | ['ContainsAll', ContainsAll] | ['ContainsAny', ContainsAny] | ['Where', Where] | ['ContextValue', ContextValue]>;
interface Expression extends Opaque<Expression__actual, Expression> {
}
declare const Expression: EnumCodecAndFactory<Expression>;
interface FailBox__actual {
    message: Str;
}
interface FailBox extends Opaque<FailBox__actual, FailBox> {
}
declare const FailBox: StructCodecAndFactory<FailBox__actual, FailBox>;
declare type FilterBox__actual = Enum<['Pipeline', PipelineEventFilter] | ['Data', FilterOptEntityFilter] | ['Time', TimeEventFilter] | ['ExecuteTrigger', ExecuteTriggerEventFilter]>;
interface FilterBox extends Opaque<FilterBox__actual, FilterBox> {
}
declare const FilterBox: EnumCodecAndFactory<FilterBox>;
declare type FilterOptAccountEventFilter__actual = Enum<'AcceptAll' | ['BySome', AccountEventFilter]>;
interface FilterOptAccountEventFilter extends Opaque<FilterOptAccountEventFilter__actual, FilterOptAccountEventFilter> {
}
declare const FilterOptAccountEventFilter: EnumCodecAndFactory<FilterOptAccountEventFilter>;
declare type FilterOptAccountFilter__actual = Enum<'AcceptAll' | ['BySome', AccountFilter]>;
interface FilterOptAccountFilter extends Opaque<FilterOptAccountFilter__actual, FilterOptAccountFilter> {
}
declare const FilterOptAccountFilter: EnumCodecAndFactory<FilterOptAccountFilter>;
declare type FilterOptAssetDefinitionEventFilter__actual = Enum<'AcceptAll' | ['BySome', AssetDefinitionEventFilter]>;
interface FilterOptAssetDefinitionEventFilter extends Opaque<FilterOptAssetDefinitionEventFilter__actual, FilterOptAssetDefinitionEventFilter> {
}
declare const FilterOptAssetDefinitionEventFilter: EnumCodecAndFactory<FilterOptAssetDefinitionEventFilter>;
declare type FilterOptAssetDefinitionFilter__actual = Enum<'AcceptAll' | ['BySome', AssetDefinitionFilter]>;
interface FilterOptAssetDefinitionFilter extends Opaque<FilterOptAssetDefinitionFilter__actual, FilterOptAssetDefinitionFilter> {
}
declare const FilterOptAssetDefinitionFilter: EnumCodecAndFactory<FilterOptAssetDefinitionFilter>;
declare type FilterOptAssetEventFilter__actual = Enum<'AcceptAll' | ['BySome', AssetEventFilter]>;
interface FilterOptAssetEventFilter extends Opaque<FilterOptAssetEventFilter__actual, FilterOptAssetEventFilter> {
}
declare const FilterOptAssetEventFilter: EnumCodecAndFactory<FilterOptAssetEventFilter>;
declare type FilterOptAssetFilter__actual = Enum<'AcceptAll' | ['BySome', AssetFilter]>;
interface FilterOptAssetFilter extends Opaque<FilterOptAssetFilter__actual, FilterOptAssetFilter> {
}
declare const FilterOptAssetFilter: EnumCodecAndFactory<FilterOptAssetFilter>;
declare type FilterOptDomainEventFilter__actual = Enum<'AcceptAll' | ['BySome', DomainEventFilter]>;
interface FilterOptDomainEventFilter extends Opaque<FilterOptDomainEventFilter__actual, FilterOptDomainEventFilter> {
}
declare const FilterOptDomainEventFilter: EnumCodecAndFactory<FilterOptDomainEventFilter>;
declare type FilterOptDomainFilter__actual = Enum<'AcceptAll' | ['BySome', DomainFilter]>;
interface FilterOptDomainFilter extends Opaque<FilterOptDomainFilter__actual, FilterOptDomainFilter> {
}
declare const FilterOptDomainFilter: EnumCodecAndFactory<FilterOptDomainFilter>;
declare type FilterOptEntityFilter__actual = Enum<'AcceptAll' | ['BySome', EntityFilter]>;
interface FilterOptEntityFilter extends Opaque<FilterOptEntityFilter__actual, FilterOptEntityFilter> {
}
declare const FilterOptEntityFilter: EnumCodecAndFactory<FilterOptEntityFilter>;
declare type FilterOptIdFilterAccountId__actual = Enum<'AcceptAll' | ['BySome', IdFilterAccountId]>;
interface FilterOptIdFilterAccountId extends Opaque<FilterOptIdFilterAccountId__actual, FilterOptIdFilterAccountId> {
}
declare const FilterOptIdFilterAccountId: EnumCodecAndFactory<FilterOptIdFilterAccountId>;
declare type FilterOptIdFilterAssetDefinitionId__actual = Enum<'AcceptAll' | ['BySome', IdFilterAssetDefinitionId]>;
interface FilterOptIdFilterAssetDefinitionId extends Opaque<FilterOptIdFilterAssetDefinitionId__actual, FilterOptIdFilterAssetDefinitionId> {
}
declare const FilterOptIdFilterAssetDefinitionId: EnumCodecAndFactory<FilterOptIdFilterAssetDefinitionId>;
declare type FilterOptIdFilterAssetId__actual = Enum<'AcceptAll' | ['BySome', IdFilterAssetId]>;
interface FilterOptIdFilterAssetId extends Opaque<FilterOptIdFilterAssetId__actual, FilterOptIdFilterAssetId> {
}
declare const FilterOptIdFilterAssetId: EnumCodecAndFactory<FilterOptIdFilterAssetId>;
declare type FilterOptIdFilterDomainId__actual = Enum<'AcceptAll' | ['BySome', IdFilterDomainId]>;
interface FilterOptIdFilterDomainId extends Opaque<FilterOptIdFilterDomainId__actual, FilterOptIdFilterDomainId> {
}
declare const FilterOptIdFilterDomainId: EnumCodecAndFactory<FilterOptIdFilterDomainId>;
declare type FilterOptIdFilterPeerId__actual = Enum<'AcceptAll' | ['BySome', IdFilterPeerId]>;
interface FilterOptIdFilterPeerId extends Opaque<FilterOptIdFilterPeerId__actual, FilterOptIdFilterPeerId> {
}
declare const FilterOptIdFilterPeerId: EnumCodecAndFactory<FilterOptIdFilterPeerId>;
declare type FilterOptIdFilterRoleId__actual = Enum<'AcceptAll' | ['BySome', IdFilterRoleId]>;
interface FilterOptIdFilterRoleId extends Opaque<FilterOptIdFilterRoleId__actual, FilterOptIdFilterRoleId> {
}
declare const FilterOptIdFilterRoleId: EnumCodecAndFactory<FilterOptIdFilterRoleId>;
declare type FilterOptIdFilterTriggerId__actual = Enum<'AcceptAll' | ['BySome', IdFilterTriggerId]>;
interface FilterOptIdFilterTriggerId extends Opaque<FilterOptIdFilterTriggerId__actual, FilterOptIdFilterTriggerId> {
}
declare const FilterOptIdFilterTriggerId: EnumCodecAndFactory<FilterOptIdFilterTriggerId>;
declare type FilterOptPeerEventFilter__actual = Enum<'AcceptAll' | ['BySome', PeerEventFilter]>;
interface FilterOptPeerEventFilter extends Opaque<FilterOptPeerEventFilter__actual, FilterOptPeerEventFilter> {
}
declare const FilterOptPeerEventFilter: EnumCodecAndFactory<FilterOptPeerEventFilter>;
declare type FilterOptPeerFilter__actual = Enum<'AcceptAll' | ['BySome', PeerFilter]>;
interface FilterOptPeerFilter extends Opaque<FilterOptPeerFilter__actual, FilterOptPeerFilter> {
}
declare const FilterOptPeerFilter: EnumCodecAndFactory<FilterOptPeerFilter>;
declare type FilterOptRoleEventFilter__actual = Enum<'AcceptAll' | ['BySome', RoleEventFilter]>;
interface FilterOptRoleEventFilter extends Opaque<FilterOptRoleEventFilter__actual, FilterOptRoleEventFilter> {
}
declare const FilterOptRoleEventFilter: EnumCodecAndFactory<FilterOptRoleEventFilter>;
declare type FilterOptRoleFilter__actual = Enum<'AcceptAll' | ['BySome', RoleFilter]>;
interface FilterOptRoleFilter extends Opaque<FilterOptRoleFilter__actual, FilterOptRoleFilter> {
}
declare const FilterOptRoleFilter: EnumCodecAndFactory<FilterOptRoleFilter>;
declare type FilterOptTriggerEventFilter__actual = Enum<'AcceptAll' | ['BySome', TriggerEventFilter]>;
interface FilterOptTriggerEventFilter extends Opaque<FilterOptTriggerEventFilter__actual, FilterOptTriggerEventFilter> {
}
declare const FilterOptTriggerEventFilter: EnumCodecAndFactory<FilterOptTriggerEventFilter>;
declare type FilterOptTriggerFilter__actual = Enum<'AcceptAll' | ['BySome', TriggerFilter]>;
interface FilterOptTriggerFilter extends Opaque<FilterOptTriggerFilter__actual, FilterOptTriggerFilter> {
}
declare const FilterOptTriggerFilter: EnumCodecAndFactory<FilterOptTriggerFilter>;
interface FindAccountById__actual {
    id: EvaluatesToAccountId;
}
interface FindAccountById extends Opaque<FindAccountById__actual, FindAccountById> {
}
declare const FindAccountById: StructCodecAndFactory<FindAccountById__actual, FindAccountById>;
interface FindAccountKeyValueByIdAndKey__actual {
    id: EvaluatesToAccountId;
    key: EvaluatesToName;
}
interface FindAccountKeyValueByIdAndKey extends Opaque<FindAccountKeyValueByIdAndKey__actual, FindAccountKeyValueByIdAndKey> {
}
declare const FindAccountKeyValueByIdAndKey: StructCodecAndFactory<FindAccountKeyValueByIdAndKey__actual, FindAccountKeyValueByIdAndKey>;
interface FindAccountsByDomainId__actual {
    domain_id: EvaluatesToDomainId;
}
interface FindAccountsByDomainId extends Opaque<FindAccountsByDomainId__actual, FindAccountsByDomainId> {
}
declare const FindAccountsByDomainId: StructCodecAndFactory<FindAccountsByDomainId__actual, FindAccountsByDomainId>;
interface FindAccountsByName__actual {
    name: EvaluatesToName;
}
interface FindAccountsByName extends Opaque<FindAccountsByName__actual, FindAccountsByName> {
}
declare const FindAccountsByName: StructCodecAndFactory<FindAccountsByName__actual, FindAccountsByName>;
interface FindAccountsWithAsset__actual {
    asset_definition_id: EvaluatesToAssetDefinitionId;
}
interface FindAccountsWithAsset extends Opaque<FindAccountsWithAsset__actual, FindAccountsWithAsset> {
}
declare const FindAccountsWithAsset: StructCodecAndFactory<FindAccountsWithAsset__actual, FindAccountsWithAsset>;

interface FindAssetById__actual {
    id: EvaluatesToAssetId;
}
interface FindAssetById extends Opaque<FindAssetById__actual, FindAssetById> {
}
declare const FindAssetById: StructCodecAndFactory<FindAssetById__actual, FindAssetById>;
interface FindAssetDefinitionById__actual {
    id: EvaluatesToAssetDefinitionId;
}
interface FindAssetDefinitionById extends Opaque<FindAssetDefinitionById__actual, FindAssetDefinitionById> {
}
declare const FindAssetDefinitionById: StructCodecAndFactory<FindAssetDefinitionById__actual, FindAssetDefinitionById>;
interface FindAssetDefinitionKeyValueByIdAndKey__actual {
    id: EvaluatesToAssetDefinitionId;
    key: EvaluatesToName;
}
interface FindAssetDefinitionKeyValueByIdAndKey extends Opaque<FindAssetDefinitionKeyValueByIdAndKey__actual, FindAssetDefinitionKeyValueByIdAndKey> {
}
declare const FindAssetDefinitionKeyValueByIdAndKey: StructCodecAndFactory<FindAssetDefinitionKeyValueByIdAndKey__actual, FindAssetDefinitionKeyValueByIdAndKey>;
interface FindAssetKeyValueByIdAndKey__actual {
    id: EvaluatesToAssetId;
    key: EvaluatesToName;
}
interface FindAssetKeyValueByIdAndKey extends Opaque<FindAssetKeyValueByIdAndKey__actual, FindAssetKeyValueByIdAndKey> {
}
declare const FindAssetKeyValueByIdAndKey: StructCodecAndFactory<FindAssetKeyValueByIdAndKey__actual, FindAssetKeyValueByIdAndKey>;
interface FindAssetQuantityById__actual {
    id: EvaluatesToAssetId;
}
interface FindAssetQuantityById extends Opaque<FindAssetQuantityById__actual, FindAssetQuantityById> {
}
declare const FindAssetQuantityById: StructCodecAndFactory<FindAssetQuantityById__actual, FindAssetQuantityById>;
interface FindAssetsByAccountId__actual {
    account_id: EvaluatesToAccountId;
}
interface FindAssetsByAccountId extends Opaque<FindAssetsByAccountId__actual, FindAssetsByAccountId> {
}
declare const FindAssetsByAccountId: StructCodecAndFactory<FindAssetsByAccountId__actual, FindAssetsByAccountId>;
interface FindAssetsByAssetDefinitionId__actual {
    asset_definition_id: EvaluatesToAssetDefinitionId;
}
interface FindAssetsByAssetDefinitionId extends Opaque<FindAssetsByAssetDefinitionId__actual, FindAssetsByAssetDefinitionId> {
}
declare const FindAssetsByAssetDefinitionId: StructCodecAndFactory<FindAssetsByAssetDefinitionId__actual, FindAssetsByAssetDefinitionId>;
interface FindAssetsByDomainId__actual {
    domain_id: EvaluatesToDomainId;
}
interface FindAssetsByDomainId extends Opaque<FindAssetsByDomainId__actual, FindAssetsByDomainId> {
}
declare const FindAssetsByDomainId: StructCodecAndFactory<FindAssetsByDomainId__actual, FindAssetsByDomainId>;
interface FindAssetsByDomainIdAndAssetDefinitionId__actual {
    domain_id: EvaluatesToDomainId;
    asset_definition_id: EvaluatesToAssetDefinitionId;
}
interface FindAssetsByDomainIdAndAssetDefinitionId extends Opaque<FindAssetsByDomainIdAndAssetDefinitionId__actual, FindAssetsByDomainIdAndAssetDefinitionId> {
}
declare const FindAssetsByDomainIdAndAssetDefinitionId: StructCodecAndFactory<FindAssetsByDomainIdAndAssetDefinitionId__actual, FindAssetsByDomainIdAndAssetDefinitionId>;
interface FindAssetsByName__actual {
    name: EvaluatesToName;
}
interface FindAssetsByName extends Opaque<FindAssetsByName__actual, FindAssetsByName> {
}
declare const FindAssetsByName: StructCodecAndFactory<FindAssetsByName__actual, FindAssetsByName>;
interface FindDomainById__actual {
    id: EvaluatesToDomainId;
}
interface FindDomainById extends Opaque<FindDomainById__actual, FindDomainById> {
}
declare const FindDomainById: StructCodecAndFactory<FindDomainById__actual, FindDomainById>;
interface FindDomainKeyValueByIdAndKey__actual {
    id: EvaluatesToDomainId;
    key: EvaluatesToName;
}
interface FindDomainKeyValueByIdAndKey extends Opaque<FindDomainKeyValueByIdAndKey__actual, FindDomainKeyValueByIdAndKey> {
}
declare const FindDomainKeyValueByIdAndKey: StructCodecAndFactory<FindDomainKeyValueByIdAndKey__actual, FindDomainKeyValueByIdAndKey>;
declare type FindError__actual = Enum<['Asset', AssetId] | ['AssetDefinition', AssetDefinitionId] | ['Account', AccountId] | ['Domain', DomainId] | ['MetadataKey', Name] | ['Block', HashOfVersionedCommittedBlock] | ['Transaction', HashOfVersionedTransaction] | ['Context', Str] | ['Peer', PeerId] | ['Trigger', TriggerId] | ['Role', RoleId]>;
interface FindError extends Opaque<FindError__actual, FindError> {
}
declare const FindError: EnumCodecAndFactory<FindError>;
interface FindPermissionTokensByAccountId__actual {
    id: EvaluatesToAccountId;
}
interface FindPermissionTokensByAccountId extends Opaque<FindPermissionTokensByAccountId__actual, FindPermissionTokensByAccountId> {
}
declare const FindPermissionTokensByAccountId: StructCodecAndFactory<FindPermissionTokensByAccountId__actual, FindPermissionTokensByAccountId>;
interface FindRoleByRoleId__actual {
    id: EvaluatesToRoleId;
}
interface FindRoleByRoleId extends Opaque<FindRoleByRoleId__actual, FindRoleByRoleId> {
}
declare const FindRoleByRoleId: StructCodecAndFactory<FindRoleByRoleId__actual, FindRoleByRoleId>;
interface FindRolesByAccountId__actual {
    id: EvaluatesToAccountId;
}
interface FindRolesByAccountId extends Opaque<FindRolesByAccountId__actual, FindRolesByAccountId> {
}
declare const FindRolesByAccountId: StructCodecAndFactory<FindRolesByAccountId__actual, FindRolesByAccountId>;
interface FindTransactionByHash__actual {
    hash: EvaluatesToHash;
}
interface FindTransactionByHash extends Opaque<FindTransactionByHash__actual, FindTransactionByHash> {
}
declare const FindTransactionByHash: StructCodecAndFactory<FindTransactionByHash__actual, FindTransactionByHash>;
interface FindTransactionsByAccountId__actual {
    account_id: EvaluatesToAccountId;
}
interface FindTransactionsByAccountId extends Opaque<FindTransactionsByAccountId__actual, FindTransactionsByAccountId> {
}
declare const FindTransactionsByAccountId: StructCodecAndFactory<FindTransactionsByAccountId__actual, FindTransactionsByAccountId>;
interface FindTriggerById__actual {
    id: EvaluatesToTriggerId;
}
interface FindTriggerById extends Opaque<FindTriggerById__actual, FindTriggerById> {
}
declare const FindTriggerById: StructCodecAndFactory<FindTriggerById__actual, FindTriggerById>;
interface FindTriggerKeyValueByIdAndKey__actual {
    id: EvaluatesToTriggerId;
    key: EvaluatesToName;
}
interface FindTriggerKeyValueByIdAndKey extends Opaque<FindTriggerKeyValueByIdAndKey__actual, FindTriggerKeyValueByIdAndKey> {
}
declare const FindTriggerKeyValueByIdAndKey: StructCodecAndFactory<FindTriggerKeyValueByIdAndKey__actual, FindTriggerKeyValueByIdAndKey>;
interface FindTriggersByDomainId__actual {
    domain_id: EvaluatesToDomainId;
}
interface FindTriggersByDomainId extends Opaque<FindTriggersByDomainId__actual, FindTriggersByDomainId> {
}
declare const FindTriggersByDomainId: StructCodecAndFactory<FindTriggersByDomainId__actual, FindTriggersByDomainId>;
declare type Fixed = FixedPointI64P9;
declare const Fixed: Codec<Fixed>;

interface GenesisTransaction__actual {
    isi: VecInstruction;
}
interface GenesisTransaction extends Opaque<GenesisTransaction__actual, GenesisTransaction> {
}
declare const GenesisTransaction: StructCodecAndFactory<GenesisTransaction__actual, GenesisTransaction>;
interface GrantBox__actual {
    object: EvaluatesToValue;
    destination_id: EvaluatesToIdBox;
}
interface GrantBox extends Opaque<GrantBox__actual, GrantBox> {
}
declare const GrantBox: StructCodecAndFactory<GrantBox__actual, GrantBox>;
interface Greater__actual {
    left: EvaluatesToU32;
    right: EvaluatesToU32;
}
interface Greater extends Opaque<Greater__actual, Greater> {
}
declare const Greater: StructCodecAndFactory<Greater__actual, Greater>;
declare type Hash = ArrayU8L32;
declare const Hash: Codec<Hash>;
declare type HashOfMerkleTreeVersionedTransaction = Hash;
declare const HashOfMerkleTreeVersionedTransaction: Codec<HashOfMerkleTreeVersionedTransaction>;
declare type HashOfProof = Hash;
declare const HashOfProof: Codec<HashOfProof>;
declare type HashOfVersionedCommittedBlock = Hash;
declare const HashOfVersionedCommittedBlock: Codec<HashOfVersionedCommittedBlock>;
declare type HashOfVersionedTransaction = Hash;
declare const HashOfVersionedTransaction: Codec<HashOfVersionedTransaction>;
declare type HashOfVersionedValidBlock = Hash;
declare const HashOfVersionedValidBlock: Codec<HashOfVersionedValidBlock>;
declare type IdBox__actual = Enum<['DomainId', DomainId] | ['AccountId', AccountId] | ['AssetDefinitionId', AssetDefinitionId] | ['AssetId', AssetId] | ['PeerId', PeerId] | ['TriggerId', TriggerId] | ['RoleId', RoleId]>;
interface IdBox extends Opaque<IdBox__actual, IdBox> {
}
declare const IdBox: EnumCodecAndFactory<IdBox>;
declare type IdFilterAccountId = AccountId;
declare const IdFilterAccountId: Codec<IdFilterAccountId>;
declare type IdFilterAssetDefinitionId = AssetDefinitionId;
declare const IdFilterAssetDefinitionId: Codec<IdFilterAssetDefinitionId>;
declare type IdFilterAssetId = AssetId;
declare const IdFilterAssetId: Codec<IdFilterAssetId>;
declare type IdFilterDomainId = DomainId;
declare const IdFilterDomainId: Codec<IdFilterDomainId>;
declare type IdFilterPeerId = PeerId;
declare const IdFilterPeerId: Codec<IdFilterPeerId>;
declare type IdFilterRoleId = RoleId;
declare const IdFilterRoleId: Codec<IdFilterRoleId>;
declare type IdFilterTriggerId = TriggerId;
declare const IdFilterTriggerId: Codec<IdFilterTriggerId>;
declare type IdentifiableBox__actual = Enum<['NewDomain', NewDomain] | ['NewAccount', NewAccount] | ['NewAssetDefinition', NewAssetDefinition] | ['NewRole', NewRole] | ['Peer', Peer] | ['Domain', Domain] | ['Account', Account] | ['AssetDefinition', AssetDefinition] | ['Asset', Asset] | ['Trigger', TriggerFilterBox] | ['Role', Role]>;
interface IdentifiableBox extends Opaque<IdentifiableBox__actual, IdentifiableBox> {
}
declare const IdentifiableBox: EnumCodecAndFactory<IdentifiableBox>;
interface IfExpression__actual {
    condition: EvaluatesToBool;
    then_expression: EvaluatesToValue;
    else_expression: EvaluatesToValue;
}
interface IfExpression extends Opaque<IfExpression__actual, IfExpression> {
}
declare const IfExpression: StructCodecAndFactory<IfExpression__actual, IfExpression>;
interface IfInstruction__actual {
    condition: EvaluatesToBool;
    then: Instruction;
    otherwise: OptionInstruction;
}
interface IfInstruction extends Opaque<IfInstruction__actual, IfInstruction> {
}
declare const IfInstruction: StructCodecAndFactory<IfInstruction__actual, IfInstruction>;
declare type Instruction__actual = Enum<['Register', RegisterBox] | ['Unregister', UnregisterBox] | ['Mint', MintBox] | ['Burn', BurnBox] | ['Transfer', TransferBox] | ['If', IfInstruction] | ['Pair', Pair] | ['Sequence', SequenceBox] | ['Fail', FailBox] | ['SetKeyValue', SetKeyValueBox] | ['RemoveKeyValue', RemoveKeyValueBox] | ['Grant', GrantBox] | ['Revoke', RevokeBox] | ['ExecuteTrigger', ExecuteTriggerBox]>;
interface Instruction extends Opaque<Instruction__actual, Instruction> {
}
declare const Instruction: EnumCodecAndFactory<Instruction>;
interface InstructionExecutionFail__actual {
    instruction: Instruction;
    reason: Str;
}
interface InstructionExecutionFail extends Opaque<InstructionExecutionFail__actual, InstructionExecutionFail> {
}
declare const InstructionExecutionFail: StructCodecAndFactory<InstructionExecutionFail__actual, InstructionExecutionFail>;
declare type IpfsPath = Str;
declare const IpfsPath: Codec<IpfsPath>;
interface Less__actual {
    left: EvaluatesToU32;
    right: EvaluatesToU32;
}
interface Less extends Opaque<Less__actual, Less> {
}
declare const Less: StructCodecAndFactory<Less__actual, Less>;
declare type MapAccountIdAccount__actual = Map<AccountId, Account>;
interface MapAccountIdAccount extends Opaque<MapAccountIdAccount__actual, MapAccountIdAccount> {
}
declare const MapAccountIdAccount: MapCodecAndFactory<MapAccountIdAccount__actual, MapAccountIdAccount>;
declare type MapAssetDefinitionIdAssetDefinitionEntry__actual = Map<AssetDefinitionId, AssetDefinitionEntry>;
interface MapAssetDefinitionIdAssetDefinitionEntry extends Opaque<MapAssetDefinitionIdAssetDefinitionEntry__actual, MapAssetDefinitionIdAssetDefinitionEntry> {
}
declare const MapAssetDefinitionIdAssetDefinitionEntry: MapCodecAndFactory<MapAssetDefinitionIdAssetDefinitionEntry__actual, MapAssetDefinitionIdAssetDefinitionEntry>;
declare type MapAssetIdAsset__actual = Map<AssetId, Asset>;
interface MapAssetIdAsset extends Opaque<MapAssetIdAsset__actual, MapAssetIdAsset> {
}
declare const MapAssetIdAsset: MapCodecAndFactory<MapAssetIdAsset__actual, MapAssetIdAsset>;
declare type MapNameValue__actual = Map<Name, Value>;
interface MapNameValue extends Opaque<MapNameValue__actual, MapNameValue> {
}
declare const MapNameValue: MapCodecAndFactory<MapNameValue__actual, MapNameValue>;
declare type MapPublicKeySignatureOfCommittedBlock__actual = Map<PublicKey, SignatureOfCommittedBlock>;
interface MapPublicKeySignatureOfCommittedBlock extends Opaque<MapPublicKeySignatureOfCommittedBlock__actual, MapPublicKeySignatureOfCommittedBlock> {
}
declare const MapPublicKeySignatureOfCommittedBlock: MapCodecAndFactory<MapPublicKeySignatureOfCommittedBlock__actual, MapPublicKeySignatureOfCommittedBlock>;
declare type MapPublicKeySignatureOfProof__actual = Map<PublicKey, SignatureOfProof>;
interface MapPublicKeySignatureOfProof extends Opaque<MapPublicKeySignatureOfProof__actual, MapPublicKeySignatureOfProof> {
}
declare const MapPublicKeySignatureOfProof: MapCodecAndFactory<MapPublicKeySignatureOfProof__actual, MapPublicKeySignatureOfProof>;
declare type MapPublicKeySignatureOfTransactionPayload__actual = Map<PublicKey, SignatureOfTransactionPayload>;
interface MapPublicKeySignatureOfTransactionPayload extends Opaque<MapPublicKeySignatureOfTransactionPayload__actual, MapPublicKeySignatureOfTransactionPayload> {
}
declare const MapPublicKeySignatureOfTransactionPayload: MapCodecAndFactory<MapPublicKeySignatureOfTransactionPayload__actual, MapPublicKeySignatureOfTransactionPayload>;
declare type MapStringEvaluatesToValue__actual = Map<Str, EvaluatesToValue>;
interface MapStringEvaluatesToValue extends Opaque<MapStringEvaluatesToValue__actual, MapStringEvaluatesToValue> {
}
declare const MapStringEvaluatesToValue: MapCodecAndFactory<MapStringEvaluatesToValue__actual, MapStringEvaluatesToValue>;
declare type MerkleTreeVersionedTransaction__actual = HashOfVersionedTransaction[];
interface MerkleTreeVersionedTransaction extends Opaque<MerkleTreeVersionedTransaction__actual, MerkleTreeVersionedTransaction> {
}
declare const MerkleTreeVersionedTransaction: ArrayCodecAndFactory<MerkleTreeVersionedTransaction__actual, MerkleTreeVersionedTransaction>;
interface Metadata__actual {
    map: MapNameValue;
}
interface Metadata extends Opaque<Metadata__actual, Metadata> {
}
declare const Metadata: StructCodecAndFactory<Metadata__actual, Metadata>;
interface MintBox__actual {
    object: EvaluatesToValue;
    destination_id: EvaluatesToIdBox;
}
interface MintBox extends Opaque<MintBox__actual, MintBox> {
}
declare const MintBox: StructCodecAndFactory<MintBox__actual, MintBox>;
declare type Mintable__actual = Enum<'Infinitely' | 'Once' | 'Not'>;
interface Mintable extends Opaque<Mintable__actual, Mintable> {
}
declare const Mintable: EnumCodecAndFactory<Mintable>;
interface MismatchValidatorType__actual {
    expected: ValidatorType;
    actual: ValidatorType;
}
interface MismatchValidatorType extends Opaque<MismatchValidatorType__actual, MismatchValidatorType> {
}
declare const MismatchValidatorType: StructCodecAndFactory<MismatchValidatorType__actual, MismatchValidatorType>;
interface Mod__actual {
    left: EvaluatesToU32;
    right: EvaluatesToU32;
}
interface Mod extends Opaque<Mod__actual, Mod> {
}
declare const Mod: StructCodecAndFactory<Mod__actual, Mod>;
interface Multiply__actual {
    left: EvaluatesToU32;
    right: EvaluatesToU32;
}
interface Multiply extends Opaque<Multiply__actual, Multiply> {
}
declare const Multiply: StructCodecAndFactory<Multiply__actual, Multiply>;
declare type Name = Str;
declare const Name: Codec<Name>;
interface NewAccount__actual {
    id: AccountId;
    signatories: VecPublicKey;
    metadata: Metadata;
}
interface NewAccount extends Opaque<NewAccount__actual, NewAccount> {
}
declare const NewAccount: StructCodecAndFactory<NewAccount__actual, NewAccount>;
interface NewAssetDefinition__actual {
    id: AssetDefinitionId;
    value_type: AssetValueType;
    mintable: Mintable;
    metadata: Metadata;
}
interface NewAssetDefinition extends Opaque<NewAssetDefinition__actual, NewAssetDefinition> {
}
declare const NewAssetDefinition: StructCodecAndFactory<NewAssetDefinition__actual, NewAssetDefinition>;
interface NewDomain__actual {
    id: DomainId;
    logo: OptionIpfsPath;
    metadata: Metadata;
}
interface NewDomain extends Opaque<NewDomain__actual, NewDomain> {
}
declare const NewDomain: StructCodecAndFactory<NewDomain__actual, NewDomain>;
interface NewRole__actual {
    inner: Role;
}
interface NewRole extends Opaque<NewRole__actual, NewRole> {
}
declare const NewRole: StructCodecAndFactory<NewRole__actual, NewRole>;

interface Not__actual {
    expression: EvaluatesToBool;
}
interface Not extends Opaque<Not__actual, Not> {
}
declare const Not: StructCodecAndFactory<Not__actual, Not>;
interface NotPermittedFail__actual {
    reason: Str;
}
interface NotPermittedFail extends Opaque<NotPermittedFail__actual, NotPermittedFail> {
}
declare const NotPermittedFail: StructCodecAndFactory<NotPermittedFail__actual, NotPermittedFail>;
interface OptionDuration__actual extends Option<Duration> {
}
interface OptionDuration extends Opaque<OptionDuration__actual, OptionDuration> {
}
declare const OptionDuration: EnumCodecAndFactory<OptionDuration>;
interface OptionHash__actual extends Option<Hash> {
}
interface OptionHash extends Opaque<OptionHash__actual, OptionHash> {
}
declare const OptionHash: EnumCodecAndFactory<OptionHash>;
interface OptionInstruction__actual extends Option<Instruction> {
}
interface OptionInstruction extends Opaque<OptionInstruction__actual, OptionInstruction> {
}
declare const OptionInstruction: EnumCodecAndFactory<OptionInstruction>;
interface OptionIpfsPath__actual extends Option<IpfsPath> {
}
interface OptionIpfsPath extends Opaque<OptionIpfsPath__actual, OptionIpfsPath> {
}
declare const OptionIpfsPath: EnumCodecAndFactory<OptionIpfsPath>;
interface OptionPipelineEntityKind__actual extends Option<PipelineEntityKind> {
}
interface OptionPipelineEntityKind extends Opaque<OptionPipelineEntityKind__actual, OptionPipelineEntityKind> {
}
declare const OptionPipelineEntityKind: EnumCodecAndFactory<OptionPipelineEntityKind>;
interface OptionPipelineStatusKind__actual extends Option<PipelineStatusKind> {
}
interface OptionPipelineStatusKind extends Opaque<OptionPipelineStatusKind__actual, OptionPipelineStatusKind> {
}
declare const OptionPipelineStatusKind: EnumCodecAndFactory<OptionPipelineStatusKind>;
interface OptionTimeInterval__actual extends Option<TimeInterval> {
}
interface OptionTimeInterval extends Opaque<OptionTimeInterval__actual, OptionTimeInterval> {
}
declare const OptionTimeInterval: EnumCodecAndFactory<OptionTimeInterval>;
interface OptionTopology__actual extends Option<Topology> {
}
interface OptionTopology extends Opaque<OptionTopology__actual, OptionTopology> {
}
declare const OptionTopology: EnumCodecAndFactory<OptionTopology>;
interface OptionU32__actual extends Option<U32> {
}
interface OptionU32 extends Opaque<OptionU32__actual, OptionU32> {
}
declare const OptionU32: EnumCodecAndFactory<OptionU32>;
interface Or__actual {
    left: EvaluatesToBool;
    right: EvaluatesToBool;
}
interface Or extends Opaque<Or__actual, Or> {
}
declare const Or: StructCodecAndFactory<Or__actual, Or>;
interface PaginatedQueryResult__actual {
    result: QueryResult;
    filter: PredicateBox;
    pagination: Pagination;
    total: U64;
}
interface PaginatedQueryResult extends Opaque<PaginatedQueryResult__actual, PaginatedQueryResult> {
}
declare const PaginatedQueryResult: StructCodecAndFactory<PaginatedQueryResult__actual, PaginatedQueryResult>;
interface Pagination__actual {
    start: OptionU32;
    limit: OptionU32;
}
interface Pagination extends Opaque<Pagination__actual, Pagination> {
}
declare const Pagination: StructCodecAndFactory<Pagination__actual, Pagination>;
interface Pair__actual {
    left_instruction: Instruction;
    right_instruction: Instruction;
}
interface Pair extends Opaque<Pair__actual, Pair> {
}
declare const Pair: StructCodecAndFactory<Pair__actual, Pair>;
declare type Parameter__actual = Enum<['MaximumFaultyPeersAmount', U32] | ['BlockTime', U128] | ['CommitTime', U128] | ['TransactionReceiptTime', U128]>;
interface Parameter extends Opaque<Parameter__actual, Parameter> {
}
declare const Parameter: EnumCodecAndFactory<Parameter>;
interface Peer__actual {
    id: PeerId;
}
interface Peer extends Opaque<Peer__actual, Peer> {
}
declare const Peer: StructCodecAndFactory<Peer__actual, Peer>;
declare type PeerEvent__actual = Enum<['Added', PeerId] | ['Removed', PeerId]>;
interface PeerEvent extends Opaque<PeerEvent__actual, PeerEvent> {
}
declare const PeerEvent: EnumCodecAndFactory<PeerEvent>;
declare type PeerEventFilter__actual = Enum<'ByAdded' | 'ByRemoved'>;
interface PeerEventFilter extends Opaque<PeerEventFilter__actual, PeerEventFilter> {
}
declare const PeerEventFilter: EnumCodecAndFactory<PeerEventFilter>;
interface PeerFilter__actual {
    id_filter: FilterOptIdFilterPeerId;
    event_filter: FilterOptPeerEventFilter;
}
interface PeerFilter extends Opaque<PeerFilter__actual, PeerFilter> {
}
declare const PeerFilter: StructCodecAndFactory<PeerFilter__actual, PeerFilter>;
interface PeerId__actual {
    address: Str;
    public_key: PublicKey;
}
interface PeerId extends Opaque<PeerId__actual, PeerId> {
}
declare const PeerId: StructCodecAndFactory<PeerId__actual, PeerId>;
interface PermissionToken__actual {
    name: Name;
    params: MapNameValue;
}
interface PermissionToken extends Opaque<PermissionToken__actual, PermissionToken> {
}
declare const PermissionToken: StructCodecAndFactory<PermissionToken__actual, PermissionToken>;
declare type PipelineEntityKind__actual = Enum<'Block' | 'Transaction'>;
interface PipelineEntityKind extends Opaque<PipelineEntityKind__actual, PipelineEntityKind> {
}
declare const PipelineEntityKind: EnumCodecAndFactory<PipelineEntityKind>;
interface PipelineEvent__actual {
    entity_kind: PipelineEntityKind;
    status: PipelineStatus;
    hash: Hash;
}
interface PipelineEvent extends Opaque<PipelineEvent__actual, PipelineEvent> {
}
declare const PipelineEvent: StructCodecAndFactory<PipelineEvent__actual, PipelineEvent>;
interface PipelineEventFilter__actual {
    entity_kind: OptionPipelineEntityKind;
    status_kind: OptionPipelineStatusKind;
    hash: OptionHash;
}
interface PipelineEventFilter extends Opaque<PipelineEventFilter__actual, PipelineEventFilter> {
}
declare const PipelineEventFilter: StructCodecAndFactory<PipelineEventFilter__actual, PipelineEventFilter>;
declare type PipelineStatus__actual = Enum<'Validating' | ['Rejected', RejectionReason] | 'Committed'>;
interface PipelineStatus extends Opaque<PipelineStatus__actual, PipelineStatus> {
}
declare const PipelineStatus: EnumCodecAndFactory<PipelineStatus>;
declare type PipelineStatusKind__actual = Enum<'Validating' | 'Rejected' | 'Committed'>;
interface PipelineStatusKind extends Opaque<PipelineStatusKind__actual, PipelineStatusKind> {
}
declare const PipelineStatusKind: EnumCodecAndFactory<PipelineStatusKind>;
declare type Predicate__actual = Enum<['Identifiable', Predicate] | ['Container', Container] | ['Display', Predicate] | ['Numerical', Range] | ['TimeStamp', SemiIntervalU128] | 'Pass'>;
interface Predicate extends Opaque<Predicate__actual, Predicate> {
}
declare const Predicate: EnumCodecAndFactory<Predicate>;
declare type PredicateBox__actual = Enum<['And', VecPredicateBox] | ['Or', VecPredicateBox] | ['Not', PredicateBox] | ['Raw', Predicate]>;
interface PredicateBox extends Opaque<PredicateBox__actual, PredicateBox> {
}
declare const PredicateBox: EnumCodecAndFactory<PredicateBox>;
interface Proof__actual {
    payload: ProofPayload;
    signatures: SignaturesOfProof;
}
interface Proof extends Opaque<Proof__actual, Proof> {
}
declare const Proof: StructCodecAndFactory<Proof__actual, Proof>;
interface ProofChain__actual {
    proofs: VecProof;
}
interface ProofChain extends Opaque<ProofChain__actual, ProofChain> {
}
declare const ProofChain: StructCodecAndFactory<ProofChain__actual, ProofChain>;
interface ProofPayload__actual {
    previous_proof: HashOfProof;
    latest_block: HashOfVersionedCommittedBlock;
    reason: Reason;
}
interface ProofPayload extends Opaque<ProofPayload__actual, ProofPayload> {
}
declare const ProofPayload: StructCodecAndFactory<ProofPayload__actual, ProofPayload>;
interface PublicKey__actual {
    digest_function: Str;
    payload: VecU8;
}
interface PublicKey extends Opaque<PublicKey__actual, PublicKey> {
}
declare const PublicKey: StructCodecAndFactory<PublicKey__actual, PublicKey>;
declare type QueryBox__actual = Enum<['FindAllAccounts', Void] | ['FindAccountById', FindAccountById] | ['FindAccountKeyValueByIdAndKey', FindAccountKeyValueByIdAndKey] | ['FindAccountsByName', FindAccountsByName] | ['FindAccountsByDomainId', FindAccountsByDomainId] | ['FindAccountsWithAsset', FindAccountsWithAsset] | ['FindAllAssets', Void] | ['FindAllAssetsDefinitions', Void] | ['FindAssetById', FindAssetById] | ['FindAssetDefinitionById', FindAssetDefinitionById] | ['FindAssetsByName', FindAssetsByName] | ['FindAssetsByAccountId', FindAssetsByAccountId] | ['FindAssetsByAssetDefinitionId', FindAssetsByAssetDefinitionId] | ['FindAssetsByDomainId', FindAssetsByDomainId] | ['FindAssetsByDomainIdAndAssetDefinitionId', FindAssetsByDomainIdAndAssetDefinitionId] | ['FindAssetQuantityById', FindAssetQuantityById] | ['FindAssetKeyValueByIdAndKey', FindAssetKeyValueByIdAndKey] | ['FindAssetDefinitionKeyValueByIdAndKey', FindAssetDefinitionKeyValueByIdAndKey] | ['FindAllDomains', Void] | ['FindDomainById', FindDomainById] | ['FindDomainKeyValueByIdAndKey', FindDomainKeyValueByIdAndKey] | ['FindAllPeers', Void] | ['FindAllBlocks', Void] | ['FindAllTransactions', Void] | ['FindTransactionsByAccountId', FindTransactionsByAccountId] | ['FindTransactionByHash', FindTransactionByHash] | ['FindPermissionTokensByAccountId', FindPermissionTokensByAccountId] | ['FindAllActiveTriggerIds', Void] | ['FindTriggerById', FindTriggerById] | ['FindTriggerKeyValueByIdAndKey', FindTriggerKeyValueByIdAndKey] | ['FindTriggersByDomainId', FindTriggersByDomainId] | ['FindAllRoles', Void] | ['FindAllRoleIds', Void] | ['FindRoleByRoleId', FindRoleByRoleId] | ['FindRolesByAccountId', FindRolesByAccountId]>;
interface QueryBox extends Opaque<QueryBox__actual, QueryBox> {
}
declare const QueryBox: EnumCodecAndFactory<QueryBox>;
declare type QueryError__actual = Enum<['Decode', VersionError] | ['Signature', Str] | ['Permission', DenialReason] | ['Evaluate', Str] | ['Find', FindError] | ['Conversion', Str]>;
interface QueryError extends Opaque<QueryError__actual, QueryError> {
}
declare const QueryError: EnumCodecAndFactory<QueryError>;
interface QueryPayload__actual {
    timestamp_ms: Compact;
    query: QueryBox;
    account_id: AccountId;
    filter: PredicateBox;
}
interface QueryPayload extends Opaque<QueryPayload__actual, QueryPayload> {
}
declare const QueryPayload: StructCodecAndFactory<QueryPayload__actual, QueryPayload>;
declare type QueryResult = Value;
declare const QueryResult: Codec<QueryResult>;
interface RaiseTo__actual {
    left: EvaluatesToU32;
    right: EvaluatesToU32;
}
interface RaiseTo extends Opaque<RaiseTo__actual, RaiseTo> {
}
declare const RaiseTo: StructCodecAndFactory<RaiseTo__actual, RaiseTo>;
declare type Range__actual = Enum<['U32', SemiIntervalU32] | ['U128', SemiIntervalU128] | ['Fixed', SemiIntervalFixed]>;
interface Range extends Opaque<Range__actual, Range> {
}
declare const Range: EnumCodecAndFactory<Range>;
interface RawGenesisBlock__actual {
    transactions: VecGenesisTransaction;
}
interface RawGenesisBlock extends Opaque<RawGenesisBlock__actual, RawGenesisBlock> {
}
declare const RawGenesisBlock: StructCodecAndFactory<RawGenesisBlock__actual, RawGenesisBlock>;
declare type RawVersioned__actual = Enum<['Json', Str] | ['ScaleBytes', VecU8]>;
interface RawVersioned extends Opaque<RawVersioned__actual, RawVersioned> {
}
declare const RawVersioned: EnumCodecAndFactory<RawVersioned>;
declare type Reason__actual = Enum<['CommitTimeout', CommitTimeout] | ['NoTransactionReceiptReceived', Void] | ['BlockCreationTimeout', Void]>;
interface Reason extends Opaque<Reason__actual, Reason> {
}
declare const Reason: EnumCodecAndFactory<Reason>;
interface RegisterBox__actual {
    object: EvaluatesToRegistrableBox;
}
interface RegisterBox extends Opaque<RegisterBox__actual, RegisterBox> {
}
declare const RegisterBox: StructCodecAndFactory<RegisterBox__actual, RegisterBox>;
declare type RegistrableBox__actual = Enum<['Peer', Peer] | ['Domain', NewDomain] | ['Account', NewAccount] | ['AssetDefinition', NewAssetDefinition] | ['Asset', Asset] | ['Trigger', TriggerFilterBox] | ['Role', NewRole]>;
interface RegistrableBox extends Opaque<RegistrableBox__actual, RegistrableBox> {
}
declare const RegistrableBox: EnumCodecAndFactory<RegistrableBox>;
interface RejectedTransaction__actual {
    payload: TransactionPayload;
    signatures: SignaturesOfTransactionPayload;
    rejection_reason: TransactionRejectionReason;
}
interface RejectedTransaction extends Opaque<RejectedTransaction__actual, RejectedTransaction> {
}
declare const RejectedTransaction: StructCodecAndFactory<RejectedTransaction__actual, RejectedTransaction>;
declare type RejectionReason__actual = Enum<['Block', BlockRejectionReason] | ['Transaction', TransactionRejectionReason]>;
interface RejectionReason extends Opaque<RejectionReason__actual, RejectionReason> {
}
declare const RejectionReason: EnumCodecAndFactory<RejectionReason>;
interface RemoveKeyValueBox__actual {
    object_id: EvaluatesToIdBox;
    key: EvaluatesToName;
}
interface RemoveKeyValueBox extends Opaque<RemoveKeyValueBox__actual, RemoveKeyValueBox> {
}
declare const RemoveKeyValueBox: StructCodecAndFactory<RemoveKeyValueBox__actual, RemoveKeyValueBox>;
declare type Repeats__actual = Enum<'Indefinitely' | ['Exactly', U32]>;
interface Repeats extends Opaque<Repeats__actual, Repeats> {
}
declare const Repeats: EnumCodecAndFactory<Repeats>;
interface RevokeBox__actual {
    object: EvaluatesToValue;
    destination_id: EvaluatesToIdBox;
}
interface RevokeBox extends Opaque<RevokeBox__actual, RevokeBox> {
}
declare const RevokeBox: StructCodecAndFactory<RevokeBox__actual, RevokeBox>;
interface Role__actual {
    id: RoleId;
    permissions: VecPermissionToken;
}
interface Role extends Opaque<Role__actual, Role> {
}
declare const Role: StructCodecAndFactory<Role__actual, Role>;
declare type RoleEvent__actual = Enum<['Created', RoleId] | ['Deleted', RoleId]>;
interface RoleEvent extends Opaque<RoleEvent__actual, RoleEvent> {
}
declare const RoleEvent: EnumCodecAndFactory<RoleEvent>;
declare type RoleEventFilter__actual = Enum<'ByCreated' | 'ByDeleted'>;
interface RoleEventFilter extends Opaque<RoleEventFilter__actual, RoleEventFilter> {
}
declare const RoleEventFilter: EnumCodecAndFactory<RoleEventFilter>;
interface RoleFilter__actual {
    id_filter: FilterOptIdFilterRoleId;
    event_filter: FilterOptRoleEventFilter;
}
interface RoleFilter extends Opaque<RoleFilter__actual, RoleFilter> {
}
declare const RoleFilter: StructCodecAndFactory<RoleFilter__actual, RoleFilter>;
interface RoleId__actual {
    name: Name;
}
interface RoleId extends Opaque<RoleId__actual, RoleId> {
}
declare const RoleId: StructCodecAndFactory<RoleId__actual, RoleId>;
interface SemiIntervalFixed__actual {
    start: Fixed;
    limit: Fixed;
}
interface SemiIntervalFixed extends Opaque<SemiIntervalFixed__actual, SemiIntervalFixed> {
}
declare const SemiIntervalFixed: StructCodecAndFactory<SemiIntervalFixed__actual, SemiIntervalFixed>;
interface SemiIntervalU128__actual {
    start: U128;
    limit: U128;
}
interface SemiIntervalU128 extends Opaque<SemiIntervalU128__actual, SemiIntervalU128> {
}
declare const SemiIntervalU128: StructCodecAndFactory<SemiIntervalU128__actual, SemiIntervalU128>;
interface SemiIntervalU32__actual {
    start: U32;
    limit: U32;
}
interface SemiIntervalU32 extends Opaque<SemiIntervalU32__actual, SemiIntervalU32> {
}
declare const SemiIntervalU32: StructCodecAndFactory<SemiIntervalU32__actual, SemiIntervalU32>;
interface SequenceBox__actual {
    instructions: VecInstruction;
}
interface SequenceBox extends Opaque<SequenceBox__actual, SequenceBox> {
}
declare const SequenceBox: StructCodecAndFactory<SequenceBox__actual, SequenceBox>;
interface SetKeyValueBox__actual {
    object_id: EvaluatesToIdBox;
    key: EvaluatesToName;
    value: EvaluatesToValue;
}
interface SetKeyValueBox extends Opaque<SetKeyValueBox__actual, SetKeyValueBox> {
}
declare const SetKeyValueBox: StructCodecAndFactory<SetKeyValueBox__actual, SetKeyValueBox>;
interface Signature__actual {
    public_key: PublicKey;
    payload: VecU8;
}
interface Signature extends Opaque<Signature__actual, Signature> {
}
declare const Signature: StructCodecAndFactory<Signature__actual, Signature>;
declare type SignatureCheckCondition = EvaluatesToBool;
declare const SignatureCheckCondition: Codec<SignatureCheckCondition>;
declare type SignatureOfCommittedBlock = Signature;
declare const SignatureOfCommittedBlock: Codec<SignatureOfCommittedBlock>;
declare type SignatureOfProof = Signature;
declare const SignatureOfProof: Codec<SignatureOfProof>;
declare type SignatureOfQueryPayload = Signature;
declare const SignatureOfQueryPayload: Codec<SignatureOfQueryPayload>;
declare type SignatureOfTransactionPayload = Signature;
declare const SignatureOfTransactionPayload: Codec<SignatureOfTransactionPayload>;
declare type SignatureOfValidBlock = Signature;
declare const SignatureOfValidBlock: Codec<SignatureOfValidBlock>;
interface SignaturesOfCommittedBlock__actual {
    signatures: MapPublicKeySignatureOfCommittedBlock;
}
interface SignaturesOfCommittedBlock extends Opaque<SignaturesOfCommittedBlock__actual, SignaturesOfCommittedBlock> {
}
declare const SignaturesOfCommittedBlock: StructCodecAndFactory<SignaturesOfCommittedBlock__actual, SignaturesOfCommittedBlock>;
interface SignaturesOfProof__actual {
    signatures: MapPublicKeySignatureOfProof;
}
interface SignaturesOfProof extends Opaque<SignaturesOfProof__actual, SignaturesOfProof> {
}
declare const SignaturesOfProof: StructCodecAndFactory<SignaturesOfProof__actual, SignaturesOfProof>;
interface SignaturesOfTransactionPayload__actual {
    signatures: MapPublicKeySignatureOfTransactionPayload;
}
interface SignaturesOfTransactionPayload extends Opaque<SignaturesOfTransactionPayload__actual, SignaturesOfTransactionPayload> {
}
declare const SignaturesOfTransactionPayload: StructCodecAndFactory<SignaturesOfTransactionPayload__actual, SignaturesOfTransactionPayload>;
interface SignedQueryRequest__actual {
    payload: QueryPayload;
    signature: SignatureOfQueryPayload;
}
interface SignedQueryRequest extends Opaque<SignedQueryRequest__actual, SignedQueryRequest> {
}
declare const SignedQueryRequest: StructCodecAndFactory<SignedQueryRequest__actual, SignedQueryRequest>;
interface Subtract__actual {
    left: EvaluatesToU32;
    right: EvaluatesToU32;
}
interface Subtract extends Opaque<Subtract__actual, Subtract> {
}
declare const Subtract: StructCodecAndFactory<Subtract__actual, Subtract>;
interface TimeEvent__actual {
    prev_interval: OptionTimeInterval;
    interval: TimeInterval;
}
interface TimeEvent extends Opaque<TimeEvent__actual, TimeEvent> {
}
declare const TimeEvent: StructCodecAndFactory<TimeEvent__actual, TimeEvent>;
declare type TimeEventFilter = ExecutionTime;
declare const TimeEventFilter: Codec<TimeEventFilter>;
interface TimeInterval__actual {
    since: Duration;
    length: Duration;
}
interface TimeInterval extends Opaque<TimeInterval__actual, TimeInterval> {
}
declare const TimeInterval: StructCodecAndFactory<TimeInterval__actual, TimeInterval>;
interface TimeSchedule__actual {
    start: Duration;
    period: OptionDuration;
}
interface TimeSchedule extends Opaque<TimeSchedule__actual, TimeSchedule> {
}
declare const TimeSchedule: StructCodecAndFactory<TimeSchedule__actual, TimeSchedule>;
interface Topology__actual {
    sorted_peers: VecPeerId;
    at_block: HashOfVersionedCommittedBlock;
    view_change_proofs: ProofChain;
}
interface Topology extends Opaque<Topology__actual, Topology> {
}
declare const Topology: StructCodecAndFactory<Topology__actual, Topology>;
interface Transaction__actual {
    payload: TransactionPayload;
    signatures: VecSignatureOfTransactionPayload;
}
interface Transaction extends Opaque<Transaction__actual, Transaction> {
}
declare const Transaction: StructCodecAndFactory<Transaction__actual, Transaction>;
declare type TransactionLimitError = Str;
declare const TransactionLimitError: Codec<TransactionLimitError>;
interface TransactionPayload__actual {
    account_id: AccountId;
    instructions: Executable;
    creation_time: U64;
    time_to_live_ms: U64;
    nonce: OptionU32;
    metadata: MapNameValue;
}
interface TransactionPayload extends Opaque<TransactionPayload__actual, TransactionPayload> {
}
declare const TransactionPayload: StructCodecAndFactory<TransactionPayload__actual, TransactionPayload>;
declare type TransactionRejectionReason__actual = Enum<['NotPermitted', NotPermittedFail] | ['UnsatisfiedSignatureCondition', UnsatisfiedSignatureConditionFail] | ['LimitCheck', TransactionLimitError] | ['InstructionExecution', InstructionExecutionFail] | ['WasmExecution', WasmExecutionFail] | 'UnexpectedGenesisAccountSignature'>;
interface TransactionRejectionReason extends Opaque<TransactionRejectionReason__actual, TransactionRejectionReason> {
}
declare const TransactionRejectionReason: EnumCodecAndFactory<TransactionRejectionReason>;
declare type TransactionValue__actual = Enum<['Transaction', VersionedTransaction] | ['RejectedTransaction', VersionedRejectedTransaction]>;
interface TransactionValue extends Opaque<TransactionValue__actual, TransactionValue> {
}
declare const TransactionValue: EnumCodecAndFactory<TransactionValue>;
interface TransferBox__actual {
    source_id: EvaluatesToIdBox;
    object: EvaluatesToValue;
    destination_id: EvaluatesToIdBox;
}
interface TransferBox extends Opaque<TransferBox__actual, TransferBox> {
}
declare const TransferBox: StructCodecAndFactory<TransferBox__actual, TransferBox>;
declare type TriggerEvent__actual = Enum<['Created', TriggerId] | ['Deleted', TriggerId] | ['Extended', TriggerId] | ['Shortened', TriggerId]>;
interface TriggerEvent extends Opaque<TriggerEvent__actual, TriggerEvent> {
}
declare const TriggerEvent: EnumCodecAndFactory<TriggerEvent>;
declare type TriggerEventFilter__actual = Enum<'ByCreated' | 'ByDeleted' | 'ByExtended' | 'ByShortened'>;
interface TriggerEventFilter extends Opaque<TriggerEventFilter__actual, TriggerEventFilter> {
}
declare const TriggerEventFilter: EnumCodecAndFactory<TriggerEventFilter>;
interface TriggerFilter__actual {
    id_filter: FilterOptIdFilterTriggerId;
    event_filter: FilterOptTriggerEventFilter;
}
interface TriggerFilter extends Opaque<TriggerFilter__actual, TriggerFilter> {
}
declare const TriggerFilter: StructCodecAndFactory<TriggerFilter__actual, TriggerFilter>;
interface TriggerFilterBox__actual {
    id: TriggerId;
    action: ActionFilterBox;
}
interface TriggerFilterBox extends Opaque<TriggerFilterBox__actual, TriggerFilterBox> {
}
declare const TriggerFilterBox: StructCodecAndFactory<TriggerFilterBox__actual, TriggerFilterBox>;
interface TriggerId__actual {
    name: Name;
}
interface TriggerId extends Opaque<TriggerId__actual, TriggerId> {
}
declare const TriggerId: StructCodecAndFactory<TriggerId__actual, TriggerId>;
interface UnregisterBox__actual {
    object_id: EvaluatesToIdBox;
}
interface UnregisterBox extends Opaque<UnregisterBox__actual, UnregisterBox> {
}
declare const UnregisterBox: StructCodecAndFactory<UnregisterBox__actual, UnregisterBox>;
interface UnsatisfiedSignatureConditionFail__actual {
    reason: Str;
}
interface UnsatisfiedSignatureConditionFail extends Opaque<UnsatisfiedSignatureConditionFail__actual, UnsatisfiedSignatureConditionFail> {
}
declare const UnsatisfiedSignatureConditionFail: StructCodecAndFactory<UnsatisfiedSignatureConditionFail__actual, UnsatisfiedSignatureConditionFail>;
interface UnsupportedVersion__actual {
    version: U8;
    raw: RawVersioned;
}
interface UnsupportedVersion extends Opaque<UnsupportedVersion__actual, UnsupportedVersion> {
}
declare const UnsupportedVersion: StructCodecAndFactory<UnsupportedVersion__actual, UnsupportedVersion>;
interface ValidBlock__actual {
    header: BlockHeader;
    rejected_transactions: VecVersionedRejectedTransaction;
    transactions: VecVersionedValidTransaction;
    signatures: VecSignatureOfValidBlock;
    event_recommendations: VecEvent;
}
interface ValidBlock extends Opaque<ValidBlock__actual, ValidBlock> {
}
declare const ValidBlock: StructCodecAndFactory<ValidBlock__actual, ValidBlock>;
interface ValidTransaction__actual {
    payload: TransactionPayload;
    signatures: SignaturesOfTransactionPayload;
}
interface ValidTransaction extends Opaque<ValidTransaction__actual, ValidTransaction> {
}
declare const ValidTransaction: StructCodecAndFactory<ValidTransaction__actual, ValidTransaction>;
declare type ValidatorType__actual = Enum<'Instruction' | 'Query' | 'Expression'>;
interface ValidatorType extends Opaque<ValidatorType__actual, ValidatorType> {
}
declare const ValidatorType: EnumCodecAndFactory<ValidatorType>;
declare type Value__actual = Enum<['U32', U32] | ['U128', U128] | ['Bool', Bool] | ['String', Str] | ['Name', Name] | ['Fixed', Fixed] | ['Vec', VecValue] | ['LimitedMetadata', Metadata] | ['Id', IdBox] | ['Identifiable', IdentifiableBox] | ['PublicKey', PublicKey] | ['Parameter', Parameter] | ['SignatureCheckCondition', SignatureCheckCondition] | ['TransactionValue', TransactionValue] | ['PermissionToken', PermissionToken] | ['Hash', Hash] | ['Block', BlockValue]>;
interface Value extends Opaque<Value__actual, Value> {
}
declare const Value: EnumCodecAndFactory<Value>;
interface ValueOfKey__actual {
    key: Name;
    predicate: Predicate;
}
interface ValueOfKey extends Opaque<ValueOfKey__actual, ValueOfKey> {
}
declare const ValueOfKey: StructCodecAndFactory<ValueOfKey__actual, ValueOfKey>;
declare type VecEvent__actual = Event[];
interface VecEvent extends Opaque<VecEvent__actual, VecEvent> {
}
declare const VecEvent: ArrayCodecAndFactory<VecEvent__actual, VecEvent>;
declare type VecGenesisTransaction__actual = GenesisTransaction[];
interface VecGenesisTransaction extends Opaque<VecGenesisTransaction__actual, VecGenesisTransaction> {
}
declare const VecGenesisTransaction: ArrayCodecAndFactory<VecGenesisTransaction__actual, VecGenesisTransaction>;
declare type VecHash__actual = Hash[];
interface VecHash extends Opaque<VecHash__actual, VecHash> {
}
declare const VecHash: ArrayCodecAndFactory<VecHash__actual, VecHash>;
declare type VecHashOfVersionedValidBlock__actual = HashOfVersionedValidBlock[];
interface VecHashOfVersionedValidBlock extends Opaque<VecHashOfVersionedValidBlock__actual, VecHashOfVersionedValidBlock> {
}
declare const VecHashOfVersionedValidBlock: ArrayCodecAndFactory<VecHashOfVersionedValidBlock__actual, VecHashOfVersionedValidBlock>;
declare type VecInstruction__actual = Instruction[];
interface VecInstruction extends Opaque<VecInstruction__actual, VecInstruction> {
}
declare const VecInstruction: ArrayCodecAndFactory<VecInstruction__actual, VecInstruction>;
declare type VecPeerId__actual = PeerId[];
interface VecPeerId extends Opaque<VecPeerId__actual, VecPeerId> {
}
declare const VecPeerId: ArrayCodecAndFactory<VecPeerId__actual, VecPeerId>;
declare type VecPermissionToken__actual = PermissionToken[];
interface VecPermissionToken extends Opaque<VecPermissionToken__actual, VecPermissionToken> {
}
declare const VecPermissionToken: ArrayCodecAndFactory<VecPermissionToken__actual, VecPermissionToken>;
declare type VecPredicateBox__actual = PredicateBox[];
interface VecPredicateBox extends Opaque<VecPredicateBox__actual, VecPredicateBox> {
}
declare const VecPredicateBox: ArrayCodecAndFactory<VecPredicateBox__actual, VecPredicateBox>;
declare type VecProof__actual = Proof[];
interface VecProof extends Opaque<VecProof__actual, VecProof> {
}
declare const VecProof: ArrayCodecAndFactory<VecProof__actual, VecProof>;
declare type VecPublicKey__actual = PublicKey[];
interface VecPublicKey extends Opaque<VecPublicKey__actual, VecPublicKey> {
}
declare const VecPublicKey: ArrayCodecAndFactory<VecPublicKey__actual, VecPublicKey>;
declare type VecRoleId__actual = RoleId[];
interface VecRoleId extends Opaque<VecRoleId__actual, VecRoleId> {
}
declare const VecRoleId: ArrayCodecAndFactory<VecRoleId__actual, VecRoleId>;
declare type VecSignatureOfTransactionPayload__actual = SignatureOfTransactionPayload[];
interface VecSignatureOfTransactionPayload extends Opaque<VecSignatureOfTransactionPayload__actual, VecSignatureOfTransactionPayload> {
}
declare const VecSignatureOfTransactionPayload: ArrayCodecAndFactory<VecSignatureOfTransactionPayload__actual, VecSignatureOfTransactionPayload>;
declare type VecSignatureOfValidBlock__actual = SignatureOfValidBlock[];
interface VecSignatureOfValidBlock extends Opaque<VecSignatureOfValidBlock__actual, VecSignatureOfValidBlock> {
}
declare const VecSignatureOfValidBlock: ArrayCodecAndFactory<VecSignatureOfValidBlock__actual, VecSignatureOfValidBlock>;
declare type VecValue__actual = Value[];
interface VecValue extends Opaque<VecValue__actual, VecValue> {
}
declare const VecValue: ArrayCodecAndFactory<VecValue__actual, VecValue>;
declare type VecVersionedRejectedTransaction__actual = VersionedRejectedTransaction[];
interface VecVersionedRejectedTransaction extends Opaque<VecVersionedRejectedTransaction__actual, VecVersionedRejectedTransaction> {
}
declare const VecVersionedRejectedTransaction: ArrayCodecAndFactory<VecVersionedRejectedTransaction__actual, VecVersionedRejectedTransaction>;
declare type VecVersionedValidTransaction__actual = VersionedValidTransaction[];
interface VecVersionedValidTransaction extends Opaque<VecVersionedValidTransaction__actual, VecVersionedValidTransaction> {
}
declare const VecVersionedValidTransaction: ArrayCodecAndFactory<VecVersionedValidTransaction__actual, VecVersionedValidTransaction>;
declare type VersionError__actual = Enum<'NotVersioned' | 'UnsupportedJsonEncode' | 'ExpectedJson' | 'UnsupportedScaleEncode' | 'Serde' | 'ParityScale' | 'ParseInt' | ['UnsupportedVersion', UnsupportedVersion] | ['ExtraBytesLeft', U64]>;
interface VersionError extends Opaque<VersionError__actual, VersionError> {
}
declare const VersionError: EnumCodecAndFactory<VersionError>;
declare type VersionedBlockPublisherMessage__actual = Enum<['V1', BlockPublisherMessage]>;
interface VersionedBlockPublisherMessage extends Opaque<VersionedBlockPublisherMessage__actual, VersionedBlockPublisherMessage> {
}
declare const VersionedBlockPublisherMessage: EnumCodecAndFactory<VersionedBlockPublisherMessage>;
declare type VersionedBlockSubscriberMessage__actual = Enum<['V1', BlockSubscriberMessage]>;
interface VersionedBlockSubscriberMessage extends Opaque<VersionedBlockSubscriberMessage__actual, VersionedBlockSubscriberMessage> {
}
declare const VersionedBlockSubscriberMessage: EnumCodecAndFactory<VersionedBlockSubscriberMessage>;
declare type VersionedCommittedBlock__actual = Enum<['V1', CommittedBlock]>;
interface VersionedCommittedBlock extends Opaque<VersionedCommittedBlock__actual, VersionedCommittedBlock> {
}
declare const VersionedCommittedBlock: EnumCodecAndFactory<VersionedCommittedBlock>;
declare type VersionedEventPublisherMessage__actual = Enum<['V1', EventPublisherMessage]>;
interface VersionedEventPublisherMessage extends Opaque<VersionedEventPublisherMessage__actual, VersionedEventPublisherMessage> {
}
declare const VersionedEventPublisherMessage: EnumCodecAndFactory<VersionedEventPublisherMessage>;
declare type VersionedEventSubscriberMessage__actual = Enum<['V1', EventSubscriberMessage]>;
interface VersionedEventSubscriberMessage extends Opaque<VersionedEventSubscriberMessage__actual, VersionedEventSubscriberMessage> {
}
declare const VersionedEventSubscriberMessage: EnumCodecAndFactory<VersionedEventSubscriberMessage>;
declare type VersionedPaginatedQueryResult__actual = Enum<['V1', PaginatedQueryResult]>;
interface VersionedPaginatedQueryResult extends Opaque<VersionedPaginatedQueryResult__actual, VersionedPaginatedQueryResult> {
}
declare const VersionedPaginatedQueryResult: EnumCodecAndFactory<VersionedPaginatedQueryResult>;
declare type VersionedRejectedTransaction__actual = Enum<['V1', RejectedTransaction]>;
interface VersionedRejectedTransaction extends Opaque<VersionedRejectedTransaction__actual, VersionedRejectedTransaction> {
}
declare const VersionedRejectedTransaction: EnumCodecAndFactory<VersionedRejectedTransaction>;
declare type VersionedSignedQueryRequest__actual = Enum<['V1', SignedQueryRequest]>;
interface VersionedSignedQueryRequest extends Opaque<VersionedSignedQueryRequest__actual, VersionedSignedQueryRequest> {
}
declare const VersionedSignedQueryRequest: EnumCodecAndFactory<VersionedSignedQueryRequest>;
declare type VersionedTransaction__actual = Enum<['V1', Transaction]>;
interface VersionedTransaction extends Opaque<VersionedTransaction__actual, VersionedTransaction> {
}
declare const VersionedTransaction: EnumCodecAndFactory<VersionedTransaction>;
declare type VersionedValidBlock__actual = Enum<['V1', ValidBlock]>;
interface VersionedValidBlock extends Opaque<VersionedValidBlock__actual, VersionedValidBlock> {
}
declare const VersionedValidBlock: EnumCodecAndFactory<VersionedValidBlock>;
declare type VersionedValidTransaction__actual = Enum<['V1', ValidTransaction]>;
interface VersionedValidTransaction extends Opaque<VersionedValidTransaction__actual, VersionedValidTransaction> {
}
declare const VersionedValidTransaction: EnumCodecAndFactory<VersionedValidTransaction>;
interface WasmExecutionFail__actual {
    reason: Str;
}
interface WasmExecutionFail extends Opaque<WasmExecutionFail__actual, WasmExecutionFail> {
}
declare const WasmExecutionFail: StructCodecAndFactory<WasmExecutionFail__actual, WasmExecutionFail>;
interface WasmSmartContract__actual {
    raw_data: VecU8;
}
interface WasmSmartContract extends Opaque<WasmSmartContract__actual, WasmSmartContract> {
}
declare const WasmSmartContract: StructCodecAndFactory<WasmSmartContract__actual, WasmSmartContract>;
interface Where__actual {
    expression: EvaluatesToValue;
    values: MapStringEvaluatesToValue;
}
interface Where extends Opaque<Where__actual, Where> {
}
declare const Where: StructCodecAndFactory<Where__actual, Where>;

export { Account, AccountEvent, AccountEventFilter, AccountFilter, AccountId, ActionFilterBox, Add, And, ArrayU8L32, Asset, AssetDefinition, AssetDefinitionEntry, AssetDefinitionEvent, AssetDefinitionEventFilter, AssetDefinitionFilter, AssetDefinitionId, AssetEvent, AssetEventFilter, AssetFilter, AssetId, AssetValue, AssetValueType, AtIndex, BlockHeader, BlockHeaderValue, BlockPublisherMessage, BlockRejectionReason, BlockSubscriberMessage, BlockValue, BurnBox, CommitTimeout, CommittedBlock, Container, Contains, ContainsAll, ContainsAny, ContextValue, DataEvent, DenialReason, Divide, Domain, DomainEvent, DomainEventFilter, DomainFilter, DomainId, Duration, EntityFilter, Equal, EvaluatesToAccountId, EvaluatesToAssetDefinitionId, EvaluatesToAssetId, EvaluatesToBool, EvaluatesToDomainId, EvaluatesToHash, EvaluatesToIdBox, EvaluatesToName, EvaluatesToRegistrableBox, EvaluatesToRoleId, EvaluatesToTriggerId, EvaluatesToU32, EvaluatesToValue, EvaluatesToVecValue, Event, EventPublisherMessage, EventSubscriberMessage, Executable, ExecuteTriggerBox, ExecuteTriggerEvent, ExecuteTriggerEventFilter, ExecutionTime, Expression, FailBox, FilterBox, FilterOptAccountEventFilter, FilterOptAccountFilter, FilterOptAssetDefinitionEventFilter, FilterOptAssetDefinitionFilter, FilterOptAssetEventFilter, FilterOptAssetFilter, FilterOptDomainEventFilter, FilterOptDomainFilter, FilterOptEntityFilter, FilterOptIdFilterAccountId, FilterOptIdFilterAssetDefinitionId, FilterOptIdFilterAssetId, FilterOptIdFilterDomainId, FilterOptIdFilterPeerId, FilterOptIdFilterRoleId, FilterOptIdFilterTriggerId, FilterOptPeerEventFilter, FilterOptPeerFilter, FilterOptRoleEventFilter, FilterOptRoleFilter, FilterOptTriggerEventFilter, FilterOptTriggerFilter, FindAccountById, FindAccountKeyValueByIdAndKey, FindAccountsByDomainId, FindAccountsByName, FindAccountsWithAsset, FindAssetById, FindAssetDefinitionById, FindAssetDefinitionKeyValueByIdAndKey, FindAssetKeyValueByIdAndKey, FindAssetQuantityById, FindAssetsByAccountId, FindAssetsByAssetDefinitionId, FindAssetsByDomainId, FindAssetsByDomainIdAndAssetDefinitionId, FindAssetsByName, FindDomainById, FindDomainKeyValueByIdAndKey, FindError, FindPermissionTokensByAccountId, FindRoleByRoleId, FindRolesByAccountId, FindTransactionByHash, FindTransactionsByAccountId, FindTriggerById, FindTriggerKeyValueByIdAndKey, FindTriggersByDomainId, Fixed, FixedPointI64P9 as FixedPointI64, GenesisTransaction, GrantBox, Greater, Hash, HashOfMerkleTreeVersionedTransaction, HashOfProof, HashOfVersionedCommittedBlock, HashOfVersionedTransaction, HashOfVersionedValidBlock, IdBox, IdFilterAccountId, IdFilterAssetDefinitionId, IdFilterAssetId, IdFilterDomainId, IdFilterPeerId, IdFilterRoleId, IdFilterTriggerId, IdentifiableBox, IfExpression, IfInstruction, Instruction, InstructionExecutionFail, IpfsPath, Less, MapAccountIdAccount, MapAssetDefinitionIdAssetDefinitionEntry, MapAssetIdAsset, MapNameValue, MapPublicKeySignatureOfCommittedBlock, MapPublicKeySignatureOfProof, MapPublicKeySignatureOfTransactionPayload, MapStringEvaluatesToValue, MerkleTreeVersionedTransaction, Metadata, MintBox, Mintable, MismatchValidatorType, Mod, Multiply, Name, NewAccount, NewAssetDefinition, NewDomain, NewRole, Not, NotPermittedFail, OptionDuration, OptionHash, OptionInstruction, OptionIpfsPath, OptionPipelineEntityKind, OptionPipelineStatusKind, OptionTimeInterval, OptionTopology, OptionU32, Or, PaginatedQueryResult, Pagination, Pair, Parameter, Peer, PeerEvent, PeerEventFilter, PeerFilter, PeerId, PermissionToken, PipelineEntityKind, PipelineEvent, PipelineEventFilter, PipelineStatus, PipelineStatusKind, Predicate, PredicateBox, Proof, ProofChain, ProofPayload, PublicKey, QueryBox, QueryError, QueryPayload, QueryResult, RaiseTo, Range, RawGenesisBlock, RawVersioned, Reason, RegisterBox, RegistrableBox, RejectedTransaction, RejectionReason, RemoveKeyValueBox, Repeats, RevokeBox, Role, RoleEvent, RoleEventFilter, RoleFilter, RoleId, SemiIntervalFixed, SemiIntervalU128, SemiIntervalU32, SequenceBox, SetKeyValueBox, Signature, SignatureCheckCondition, SignatureOfCommittedBlock, SignatureOfProof, SignatureOfQueryPayload, SignatureOfTransactionPayload, SignatureOfValidBlock, SignaturesOfCommittedBlock, SignaturesOfProof, SignaturesOfTransactionPayload, SignedQueryRequest, Subtract, TimeEvent, TimeEventFilter, TimeInterval, TimeSchedule, Topology, Transaction, TransactionLimitError, TransactionPayload, TransactionRejectionReason, TransactionValue, TransferBox, TriggerEvent, TriggerEventFilter, TriggerFilter, TriggerFilterBox, TriggerId, UnregisterBox, UnsatisfiedSignatureConditionFail, UnsupportedVersion, ValidBlock, ValidTransaction, ValidatorType, Value, ValueOfKey, VecEvent, VecGenesisTransaction, VecHash, VecHashOfVersionedValidBlock, VecInstruction, VecPeerId, VecPermissionToken, VecPredicateBox, VecProof, VecPublicKey, VecRoleId, VecSignatureOfTransactionPayload, VecSignatureOfValidBlock, VecValue, VecVersionedRejectedTransaction, VecVersionedValidTransaction, VersionError, VersionedBlockPublisherMessage, VersionedBlockSubscriberMessage, VersionedCommittedBlock, VersionedEventPublisherMessage, VersionedEventSubscriberMessage, VersionedPaginatedQueryResult, VersionedRejectedTransaction, VersionedSignedQueryRequest, VersionedTransaction, VersionedValidBlock, VersionedValidTransaction, WasmExecutionFail, WasmSmartContract, Where };
